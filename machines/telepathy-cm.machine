object at /org/freedesktop/Telepathy/AccountManager, org.freedesktop.Telepathy.AccountManager implements org.freedesktop.Telepathy.AccountManager {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.AccountManager",
		];
		ValidAccounts = @ao [
			@o "/org/freedesktop/Telepathy/Account/cmname/proto/account",
		];
		InvalidAccounts = @ao [];
		SupportedAccountProperties = @as [
			"org.freedesktop.Telepathy.Account.Enabled",
			"org.freedesktop.Telepathy.Account.ConnectAutomatically",
			"org.freedesktop.Telepathy.Account.RequestedPresence",
		];
	}

	states {
		Main
	}
}

object at /org/freedesktop/Telepathy/Account/cmname/proto/account implements org.freedesktop.Telepathy.Account {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.Account",
		];
		DisplayName = "Test Account"?;
		Icon = ""?;
		Valid = true;
		Enabled = true;
		Nickname = "John Smith"?;
		Service = ""?;
		Parameters = @a{sv} {};
		AutomaticPresence = (2u?, "available"?, ""?);
		ConnectAutomatically = true?;
		Connection = @o "/";
		ConnectionStatus = 2u;
		ConnectionStatusReason = 0u;
		ConnectionError = "";
		ConnectionErrorDetails = @a{sv} {};
		CurrentPresence = (1u?, ""?, ""?);
		RequestedPresence = (1u?, ""?, ""?);
		ChangingPresence = false?;
		NormalizedName = "account";
		HasBeenOnline = false?;
	}

	states {
		Disconnected;
		Connecting;
		Connected;
	}

	transition from Disconnected to Connecting on property RequestedPresence {
		object->RequestedPresence = value;
		object->ChangingPresence = true;
		object->ConnectionStatus = 1u;
		object->ConnectionStatusReason = 1u;

		emit AccountPropertyChanged ({
			"RequestedPresence" : <object->RequestedPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
		});
	}

	transition from Connecting to Connected on random {
		object->CurrentPresence = object->RequestedPresence;
		object->ChangingPresence = false;
		object->ConnectionStatus = 0u;
		object->ConnectionStatusReason = 1u;
		object->Connection = @o "/org/freedesktop/Telepathy/Connection/cmname/proto/account";
		object->HasBeenOnline = true;

		emit AccountPropertyChanged ({
			"CurrentPresence" : <object->CurrentPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
			"Connection" : <object->Connection>,
			"HasBeenOnline" : <object->HasBeenOnline>,
		});
	}

	transition from Connecting to Disconnected on random {
		object->CurrentPresence = (1u, "", "");
		object->ChangingPresence = false;
		object->ConnectionStatus = 2u;
		object->ConnectionStatusReason = 2u?;
		object->Connection = @o "/";
		object->ConnectionError = ""?;
		object->ConnectionErrorDetails = @a{sv} {}?;

		emit AccountPropertyChanged ({
			"CurrentPresence" : <object->CurrentPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
			"Connection" : <object->Connection>,
			"ConnectionError" : <object->ConnectionError>,
			"ConnectionErrorDetails" : <object->ConnectionErrorDetails>,
		});
	}
}

object at /org/freedesktop/Telepathy/ConnectionManager/cmname, org.freedesktop.Telepathy.ConnectionManager.cmname implements org.freedesktop.Telepathy.ConnectionManager {
	data {
		/* Properties */
		Protocols = @a{sa{sv}} {};

		Interfaces = @as [
			"org.freedesktop.Telepathy.ConnectionManager",
		];

		/* Other variables */
		_ConnectionObjectPath = @o "/org/freedesktop/Telepathy/ConnectionManager/cmname"; /* nonsensical default value */
		_ConnectionBusName = "org.freedesktop.Telepathy.ConnectionManager.cmname";
		_Params = @a(suv) [];
	}

	states {
		Main
	}

	transition inside Main on method GetParameters {
		precondition throwing NotImplemented { inArray(Protocol, keys object->Protocols) }

		reply object->_Params;
	}

	transition inside Main on method ListProtocols {
		reply keys object->Protocols;
	}

	transition inside Main on method RequestConnection {
		precondition throwing NotImplemented { inArray(Protocol, keys object->Protocols) }
		precondition throwing NotAvailable { object->_ConnectionBusName == "" }

		emit NewConnection (object->_ConnectionBusName, object->_ConnectionObjectPath, Protocol);
		reply (object->_ConnectionBusName, object->_ConnectionObjectPath);
	}

	transition inside Main on method RequestConnection {
		throw NetworkError; /* Error messages are fuzzed */
	}

	transition inside Main on method RequestConnection {
		throw InvalidArgument;
	}
}

object at /org/freedesktop/Telepathy/Connection/cmname/proto/account, org.freedesktop.Telepathy.Connection.cmname.proto.account implements org.freedesktop.Telepathy.Connection, org.freedesktop.Telepathy.Connection.Interface.Contacts, org.freedesktop.Telepathy.Connection.Interface.Requests, org.freedesktop.Telepathy.Connection.Interface.Aliasing, org.freedesktop.Telepathy.Connection.Interface.Avatars, org.freedesktop.Telepathy.Connection.Interface.SimplePresence, org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.Connection",
			"org.freedesktop.Telepathy.Connection.Interface.Contacts",
			"org.freedesktop.Telepathy.Connection.Interface.Requests",
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing",
			"org.freedesktop.Telepathy.Connection.Interface.Avatars",
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence",
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities",
		];
		SelfHandle = 1u;
		Status = 1u; /* HACK */
		HasImmortalHandles = true;

		/* Conn.I.Contacts */
		ContactAttributeInterfaces = @as [
			"org.freedesktop.Telepathy.Connection",
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing",
			"org.freedesktop.Telepathy.Connection.Interface.Avatars",
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence",
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities",
		];

		/* Conn.I.Requests. */
		Channels = @a(oa{sv}) [];
		RequestableChannelClasses = @a(a{sv}as) [];

		/* Conn.I.Avatars. */
		SupportedAvatarMIMETypes = @as [
			"image/jpeg",
		]?;
		MinimumAvatarHeight = 0u?;
		MinimumAvatarWidth = 0u?;
		RecommendedAvatarHeight = 100u?;
		RecommendedAvatarWidth = 100u?;
		MaximumAvatarHeight = 256u?;
		MaximumAvatarWidth = 256u?;
		MaximumAvatarBytes = 256u?;

		/* Conn.I.SimplePresence */
		Statuses = {
			"available" : (2u, true, true),
		}?;
		MaximumStatusMessageLength = 100u?;

		_Protocol = "protocol";
		_Handles = {
			1u : "John",
			2u : "James",
			3u : "Brian",
			4u : "Sam",
		}?;
		/*_ClientInterests : TODO*/
		_DesiredStatus = 0u; /* HACK */
		/*_Channels : TODO*/
	}

	states {
		/*Disconnected;*/
		Connecting;
		Disconnected; /* HACK */
		Connected;
	}

	transition inside Disconnected, inside Connecting, inside Connected on method GetInterfaces {
		reply object->Interfaces;
	}

	/* Potentially simulate an older CM */
	transition inside Disconnected on method GetInterfaces {
		throw Disconnected;
	}

	transition inside Disconnected on method GetProtocol {
		reply object->_Protocol;
	}

	/* Deprecated. Empathy keeps calling it, though, which may be a bug. TODO: Investigate. */
	transition inside Disconnected on method GetSelfHandle {
		reply 0u;
	}
	transition inside Connecting, inside Connected on method GetSelfHandle {
		reply object->SelfHandle;
	}

	transition inside Disconnected, inside Connecting, inside Connected on method GetStatus {
		reply object->Status;
	}

	transition inside Disconnected on method HoldHandles {
		throw Disconnected;
	}

	transition inside Disconnected on method InspectHandles {
		throw Disconnected;
	}

	transition inside Disconnected on method ReleaseHandles {
		throw Disconnected;
	}

	transition inside Disconnected on method RequestHandles {
		throw Disconnected;
	}

	/* TODO: transition inside Disconnected on method AddClientInterest {
		TODO: Worth implementing?
	} */

	transition inside Disconnected on method Connect {
		object->_DesiredStatus = 0u;
		/* Status change is effected as a random transition */
	}

	/* TODO: transition inside Disconnected on method Disconnect {} */

	transition from Disconnected to Connecting on random {
		precondition { object->_DesiredStatus != 2u }

		object->Status = 1u;
		emit StatusChanged (object->Status, 0u?);
	}

	transition from Connecting to Connected on random {
		precondition { object->_DesiredStatus == 0u }

		object->Status = 0u;
		emit StatusChanged (object->Status, 0u?);
	}

	transition inside Disconnected on random {
		emit ConnectionError ("org.freedesktop.Telepathy.Error.ConnectionRefused"?, {
			"debug-message" : <""?>,
			"server-message" : <""?>,
			"user-requested" : <true?>,
			"expected-hostname" : <""?>,
			"certificate-hostname" : <""?>,
		}?);
	}

	transition inside Connecting, inside Connected on method GetContactAttributes {
		reply pairKeys (Handles, { /* TODO: Hacky */
			"org.freedesktop.Telepathy.Connection/contact-id" : <""?>,
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias" : <""?>,
			"org.freedesktop.Telepathy.Connection.Interface.Avatars/token" : <""?>,
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence" : <(3u?, "available"?, "Status message!"?)>,
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities/capabilities" : <[(
				{
					"org.freedesktop.Telepathy.something" : <""?>,
					"org.freedesktop.Telepathy.Channel.TargetHandleType" : <0u?>,
				}?,
				[
					"org.freedesktop.Telepathy.somethingelse",
				]?,
			)]?>,
			/* etc. */
		}?);
	}

	transition inside Connecting, inside Connected on method EnsureChannel {
		precondition throwing NotImplemented {
			dictGet (Request, "org.freedesktop.Telepathy.Channel.ChannelType", <"">) == <"org.freedesktop.Telepathy.Channel.Type.ContactList"> &&
			dictGet (Request, "org.freedesktop.Telepathy.Channel.TargetID", <"">) == <"subscribe">
		}

		object->Channels = arrayInsert (object->Channels, 1u, (@o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/subscribe", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <3u>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <0u?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"subscribe">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		reply (true, @o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/subscribe", @a{sv} []);
	}

	transition inside Connecting, inside Connected on random {
		object->Channels = arrayInsert (object->Channels, 0u, (@o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/subscribe", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <3u>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <0u?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"subscribe">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		emit NewChannels ([arrayGet (object->Channels, 0u, (@o "/p", @a{sv} {}))]);
		emit NewChannel (@o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/subscribe",
		                 "org.freedesktop.Telepathy.Channel.Type.ContactList", 3u, 0u?, false?);
	}

	transition inside Connecting, inside Connected on random {
		object->Channels = arrayInsert (object->Channels, 0u, (@o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/group1", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <4u>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <0u?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"group1">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		emit NewChannels ([arrayGet (object->Channels, 0u, (@o "/p", @a{sv} {}))]);
		emit NewChannel (@o "/org/freedesktop/Telepathy/Connection/cmname/proto/account/group1",
		                 "org.freedesktop.Telepathy.Channel.Type.ContactList", 4u, 0u?, false?);
	}

	transition inside Connecting, inside Connected on random {
		precondition { arrayGet (object->Channels, 0u, (@o "/p", @a{sv} {})) != (@o "/p", @a{sv} {}) }

		emit ChannelClosed (structHead (arrayGet (object->Channels, 0u, (@o "/p", @a{sv} {}))));
		object->Channels = arrayRemove (object->Channels, 0u);
	}

	/*transition inside Connecting, inside Connected on method EnsureChannel {
		throw Disconnected; TODO: other errors
	}*/

	transition inside Disconnected on method GetAliasFlags {
		throw Disconnected;
	}

	transition inside Connecting, inside Connected on method GetAliasFlags {
		reply 0u?;
	}

	transition inside Disconnected, inside Connecting, inside Connected on random {
		emit AvatarUpdated (0u?, ""?);
	}

	transition inside Disconnected, inside Connecting, inside Connected on random {
		emit AvatarRetrieved (0u?, ""?, @ay [
			255y, 216y /* JPEG SOI; see if that gets us anywhere */
		]?, "image/jpeg"?);
	}

	transition inside Connecting, inside Connected on method RequestAvatars {
		/* Do nothing specific. AvatarRetrieved will be emitted randomly at some point in the future. Possibly even for the contacts the client's requested. */
		reply ();
	}

	transition inside Disconnected on method RequestAvatars {
		throw Disconnected;
	}

	transition inside Connecting, inside Connected on method RequestAvatars {
		throw InvalidHandle;
	}

	transition inside Disconnected, inside Connecting, inside Connected on random {
		emit PresencesChanged (pairKeys (@au [0u]?, (6u?, "busy"?, "I’m busy."?)));
	}

	transition inside Disconnected, inside Connecting, inside Connected on random {
		emit ContactCapabilitiesChanged (pairKeys (@au [0u]?, [(
			{
				"org.freedesktop.Telepathy.something" : <""?>,
				"org.freedesktop.Telepathy.Channel.TargetHandleType" : <0u?>,
			}?,
			[
				"org.freedesktop.Telepathy.somethingelse",
			]?,
		)]?));
	}
}

object at /org/freedesktop/Telepathy/Connection/cmname/proto/account/subscribe implements org.freedesktop.Telepathy.Channel, org.freedesktop.Telepathy.Channel.Type.ContactList, org.freedesktop.Telepathy.Channel.Interface.Group {
	data {
		/* Channel */
		ChannelType = "org.freedesktop.Telepathy.Channel.Type.ContactList";
		Interfaces = [
			"org.freedesktop.Telepathy.Channel.Type.ContactList",
			"org.freedesktop.Telepathy.Channel",
			"org.freedesktop.Telepathy.Channel.Interface.Group",
		]?;
		TargetHandle = 0u?;
		TargetID = "subscribe";
		TargetHandleType = 3u;
		Requested = false?;
		InitiatorHandle = 0u?;
		InitiatorID = ""?;

		/* Channel.I.Group */
		GroupFlags = 4096u; /* Members_Changed_Detailed */
		HandleOwners = @a{uu} {};
		LocalPendingMembers = @a(uuus) [];
		Members = @au [];
		RemotePendingMembers = @au [];
		SelfHandle = 0u;
		MemberIdentifiers = @a{us} {};

		/* Temporaries */
		_MemberCount = 0u;
	}

	states {
		Open;
		Closed;
	}

	transition from Open to Closed on method Close {
		emit Closed ();
	}

	transition inside Open on random {
		object->Members = arrayInsert (object->Members, 0u, object->_MemberCount);
		object->MemberIdentifiers = dictSet (object->MemberIdentifiers, object->_MemberCount, "foo@example.com"?);

		emit MembersChangedDetailed ([object->_MemberCount], @au [], @au [], @au [], @a{sv} {});

		object->_MemberCount = object->_MemberCount + 1u;
	}

	transition inside Open on random {
		precondition { object->_MemberCount >= 1u }

		object->_MemberCount = object->_MemberCount - 1u;

		object->Members = arrayRemove (object->Members, 0u);
		object->MemberIdentifiers = dictUnset (object->MemberIdentifiers, object->_MemberCount);

		emit MembersChangedDetailed (@au [], [object->_MemberCount], @au [], @au [], @a{sv} {});
	}

	transition inside Open on method GetHandle {
		reply (object->TargetHandleType, object->TargetHandle);
	}

	transition inside Open on method GetGroupFlags {
		reply (object->GroupFlags);
	}

	transition inside Open on method GetSelfHandle {
		reply (object->SelfHandle);
	}

	transition inside Open on method GetAllMembers {
		reply (object->Members, @au [] /* TODO */, object->RemotePendingMembers);
	}

	transition inside Open on method GetLocalPendingMembersWithInfo {
		reply (object->LocalPendingMembers);
	}
}

object at /org/freedesktop/Telepathy/Connection/cmname/proto/account/group1 implements org.freedesktop.Telepathy.Channel, org.freedesktop.Telepathy.Channel.Type.ContactList, org.freedesktop.Telepathy.Channel.Interface.Group {
	data {
		/* Channel */
		ChannelType = "org.freedesktop.Telepathy.Channel.Type.ContactList";
		Interfaces = [
			"org.freedesktop.Telepathy.Channel.Type.ContactList",
			"org.freedesktop.Telepathy.Channel",
			"org.freedesktop.Telepathy.Channel.Interface.Group",
		]?;
		TargetHandle = 0u?;
		TargetID = "group1";
		TargetHandleType = 4u;
		Requested = false?;
		InitiatorHandle = 0u?;
		InitiatorID = ""?;

		/* Channel.I.Group */
		GroupFlags = 4096u; /* Members_Changed_Detailed */
		HandleOwners = @a{uu} {};
		LocalPendingMembers = @a(uuus) [];
		Members = @au [];
		RemotePendingMembers = @au [];
		SelfHandle = 0u;
		MemberIdentifiers = @a{us} {};

		/* Temporaries */
		_MemberCount = 0u;
	}

	states {
		Open;
		Closed;
	}

	transition from Open to Closed on method Close {
		emit Closed ();
	}

	transition inside Open on random {
		object->Members = arrayInsert (object->Members, 0u, object->_MemberCount);
		object->MemberIdentifiers = dictSet (object->MemberIdentifiers, object->_MemberCount, "foo@example.com"?);

		emit MembersChangedDetailed ([object->_MemberCount], @au [], @au [], @au [], @a{sv} {});

		object->_MemberCount = object->_MemberCount + 1u;
	}

	transition inside Open on random {
		precondition { object->_MemberCount >= 1u }

		object->_MemberCount = object->_MemberCount - 1u;

		object->Members = arrayRemove (object->Members, 0u);
		object->MemberIdentifiers = dictUnset (object->MemberIdentifiers, object->_MemberCount);

		emit MembersChangedDetailed (@au [], [object->_MemberCount], @au [], @au [], @a{sv} {});
	}

	transition inside Open on method GetHandle {
		reply (object->TargetHandleType, object->TargetHandle);
	}

	transition inside Open on method GetGroupFlags {
		reply (object->GroupFlags);
	}

	transition inside Open on method GetSelfHandle {
		reply (object->SelfHandle);
	}

	transition inside Open on method GetAllMembers {
		reply (object->Members, @au [] /* TODO */, object->RemotePendingMembers);
	}

	transition inside Open on method GetLocalPendingMembersWithInfo {
		reply (object->LocalPendingMembers);
	}
}

