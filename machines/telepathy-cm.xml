<?xml version="1.0" ?>

<!-- Connection_Manager.xml -->
<node>
  <tp:copyright>Copyright (C) 2005-2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2008 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.ConnectionManager">

    <tp:simple-type name="Connection_Manager_Name" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The name of a connection manager, found in its well-known
          bus name and object path. This must be a non-empty string of
          ASCII letters, digits and underscores, starting with a letter.
          This is typically the name of the executable with any "telepathy-"
          prefix removed, and any hyphen/minus signs replaced by
          underscores.</p>

        <p>Connection manager names SHOULD NOT be the same as the name of
          the protocol they implement.</p>

        <tp:rationale>
          <p>This is likely to lead to conflicts between different
            implementations of the same protocol (or indeed inability
            to distinguish between the different implementations!). The
            Telepathy project traditionally uses some sort of pun (Haze is
            based on libpurple, Salut implements a protocol often called
            Bonjour, and Wilde implements the OSCAR protocol).</p>
        </tp:rationale>

        <p>Connection manager names SHOULD NOT be the same as the name of
          a library on which they are based.</p>

        <tp:rationale>
          <p>We often abbreviate, for instance, <i>telepathy-haze</i> as
            “Haze”, but abbreviating <i>telepathy-sofiasip</i>—since renamed to
            <i>telepathy-rakia</i> for exactly this reason—to “Sofia-SIP”
            caused confusion between the connection manager and the library it
            uses. Please don't repeat that mistake.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:changed version="0.17.1">Prior to version 0.17.1, the allowed
        characters were not specified</tp:changed>
    </tp:simple-type>

    <tp:simple-type name="Protocol" type="s" array-name="Protocol_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An instant messaging protocol. It must consist only of ASCII
          letters, digits and hyphen/minus signs (U+002D "-"), and must start
          with a letter. Where possible, this SHOULD be
          chosen from the following well-known values:</p>

        <ul>
          <li>aim - AOL Instant Messenger (OSCAR or TOC)</li>
          <li>gadugadu - Gadu-Gadu</li>
          <li>groupwise - Novell Groupwise</li>
          <li>icq - ICQ (OSCAR)</li>
          <li>irc - Internet Relay Chat (RFC 1459, 2810-2813)</li>
          <li>jabber - XMPP (RFC 3920, 3921) or Jabber</li>
          <li>local-xmpp - Link-local XMPP (XEP-0174) (Bonjour, Salut)</li>
          <li>msn - MSNP (Windows Live Messenger)</li>
          <li>myspace - MySpaceIM</li>
          <li>mxit - MXit</li>
          <li>napster - Napster</li>
          <li>qq - Tencent QQ</li>
          <li>sametime - IBM Lotus Sametime</li>
          <li>silc - SILC</li>
          <li>sip - Session Initiation Protocol (SIP), with or without
            SIMPLE support</li>
          <li>skype - Skype</li>
          <li>tel - telephony (the
            <abbr title="Public Switched Telephone Network">PSTN</abbr>,
            including GSM, CDMA and fixed-line telephony)</li>
          <li>trepia - Trepia</li>
          <li>yahoo - YMSG (Yahoo! Messenger)</li>
          <li>yahoojp - Japanese version of YMSG</li>
          <li>zephyr - Zephyr</li>
        </ul>
      </tp:docstring>
      <tp:changed version="0.17.1">Prior to version 0.17.1, the allowed
        characters were not specified</tp:changed>
    </tp:simple-type>

    <tp:struct name="Param_Spec" array-name="Param_Spec_List">
      <tp:docstring>A struct representing an allowed parameter, as returned
        by GetParameters on the ConnectionManager interface.</tp:docstring>
      <tp:member type="s" name="Name">
        <tp:docstring>A string parameter name</tp:docstring>
      </tp:member>
      <tp:member type="u" name="Flags">
        <tp:docstring>A bitwise OR of the parameter flags</tp:docstring>
      </tp:member>
      <tp:member type="s" name="Signature">
        <tp:docstring>A string containing the D-Bus type signature
          for this parameter</tp:docstring>
      </tp:member>
      <tp:member type="v" name="Default_Value">
        <tp:docstring>The default value (if the Has_Default flag is not
          present, there is no default and this takes some dummy value,
          which SHOULD be of the appropriate D-Bus type)</tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:flags name="Conn_Mgr_Param_Flags" value-prefix="Conn_Mgr_Param_Flag" type="u">
      <tp:flag suffix="Required" value="1">
        <tp:docstring>
          This parameter is required for connecting to the server.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Register" value="2">
        <tp:docstring>
          This parameter is required for registering an account on the
          server.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Has_Default" value="4">
        <tp:docstring>
          This parameter has a default value, which is returned in
          GetParameters; not providing this parameter is equivalent to
          providing the default.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Secret" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This parameter should be considered private or secret; for
            instance, clients should store it in a "password safe" like
            gnome-keyring or kwallet, omit it from debug logs, and use a
            text input widget that hides the value of the parameter.</p>

          <p>(Clients that support older connection managers may also treat
            any parameter whose name contains "password" as though it had this
            flag.)</p>
        </tp:docstring>
        <tp:added version="0.17.2"/>
      </tp:flag>
      <tp:flag suffix="DBus_Property" value="16">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This parameter is also a D-Bus property on the resulting
            <tp:dbus-ref
              namespace="ofdT">Connection</tp:dbus-ref>; a
            parameter named <code>com.example.Duck.Macaroni</code> with this
            flag corresponds to the <code>Macaroni</code> property on the
            <code>com.example.Duck</code> interface.  Its value can be queried
            and possibly changed on an existing Connection using methods on the
            <code>org.freedesktop.DBus.Properties</code> interface.</p>

          <p>When a new value for a parameter with this flag is passed to
            <tp:dbus-ref namespace="ofdT">Account.UpdateParameters</tp:dbus-ref>,
            the account manager will attempt to update its value on any running
            connections. Similarly, if the parameter also has the
            <code>Has_Default</code> flag, and is passed in the second argument
            to <code>UpdateParameters</code>, the default value will be applied
            to any running
            connections. Thus, clients generally do not need to directly access
            or update the connection property; instead, they SHOULD manipulate
            <tp:dbus-ref namespace="ofdT">Account.Parameters</tp:dbus-ref>.</p>

          <tp:rationale>
            <p>This allows runtime-configurable options to be stored and
              maintained by the <tp:dbus-ref
              namespace='ofdT'>AccountManager</tp:dbus-ref>, without needing to
              invent a separate account preference for “properties that should
              be set on the connection as soon as it is created”. It was
              originally invented to manage <tp:dbus-ref
                namespace='ofdT.Connection.Interface'>Cellular</tp:dbus-ref>
              preferences.</p>
          </tp:rationale>
        </tp:docstring>
        <tp:added version="0.17.16"/>
      </tp:flag>
    </tp:flags>

    <method name="GetParameters">
      <arg direction="in" name="Protocol" type="s">
        <tp:docstring>
          The required protocol name
        </tp:docstring>
      </arg>
      <arg direction="out" type="a(susv)"
        name="Parameters">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of structs representing possible parameters.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get a list of the parameters which may be specified in the
        <tp:dbus-ref namespace='ofdT.Account'>Parameters</tp:dbus-ref> of an
        <tp:dbus-ref namespace='ofdT'>Account</tp:dbus-ref> (or, for
        specialised applications which do not use the account manager, passed
        to <tp:member-ref>RequestConnection</tp:member-ref>). Some parameters
        are mandatory, and some parameters only make sense when registering new
        accounts with the server; see the <tp:type>Param_Spec</tp:type>
        documentation for more details.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The requested protocol is not supported by this manager
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:mapping name="Protocol_Properties_Map">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A map from protocol identifiers supported by a connection
          manager to the immutable properties of the corresponding
          <tp:dbus-ref namespace="org.freedesktop.Telepathy"
            >Protocol</tp:dbus-ref> objects.</p>
      </tp:docstring>

      <tp:member name="Protocol" type="s">
        <tp:docstring>A protocol name</tp:docstring>
      </tp:member>

      <tp:member name="Properties" type="a{sv}">
        <tp:docstring>The immutable properties of the corresponding
          Protocol object</tp:docstring>
      </tp:member>
    </tp:mapping>

    <property name="Protocols"
      access="read" type="a{sa{sv}}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A map from protocol identifiers supported by this connection
          manager to the immutable properties of the corresponding
          <tp:dbus-ref namespace="org.freedesktop.Telepathy"
            >Protocol</tp:dbus-ref> objects.</p>

        <tp:rationale>
          <p>Providing the immutable properties here means that
            when the API of Protocol objects has been finalized,
            most clients will only need one D-Bus round trip to interrogate
            the ConnectionManager about all its protocols.</p>
        </tp:rationale>

        <p>If this map is empty or missing, clients SHOULD fall back to
          calling <tp:member-ref>ListProtocols</tp:member-ref> and
          <tp:member-ref>GetParameters</tp:member-ref>.</p>
      </tp:docstring>
    </property>

    <method name="ListProtocols">
      <arg direction="out" type="as" name="Protocols">
        <tp:docstring>
          The keys of the <tp:member-ref>Protocols</tp:member-ref> map.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get a list of protocol identifiers that are implemented by this
        connection manager.
      </tp:docstring>
    </method>

    <signal name="NewConnection">
      <arg name="Bus_Name" type="s">
        <tp:docstring>
          The D-Bus service where the connection object can be found
        </tp:docstring>
      </arg>
      <arg name="Object_Path" type="o">
        <tp:docstring>
          The object path of the Connection object on this service
        </tp:docstring>
      </arg>
      <arg name="Protocol" type="s">
        <tp:docstring>
          The identifier for the protocol this connection uses
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when a new <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref> object
        is created.
      </tp:docstring>
    </signal>

    <method name="RequestConnection">
      <arg direction="in" name="Protocol" type="s">
        <tp:docstring>
          The protocol identifier
        </tp:docstring>
      </arg>
      <arg direction="in" name="Parameters" type="a{sv}">
        <tp:docstring>
          A dictionary mapping parameter names to values of the appropriate
          type, as indicated by <tp:member-ref>GetParameters</tp:member-ref>
          and the well-known list of names and value types documented on the
          <tp:type>Connection_Parameter_Name</tp:type> type.
        </tp:docstring>
      </arg>
      <arg direction="out" type="s" name="Bus_Name">
        <tp:docstring>
          A D-Bus service name where the new Connection object can be found
        </tp:docstring>
      </arg>
      <arg direction="out" type="o" name="Object_Path">
        <tp:docstring>
          The D-Bus object path to the Connection on this service
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request a
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
          object representing a given account on a given
          protocol with the given parameters. The method returns the bus name
          and the object path where the new Connection object can be found,
          which should have the status of Connection_Status_Disconnected, to
          allow signal handlers to be attached before connecting is started
          with the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">Connect</tp:dbus-ref>
          method.</p>

        <p><strong>Most applications should not use this method</strong>: they
          should instead use the the <tp:dbus-ref
          namespace='ofdT.Account'>Connection</tp:dbus-ref> property on an
          <tp:dbus-ref namespace='ofdT'>Account</tp:dbus-ref> object obtained
          from the <tp:dbus-ref
          namespace='ofdT'>AccountManager</tp:dbus-ref>. This method is used
          internally by the account manager to create connections when
          needed.</p>

        <p>The parameters which must and may be provided in the parameters
        dictionary can be discovered with the
        <tp:member-ref>GetParameters</tp:member-ref> method. These
        parameters, their types, and their default values may be cached
        in files so that all available connection managers do not need to be
        started to discover which protocols are available.</p>

        <p>To request values for these parameters from the user, a client must
        have prior knowledge of the meaning of the parameter names, so the
        well-known names and types defined by the
        <tp:type>Connection_Parameter_Name</tp:type> type should be used where
        appropriate.</p>

        <p>Connection manager authors SHOULD avoid introducing parameters
          whose default values would not be serializable in a
          <code>.manager</code> file.</p>

        <tp:rationale>
          <p>The same serialization format is used in Mission Control
            to store accounts.</p>
        </tp:rationale>

        <p>Every successful RequestConnection call will cause the emission of a
        <tp:member-ref>NewConnection</tp:member-ref> signal for the same newly
        created connection. The
        requester can use the returned object path and service name
        independently of the emission of that signal. In that case this signal
        emission is most useful for, e.g. other processes that are monitoring
        the creation of new connections.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The requested protocol is not supported by this manager
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested connection already appears to exist
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            Unrecognised connection parameters
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:simple-type name="Connection_Parameter_Name" type="s">
      <tp:added version="0.21.2"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Well-known connection parameter names, along with their expected
          type. Where possible, connection managers should use names and types
          from this list in the <tp:dbus-ref
          namespace='ofdT.Protocol'>Parameters</tp:dbus-ref> that may be passed
          to <tp:member-ref>RequestConnection</tp:member-ref>.</p>

        <dl>
          <dt>account (s)</dt>
          <dd>The identifier for the user's account on the server</dd>

          <dt>server (s)</dt>
          <dd>A fully qualified domain name or numeric IPv4 or IPv6 address.
            Using the fully-qualified domain name form is recommended whenever
            possible. If this parameter is specified and the account for that
            protocol also specifies a server, this parameter should override
            that in the user id.</dd>

          <dt>port (q)</dt>
          <dd>A TCP or UDP port number. If this parameter is specified and the
            account for that protocol also specifies a port, this parameter
            should override that in the account.</dd>

          <dt>password (s)</dt>
          <dd>A password associated with the account.</dd>

          <dt>require-encryption (b)</dt>
          <dd>Require encryption for this connection. A connection should fail
            to connect if require-encryption is set and an encrypted connection
            is not possible.</dd>

          <dt>register (b)</dt>
          <dd>This account should be created on the server if it does not
            already exist.</dd>

          <dt>ident (s)</dt>
          <dd>The local username to report to the server if necessary, such as
            in IRC.</dd>

          <dt>fullname (s)</dt>
          <dd>The user's full name if the service requires this when
            authenticating or registering.</dd>

          <dt>stun-server (s)</dt>
          <dd>The IP address or FQDN of a STUN server to use for NAT traversal,
            without any ":port" suffix.</dd>

          <dt>stun-port (q)</dt>
          <dd>The UDP port number on the stun-server to use for STUN. Only
            significant if the stun-server is also supplied.</dd>

          <dt>keepalive-interval (u)</dt>
          <dd>
            <p>The time in seconds between pings sent to the server to ensure
              that the connection is still alive, or <tt>0</tt> to disable such
              pings.</p>

            <p>This parameter is superseded by the <tp:dbus-ref
                namespace='ofdT.Connection.Interface.Keepalive.DRAFT'>KeepaliveInterval</tp:dbus-ref>
              property, which can be updated on an already-established
              connection as well as being specified when requesting the
              connection. Clients SHOULD provide that parameter instead, if
              allowed; new connection managers SHOULD implement it in
              preference to this one.</p>
          </dd>
        </dl>

        <p>The following well-known parameter names correspond to D-Bus
          properties, and thus their <tp:type>Conn_Mgr_Param_Flags</tp:type>
          should include DBus_Property. See that flag for more details on this
          kind of parameter.</p>

        <tp:list-dbus-property-parameters/>
      </tp:docstring>
    </tp:simple-type>

    <property name="Interfaces"
      type="as" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the extra interfaces provided by this connection manager
          (i.e. extra functionality that can be provided even before a
          connection has been created).</p>

        <p>No interfaces suitable for listing in this property are currently
          defined; it's provided as a hook for possible future
          functionality.</p>

        <p>To be compatible with older connection managers, if retrieving
          this property fails, clients SHOULD assume that its value is
          an empty list.</p>

        <p>Connection managers with a non-empty list of Interfaces MUST
          represent them in the <code>.manager</code> file, if they have one,
          as an <code>Interfaces</code> key in the
          group headed <code>[ConnectionManager]</code>, whose value is a list
          of strings each followed by a semicolon.</p>
      </tp:docstring>
      <tp:added version="0.17.8"/>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A D-Bus service which allows connections to be created. The manager
      processes are intended to be started by D-Bus service activation.</p>

    <p>For service discovery, each Telepathy connection manager must have
      a <em>connection manager name</em> (see
      <tp:type>Connection_Manager_Name</tp:type> for syntax).</p>

    <p>The connection manager must then provide a well-known bus name of
      <code>org.freedesktop.Telepathy.ConnectionManager.<em>cmname</em></code>
      where <em>cmname</em> is its connection manager name. If it makes sense
      to start the connection manager using D-Bus service activation, it
      must register that well-known name for service activation by installing
      a .service file.</p>

    <p>Clients can list the running connection managers by calling the
      ListNames method on the D-Bus daemon's org.freedesktop.DBus interface
      and looking for names matching the above pattern; they can list the
      activatable connection managers by calling ListActivatableNames, and
      they should usually combine the two lists to get a complete list of
      running or activatable connection managers.</p>

    <p>When the connection manager is running, it must have an object
      implementing the ConnectionManager interface at the object path
      <code>/org/freedesktop/Telepathy/ConnectionManager/<em>cmname</em></code>.
    </p>

    <p>Connection managers' capabilities can be determined dynamically by
      calling their <tp:member-ref>ListProtocols</tp:member-ref> method, then
      for each protocol of interest, calling
      <tp:member-ref>GetParameters</tp:member-ref> to discover the required and
      optional parameters.
      However, since it is inefficient to activate all possible connection
      managers on the system just to find out what they can do, there
      is a standard mechanism to store static information about CMs in
      ".manager files".</p>

    <p>To look up a connection manager's supported protocols, clients
      should search the data directories specified by
      <a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">the
        freedesktop.org XDG Base Directory Specification</a> ($XDG_DATA_HOME,
      defaulting to $HOME/.local/share if unset, followed by
      colon-separated paths from $XDG_DATA_DIRS, defaulting to
      /usr/local/share:/usr/share if unset) for the first file named
      <code>telepathy/managers/<em>cmname</em>.manager</code> that can be
      read without error. This file has the same syntax as a
      <a href="http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html">freedesktop.org Desktop Entry file</a>.</p>

    <p>Clients must still support connection managers for which no
      <code>.manager</code> file can be found, which they can do by activating
      the connection manager and calling its methods; the
      <code>.manager</code> file is merely an optimization. Connection managers
      whose list of protocols can change at any time (for instance, via
      a plugin architecture) should not install a <code>.manager</code>
      file.</p>

    <p>The <code>.manager</code> file SHOULD have a group headed
      <code>[ConnectionManager]</code>, containing a key
      <code>Interfaces</code> representing
      <tp:member-ref>Interfaces</tp:member-ref> as a sequence of strings
      each followed by a semicolon (the "localestrings" type from the Desktop
      Entry Specification).</p>

    <p>The <code>[ConnectionManager]</code> group SHOULD NOT contain keys
      <code>ObjectPath</code> or <code>BusName</code>. If it does, they MUST
      be ignored.</p>

    <tp:rationale>
      <p>The object path and bus name are derivable from the connection
        manager's name, which is part of the filename, so these keys are
        redundant. They were required in very old versions of Telepathy.</p>
    </tp:rationale>

    <p>For each protocol name <em>proto</em> that would be returned by
      ListProtocols, the .manager file contains a group
      headed <code>[Protocol <em>proto</em>]</code>. For each parameter
      <em>p</em> that would be returned by GetParameters(<em>proto</em>), the
      .manager file contains a key <code>param-<em>p</em></code> with a value
      consisting of a D-Bus signature (a single complete type), optionally
      followed by a space and a space-separated list of flags. The supported
      flags are:</p>

    <ul>
      <li><code>required</code>, corresponding to
        Conn_Mgr_Param_Flag_Required</li>
      <li><code>register</code>, corresponding
        to Conn_Mgr_Param_Flag_Register</li>
      <li><code>secret</code>, corresponding
        to Conn_Mgr_Param_Flag_Secret</li>
      <li><code>dbus-property</code>, corresponding
        to Conn_Mgr_Param_Flag_DBus_Property</li>
    </ul>

    <p>The group may also contain a key <code>default-<em>p</em></code>
      whose value is a string form of the default value for the parameter.
      If this key exists, it sets the default, and also sets the flag
      Conn_Mgr_Param_Flag_Has_Default. The default value is formatted
      according to the D-Bus signature as follows:</p>

    <dl>
      <dt>s (string)</dt>
        <dd>The UTF-8 string, with the standard backslash escape
          sequences supported by the Desktop Entry Specification
          (the "localestring" type from the Desktop Entry Specification)</dd>
      <dt>o (object path)</dt>
        <dd>The object path as an ASCII string</dd>
      <dt>b (boolean)</dt>
        <dd>"true" (case-insensitively) or "1" means True, "false"
          (case-insensitively) or "0" means False; when writing a file,
          "true" and "false" SHOULD be used</dd>
      <dt>y, q, u, t (8-, 16-, 32-, 64-bit unsigned integer)</dt>
        <dd>ASCII decimal integer</dd>
      <dt>n, i, x (16-, 32-, 64-bit signed integer)</dt>
        <dd>ASCII decimal integer, optionally prefixed with "-"</dd>
      <dt>d (double-precision floating point)</dt>
        <dd>ASCII decimal number</dd>
      <dt>as (array of string)</dt>
        <dd>A sequence of UTF-8 strings each followed by a semicolon, with
          any semicolons they contain escaped with a backslash
          (the "localestrings" type from the Desktop Entry Specification)</dd>
    </dl>

    <p>Currently, no other D-Bus signatures are allowed to have default values,
      but clients parsing the .manager file MUST ignore defaults
      that they cannot parse, and treat them as if the
      <code>default-<em>p</em></code> key was not present at all.</p>

    <p>It is not required that a connection manager be able to support multiple
    protocols, or even multiple connections. When a connection is made, a
    service name where the connection object can be found is returned. A
    manager which can only make one connection may then remove itself from its
    well-known bus name, causing a new connection manager to be activated when
    somebody attempts to make a new connection.</p>
    </tp:docstring>

    <tp:changed version="0.17.2">Prior to version 0.17.2, support for
      CMs with no .manager file was not explicitly required.</tp:changed>
    <tp:changed version="0.17.16">Prior to version 0.17.16 the serialization
      of string arrays (signature 'as') was not defined</tp:changed>
  </interface>


<!-- Connection.xml -->
  <tp:copyright>Copyright (C) 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection">
    <tp:requires interface="org.freedesktop.Telepathy.Connection.Interface.Requests"/>
    <tp:requires interface="org.freedesktop.Telepathy.Connection.Interface.Contacts"/>

    <tp:struct name="Channel_Info" array-name="Channel_Info_List">
      <tp:deprecated version="0.17.23"/>
      <tp:docstring>A struct representing a channel, as returned by
        ListChannels on the Connection interface.</tp:docstring>
      <tp:member type="o" name="Channel">
        <tp:docstring>The object path of the channel, which is on the
          same bus name as the connection</tp:docstring>
      </tp:member>
      <tp:member type="s" name="Channel_Type">
        <tp:docstring>The channel's type</tp:docstring>
      </tp:member>
      <tp:member type="u" name="Handle_Type">
        <tp:docstring>The type of the handle that the channel communicates
          with, or Handle_Type_None if there is no associated
          handle</tp:docstring>
      </tp:member>
      <tp:member type="u" name="Handle">
        <tp:docstring>The handle that the channel communicates with,
          or 0 if there is no associated handle</tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="Connect">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the connection be established. This will be done
          asynchronously and errors will be returned by emitting
          <tp:member-ref>StatusChanged</tp:member-ref> signals.</p>

        <p>Calling this method on a Connection that is already connecting
          or connected is allowed, and has no effect.</p>
      </tp:docstring>
    </method>

    <method name="Disconnect">
      <tp:docstring>
        Request that the connection be closed. This closes the connection if
        it's not already in DISCONNECTED state, and destroys the connection
        object.
      </tp:docstring>
    </method>

    <property name="Interfaces"
      access="read" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The set of optional interfaces supported by this connection.
          Before the connection status changes to CONNECTED,
          this property may change at any time, but it is guaranteed that
          interfaces will only be added, not removed. After the connection
          status changes to CONNECTED, this property cannot
          change further.</p>

        <p>There is no explicit change notification; reasonable behaviour
          for a client would be to retrieve the interfaces list once
          initially, and once more when it becomes CONNECTED.</p>

        <tp:rationale>
          <p>In some connection managers, certain capabilities of a connection
            are known to be implemented for all connections (e.g. support
            for SimplePresence), and some interfaces (like SimplePresence) can
            even be used before connecting. Other capabilities may
            or may not exist, depending on server functionality; by the time
            the connection goes CONNECTED, the connection manager is expected
            to have evaluated the server's functionality and enabled any extra
            interfaces for the remainder of the Connection's lifetime.</p>
        </tp:rationale>
      </tp:docstring>
      <tp:added version="0.19.2">Clients SHOULD fall back
        to calling <tp:member-ref>GetInterfaces</tp:member-ref> if this
        property is not supported.</tp:added>
    </property>

    <method name="GetInterfaces">
      <arg direction="out" type="as"
        name="Interfaces">
        <tp:docstring>
          The value of the <tp:member-ref>Interfaces</tp:member-ref> property
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Returns the set of optional interfaces supported by this
          connection. See <tp:member-ref>Interfaces</tp:member-ref> for more
          details.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected">
          <tp:docstring>
             Before version 0.17.8 calling GetInterfaces while
             on a connection that is not yet CONNECTED wasn't allowed. If a
             CM returns this error, its list of interfaces should be regarded
             as empty until it becomes CONNECTED.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="GetProtocol">
      <arg direction="out" type="s" name="Protocol">
        <tp:docstring>
          A string identifier for the protocol
        </tp:docstring>
      </arg>

      <tp:docstring>
        Get the protocol this connection is using.
      </tp:docstring>
    </method>

    <signal name="SelfHandleChanged">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>SelfHandle</tp:member-ref> property
        changes. If the connection
        is not yet in the CONNECTED state, this signal is not guaranteed
        to be emitted.
      </tp:docstring>
      <tp:added version="0.17.10">Clients MAY assume that if the
        SelfHandle property exists, this signal will be emitted when
        necessary.</tp:added>

      <arg type="u" name="Self_Handle">
        <tp:docstring>
          The new value of the SelfHandle property.
        </tp:docstring>
      </arg>
    </signal>

    <property name="SelfHandle"
      type="u" access="read">
      <tp:docstring>
        The handle which represents the user on this connection, which will
        remain valid for the lifetime of this connection, or until a change
        in the user's identifier is signalled by the
        <tp:member-ref>SelfHandleChanged</tp:member-ref> signal.
        If the connection is not yet in the CONNECTED state, the value of
        this property MAY be zero.
      </tp:docstring>
      <tp:added version="0.17.10">For compatibility with older
        versions, clients should fall back to calling the
        <tp:member-ref>GetSelfHandle</tp:member-ref>
        method.</tp:added>
    </property>

    <method name="GetSelfHandle">
      <arg direction="out" type="u"
        name="Self_Handle">
        <tp:docstring>
          The value of the <tp:member-ref>SelfHandle</tp:member-ref> property
        </tp:docstring>
      </arg>

      <tp:docstring>
        Returns the value of the SelfHandle property. Change notification
        is via the SelfHandleChanged signal.
      </tp:docstring>
      <tp:deprecated version="0.17.10">Use GetAll to get the
        SelfHandle property (and all other Connection properties)
        instead.</tp:deprecated>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>

    <property name="Status"
      access="read" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The current status of the connection. Change notification is via
          the <tp:member-ref>StatusChanged</tp:member-ref> signal.</p>

        <p>If retrieval of property succeeds and yields the value Disconnected,
          this indicates that the connection has not yet been established.
          If connection has been attempted and failed, the Connection object
          SHOULD be removed from the bus entirely, meaning that retrieval of
          this property SHOULD fail.</p>
      </tp:docstring>
      <tp:added version="0.19.2">Clients SHOULD fall back
        to calling <tp:member-ref>GetStatus</tp:member-ref> if this
        property is not supported.</tp:added>
    </property>

    <method name="GetStatus">
      <arg direction="out" type="u"
        name="Status">
        <tp:docstring>
          The value of the <tp:member-ref>Status</tp:member-ref> property
        </tp:docstring>
      </arg>

      <tp:docstring>
        Get the current status as defined in the
        <tp:member-ref>StatusChanged</tp:member-ref> signal.
      </tp:docstring>
    </method>

    <method name="HoldHandles">
      <tp:changed version="0.21.6">If
        <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
        this method no longer does anything.</tp:changed>
      <arg direction="in" name="Handle_Type" type="u">
        <tp:docstring>
          The type of handle to be held
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" type="au">
        <tp:docstring>
          A array of integer handles to hold
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
          which SHOULD always be the case in this version of telepathy-spec,
          this method does nothing and returns successfully, unless
          the given handle type or any of the given handles is invalid.</p>

        <p>In older connection managers, this method
        notifies the connection manger that your client is holding a copy
        of handles which may not be in use in any existing channel or
        list, and were not obtained by using the
        <tp:member-ref>RequestHandles</tp:member-ref> method. For
        example, a handle observed in an emitted signal, or displayed
        somewhere in the UI that is not associated with a channel. The
        connection manager must not deallocate a handle where any clients
        have used this method to indicate it is in use until the
        <tp:member-ref>ReleaseHandles</tp:member-ref>
        method is called, or the clients disappear from the bus.</p>

        <p>Note that HoldHandles is idempotent - calling it multiple times
          is equivalent to calling it once. If a handle is "referenced" by
          several components which share a D-Bus unique name, the client
          should perform reference counting internally, and only call
          ReleaseHandles when none of the cooperating components need the
          handle any longer.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The handle type is invalid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            One of the given handles is not valid
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="InspectHandles">
      <arg direction="in" name="Handle_Type" type="u">
        <tp:docstring>
          The type of handle to be inspected
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" type="au">
        <tp:docstring>
          An array of integer handles of this type
        </tp:docstring>
      </arg>

      <arg direction="out" type="as" name="Identifiers">
        <tp:docstring>
          An array of identifiers corresponding to the given handles, in the same order.
        </tp:docstring>
      </arg>

      <tp:docstring>
        Return a string representation for a number of handles of a given
        type.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The handle type is invalid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            One of the given handles is not valid
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="ListChannels">
      <tp:deprecated version="0.17.23">Use the
        <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.Channels</tp:dbus-ref>
        property instead.
      </tp:deprecated>

      <arg direction="out" type="a(osuu)"
        name="Channel_Info">
        <tp:docstring>
          An array of structs representing channels.
        </tp:docstring>
      </arg>

      <tp:docstring>
        List all the channels which currently exist on this connection.
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>

    <signal name="NewChannel">
      <tp:deprecated version="0.17.23">Connection managers MUST still
        emit this signal, but clients SHOULD listen for the <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.NewChannels</tp:dbus-ref>
        signal instead.
      </tp:deprecated>

      <arg name="Object_Path" type="o">
        <tp:docstring>
          A D-Bus object path for the channel object on this service
        </tp:docstring>
      </arg>

      <arg name="Channel_Type" type="s">
        <tp:docstring>
          A D-Bus interface name representing the channel type
        </tp:docstring>
      </arg>

      <arg name="Handle_Type" type="u">
        <tp:docstring>
          An integer representing the type of handle this channel
          communicates with, or Handle_Type_None if no handle is specified
        </tp:docstring>
      </arg>

      <arg name="Handle" type="u">
        <tp:docstring>
          A handle indicating the specific contact, room or list this
          channel communicates with, or zero if no handle is specified
        </tp:docstring>
      </arg>

      <arg name="Suppress_Handler" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, the channel was requested by a client that intends to
            present it to the user itself (i.e. it passed suppress_handler=TRUE
            to the <tp:member-ref>RequestChannel</tp:member-ref> method), so no
            other handler should be
            launched. Clients MAY assume that channels where this is true
            were created by a user request.</p>

          <p>If false, either the channel was created due to incoming
            information from the service, or the channel was requested by
            a local client that does not intend to handle the channel itself
            (this usage is deprecated).</p>

          <p>Clients MUST NOT assume that only incoming channels will have
            this flag set to false.</p>
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when a new Channel object is created, either through user
        request or incoming information from the service.
      </tp:docstring>
    </signal>

    <method name="ReleaseHandles">
      <tp:changed version="0.21.6">If
        <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
        this method no longer does anything.</tp:changed>
      <arg direction="in" name="Handle_Type" type="u">
        <tp:docstring>
          An integer handle type (as defined in RequestHandle)
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handles" type="au">
        <tp:docstring>
          An array of integer handles being held by the client
        </tp:docstring>
      </arg>

      <tp:docstring>
        <p>If <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
          which SHOULD always be the case in this version of telepathy-spec,
          this method does nothing and returns successfully, unless
          the given handle type or any of the given handles is invalid.</p>

        <p>In older connection managers, this method
        explicitly notifies the connection manager that your client is no
        longer holding any references to the given handles, and that they
        may be deallocated if they are not held by any other clients or
        referenced by any existing channels. See
        <tp:member-ref>HoldHandles</tp:member-ref> for notes.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The handle type is invalid
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            One of the given handles is not valid
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestChannel">
      <tp:deprecated version="0.17.23">Use
        <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.CreateChannel</tp:dbus-ref>
        or <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection.Interface">Requests.EnsureChannel</tp:dbus-ref>
        instead. Connection managers MAY implement RequestChannel by
        raising NotImplemented, or implement fewer types of channel via
        this API.</tp:deprecated>

      <arg direction="in" name="Type" type="s">
        <tp:docstring>
          A D-Bus interface name representing base channel type
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handle_Type" type="u">
        <tp:docstring>
          An integer representing the handle type, or Handle_Type_None if
          no handle is specified
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handle" type="u">
        <tp:docstring>
          A nonzero integer handle representing a contact, room, list etc.
          according to handle_type, or zero if the handle_type is
          Handle_Type_None
        </tp:docstring>
      </arg>

      <arg direction="in" name="Suppress_Handler" type="b">
        <tp:docstring>
          <p>Clients SHOULD always set this to true.</p>

          <tp:rationale>
            <p>The historical meaning was that clients that did not
              intend to take responsibility for displaying the channel to
              the user could set this to FALSE, in which case the channel
              dispatcher would launch an appropriate channel handler.</p>

            <p>However, clients whose functionality relies on having a
              working channel dispatcher should obtain that functionality by
              calling methods on the channel dispatcher, so that they will
              get an appropriate error if the channel dispatcher is missing
              or not working.</p>

            <p>The channel dispatcher itself should set this to true too,
              so that it will ignore the
              <tp:member-ref>NewChannel</tp:member-ref> signal that results
              from the creation of the channel. It can then dispatch the
              channel returned from this method to an
              appropriate handler.</p>

            <p>So, there is no sensible use-case for setting this to false,
              and setting it to false can result in unhandled channels (in
              the case where clients assume that a channel dispatcher is
              present, but it isn't).</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" type="o" name="Object_Path">
        <tp:docstring>
          The D-Bus object path for the channel created or retrieved
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request a channel satisfying the specified type and communicating
          with the contact, room, list etc. indicated by the given
          handle_type and handle. The handle_type and handle may both be
          zero to request the creation of a new, empty channel, which may
          or may not be possible, depending on the protocol and channel
          type.</p>

        <p>On success, the returned channel will always be of the requested
          type (i.e. implement the requested channel-type interface).</p>

        <p>If a new, empty channel is requested, on success the returned
          channel will always be an "anonymous" channel for which the type
          and handle are both zero.</p>

        <p>If a channel to a contact, room etc. is requested, on success, the
          returned channel may either be a new or existing channel to
          the requested entity (i.e. its
          <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">TargetHandleType</tp:dbus-ref>
          and <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">TargetHandle</tp:dbus-ref>
          properties are the
          requested handle type and handle), or a newly created "anonymous"
          channel associated with the requested handle in some
          implementation-specific way.</p>

        <p>For example, for a contact handle, the returned channel
          might be "anonymous", but implement the groups interface and have
          the requested contact already present among the members.</p>

        <p>If the request cannot be satisfied, an error is raised and no
          channel is created.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            Unknown channel type
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The given handle does not exist or cannot be created
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested channel type cannot be created with the given handle
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because contact doesn't
            have the required capabilities.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
      </tp:possible-errors>
    </method>

    <tp:enum name="Handle_Type" type="u">
      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>
          A "null" handle type used to indicate the absence of a handle.
          When a handle type and a handle appear as a pair, if the handle
          type is zero, the handle must also be zero.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Contact" value="1">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Room" value="2">
        <tp:docstring>
          A chat room
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="List" value="3">
        <tp:docstring>
          A server-generated contact list (see Channel.Interface.Group)
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Group" value="4">
        <tp:docstring>
          A user-defined contact list (see Channel.Interface.Group)
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:simple-type name="Handle" type="u" array-name="Handle_List">
      <tp:docstring>An unsigned 32-bit integer representing a
        handle</tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Contact_Handle" type="u"
      array-name="Contact_Handle_List">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Contact</tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Room_Handle" type="u"
      array-name="Room_Handle_List">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Room</tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="List_Handle" type="u"
      array-name="List_Handle_List">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_List</tp:docstring>
    </tp:simple-type>

    <tp:simple-type name="Group_Handle" type="u"
      array-name="Group_Handle_List">
      <tp:docstring>An unsigned 32-bit integer representing a handle of type
        Handle_Type_Group</tp:docstring>
    </tp:simple-type>

    <method name="RequestHandles">
      <tp:changed version="0.21.6">If
        <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
        this method no longer has its reference-counting effect.</tp:changed>
      <arg direction="in" name="Handle_Type" type="u">
        <tp:docstring>
          The type of handle required
        </tp:docstring>
      </arg>

      <arg direction="in" name="Identifiers" type="as">
        <tp:docstring>
          An array of identifiers of entities to request handles for
        </tp:docstring>
      </arg>

      <arg direction="out" type="au"
        name="Handles">
        <tp:docstring>
          An array of integer handle numbers in the same order as the given identifiers.
        </tp:docstring>
      </arg>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request several handles from the connection manager which represent a
          number of contacts, rooms or server-stored lists on the service.</p>

        <p>If <tp:member-ref>HasImmortalHandles</tp:member-ref> is true,
          which SHOULD always be the case in this version of telepathy-spec,
          the handles remain valid until the connection disconnects.</p>

        <p>The implementation of this method in older connection managers
        must record that these handles are in use by the
        client who invokes this method, and must not deallocate the handles
        until the client disconnects from the bus or calls the
        <tp:member-ref>ReleaseHandles</tp:member-ref>
        method. Where the identifier refers to an entity that already has a
        handle in this connection manager, this handle should be returned
        instead. The handle number 0 must not be returned by the connection
        manager.</p>
      </tp:docstring>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The given identifier does not identify a valid entity of the given
            type.

            <tp:rationale>
              For instance, an XMPP connection would raise this error for
              identifiers with type Handle_Type_Room that do not contain
              exactly one '@' character, that contain spaces, and so on.
            </tp:rationale>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The given handle type is not valid, or is not implemented on this
            connection.

            <tp:rationale>
              For instance, a connection to a protocol that doesn't have
              chat rooms would raise this error for room handles, and all CMs
              would raise this error for Handle_Type_None.
            </tp:rationale>
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:enum name="Connection_Status" plural="Connection_Statuses" type="u">
      <tp:enumvalue suffix="Connected" value="0">
        <tp:docstring>
          The connection is fully connected and all methods are available.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Connecting" value="1">
        <tp:docstring>
          <tp:member-ref>Connect</tp:member-ref> has been called but the
          connection has not yet been established. Some methods may fail
          until the connection has been established.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Disconnected" value="2">
        <tp:docstring>
          If this is retrieved from <tp:member-ref>GetStatus</tp:member-ref> or
          <tp:member-ref>Status</tp:member-ref>, it indicates that connection
          has not yet been attempted. If seen in a
          <tp:member-ref>StatusChanged</tp:member-ref> signal, it indicates
          that the connection has failed; the Connection object SHOULD be
          removed from D-Bus immediately, and all subsequent method calls
          SHOULD fail.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Connection_Status_Reason" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A reason why the status of the connection changed. Apart from
          Requested, the values of this enumeration only make sense as
          reasons why the status changed to Disconnected.</p>
      </tp:docstring>

      <tp:enumvalue suffix="None_Specified" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There is no reason set for this state change. Unknown status
            reasons SHOULD be treated like this reason.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.<tp:error-ref>Disconnected</tp:error-ref></code>.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Requested" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is in response to a user request. Changes to the
            Connecting or Connected status SHOULD always indicate this reason;
            changes to the Disconnected status SHOULD indicate this reason
            if and only if the disconnection was requested by the user.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cancelled</code>.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Network_Error" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was an error sending or receiving on the network socket.</p>

          <p>When the status changes from Connecting to Disconnected for this
            reason, the equivalent D-Bus error is either
            <code>org.freedesktop.Telepathy.Error.NetworkError</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionRefused</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionFailed</code>
            or some more specific error.</p>

          <p>When the status changes from Connected to Disconnected for this
            reason, the equivalent D-Bus error is either
            <code>org.freedesktop.Telepathy.Error.NetworkError</code>,
            <code>org.freedesktop.Telepathy.Error.ConnectionLost</code>
            or some more specific error.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Authentication_Failed" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The username or password was invalid.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.AuthenticationFailed</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Encryption_Error" value="4">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was an error negotiating SSL on this connection, or
            encryption was unavailable and require-encryption was set when the
            connection was created.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.EncryptionNotAvailable</code>
            if encryption was not available at all, or
            <code>org.freedesktop.Telepathy.Error.EncryptionError</code>
            if encryption failed.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Name_In_Use" value="5">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>In general, this reason indicates that the requested account
            name or other identification could not be used due to conflict
            with another connection. It can be divided into three cases:</p>

          <ul>
            <li>If the status change is from Connecting to Disconnected
              and the 'register' parameter to RequestConnection was present
              and true, the requested account could not be created on the
              server because it already exists.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.RegistrationExists</code>.
            </li>

            <li>If the status change is from Connecting to Disconnected
              but the 'register' parameter is absent or false, the connection
              manager could not connect to the specified account because
              a connection to that account already exists.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.AlreadyConnected</code>.

              <tp:rationale>
                In some protocols, like XMPP (when connecting with the same
                JID and resource as an existing connection), the existing
                connection "wins" and the new one fails to connect.
              </tp:rationale>
            </li>

            <li>If the status change is from Connected to Disconnected,
              the existing connection was automatically disconnected because
              a new connection to the same account (perhaps from a different
              client or location) was established.
              The equivalent D-Bus error is
              <code>org.freedesktop.Telepathy.Error.ConnectionReplaced</code>.

              <tp:rationale>
                In some protocols, like MSNP (when connecting twice with the
                same Passport), the new connection "wins" and the
                existing one is automatically disconnected.
              </tp:rationale>
            </li>
          </ul>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Not_Provided" value="6">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server did not provide a SSL certificate.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.NotProvided</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Untrusted" value="7">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is signed by an untrusted certifying
            authority. This error SHOULD NOT be used to represent a self-signed
            certificate: use the more specific Cert_Self_Signed reason for
            that.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Untrusted</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Expired" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate has expired.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Expired</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Not_Activated" value="9">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is not yet valid.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.NotActivated</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Hostname_Mismatch" value="10">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate did not match its hostname.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.HostnameMismatch</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Fingerprint_Mismatch" value="11">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate does not have the expected
            fingerprint.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.FingerprintMismatch</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Self_Signed" value="12">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate is self-signed.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.SelfSigned</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Other_Error" value="13">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>There was some other error validating the server's SSL
            certificate.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Invalid</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Revoked" value="14">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate has been revoked.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Revoked</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Insecure" value="15">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The server's SSL certificate uses an insecure algorithm,
	  or is cryptographically weak.</p>

          <p>When disconnected for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cert.Insecure</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Cert_Limit_Exceeded" value="16">
	<tp:docstring xmlns="http://www.w3.org/1999/xhtml">
	  <p>The length in bytes of the server certificate, or the depth of the
	  sever certificate chain exceed the limits imposed by the crypto
	  library.</p>

	  <p>When disconnected for this reason, the equivalent D-Bus error is
	    <code>org.freedesktop.Telepathy.Error.Cert.LimitExceeded</code>
	  </p>
	</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="ConnectionError">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when an error occurs that renders this connection unusable.
        </p>

        <p>Whenever this signal is emitted, it MUST immediately be followed by
          a <tp:member-ref>StatusChanged</tp:member-ref> signal with status
          Connection_Status_Disconnected and an appropriate reason
          code.</p>

        <p>Connection managers SHOULD emit this signal on disconnection, but
          need not do so. Clients MUST support connection managers that emit
          StatusChanged(Disconnected, ...) without first emitting
          ConnectionError.</p>

        <tp:rationale>
          <p>This signal provides additional information about the reason
            for disconnection. The reason for connection is always
            straightforward - it was requested - so it does not need further
            explanation. However, on errors, it can be useful to provide
            additional information.</p>

          <p>The <tp:type>Connection_Status_Reason</tp:type> is not given
            here, since it will be signalled in
            <tp:member-ref>StatusChanged</tp:member-ref>. A reasonable client
            implementation would be to store the information given by this
            signal until StatusChanged is received, at which point the
            information given by this signal can be used to supplement the
            StatusChanged signal.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Error" type="s">
        <tp:docstring>
          The name of a D-Bus error describing the error that occurred,
          which may correspond to a
          <tp:type>Connection_Status_Reason</tp:type>, or may be a more
          specific Telepathy error
          (such as
          <code>org.freedesktop.Telepathy.Error.ConnectionRefused</code>
          for Connection_Status_Reason_Network_Error)
          or a protocol-specific or connection-manager-specific error in a
          suitable namespace.

          <tp:rationale>
            For instance, a SIP connection manager could signal
            "402 Payment Required" as an error in a
            connection-manager-specific namespace, or a link-local
            XMPP implementation that used Avahi could provide the error
            given to it by the avahi-daemon.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg name="Details" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about the error, which may include
            the following well-known keys:</p>

          <dl>
            <dt>debug-message (s)</dt>
            <dd>Debugging information on the change, corresponding to the
              message part of a D-Bus error message, which SHOULD NOT be
              displayed to users under normal circumstances</dd>

            <dt>server-message (s)</dt>
            <dd>A human-readable message from the server explaining what
              happened. This may be in the user's native language, or in the
              server operator's native language, or even in Lojban.</dd>

	    <dt>user-requested (b), expected-hostname (s), certificate-hostname (s)</dt>
	    <dd>The same details defined in <tp:type>TLS_Certificate_Rejection</tp:type>.</dd>
          </dl>

        </tp:docstring>
      </arg>

    </signal>

    <signal name="StatusChanged">
      <arg name="Status" type="u">
        <tp:docstring>
          An integer indicating the new status, as defined by ConnectionStatus
        </tp:docstring>
      </arg>

      <arg name="Reason" type="u">
        <tp:docstring>
          An integer indicating the reason for the status change, as defined
          by ConnectionStatusReason
        </tp:docstring>
      </arg>

      <tp:docstring>
        Emitted when the status of the connection changes.  All states and
        reasons have numerical values, as defined in ConnectionStatus
        and ConnectionStatusReason.
      </tp:docstring>
    </signal>

    <tp:contact-attribute name="contact-id" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>InspectHandles</tp:member-ref>. As a special case,
          this is always present in the result of <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Contacts">GetContactAttributes</tp:dbus-ref>,
          whether it was explicitly requested or not.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <method name="AddClientInterest">
      <tp:added version="0.21.3"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Register a client's interest in notifications related to one or
          more interfaces.</p>

        <p>Groups of notifications are identified by a token which is either
          a D-Bus interface name, or a string that starts with a D-Bus
          interface name. The meaning of each token is given by that D-Bus
          interface, which MUST define it in its documentation.</p>

        <tp:rationale>
          <p>Initially, all interests are in entire interface, but allowing
            other strings allows subscription to part of an interface; for
            instance, an interest in ...MailNotification/count could track
            the number of messages without caring about their detailed
            content.</p>
        </tp:rationale>

        <p>For each token with which this method interacts, the
          Connection tracks an "interest count" (like a reference count) for
          each unique bus name that has called this method. When a client
          calls this method, for each token, the interest count for its
          unique bus name is incremented; when
          <tp:member-ref>RemoveClientInterest</tp:member-ref> is called,
          all interest counts for that unique bus name are decremented.
          If the unique bus name leaves the bus (for instance, if the
          client crashes or exits), all interest counts for that unique bus
          name are set to zero.</p>

        <p>The Connection can then use these reference counts to
          avoid subscribing to protocol-level notifications unless at least
          one client has a non-zero interest count for the relevant
          token.</p>

        <tp:rationale>
          <p>This method exists to reduce memory and network overhead when
            there is no active subscription.</p>

          <p>One situation where this is useful is <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface"
              >Location</tp:dbus-ref>: on XMPP, location updates are received
            over PEP. If the Connection advertises the
            <code>geoloc+notify</code> capability, it will be sent location
            updates for all contacts. To avoid consuming resources for this,
            the connection should avoid advertising that capability until
            a client has expressed an interest in contacts' locations.</p>

          <p>Another example of a protocol that benefits from this method is
            the Google XMPP Mail Notification extension, which can be used
            to implement <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface"
              >MailNotification</tp:dbus-ref>. In this protocol, the CM
            receives a notification that something has changed, but to get
            more information, the CM must request this information. Knowing
            that nobody is currently interested in this information, the CM
            can avoid generating useless network traffic. Similarly, the CM
            may free the list of unread messages to reduce memory overhead.</p>
        </tp:rationale>

        <p>If this method is called for an interface that might require
          protocol-level subscription, but the connection cannot set up
          that subscription yet (for instance because the
          <tp:member-ref>Status</tp:member-ref> is not Connected yet), the
          Connection MUST remember the client's interest, and attempt to
          subscribe to the appropriate protocol feature when this becomes
          possible.</p>

        <p>Clients MAY ignore any errors raised by this method; it is intended
          to be called with the reply ignored.</p>

        <tp:rationale>
          <p>The only reason it could fail is if it's unimplemented, in which
            case the only thing the client can usefully do is to proceed as if
            it had succeeded.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Tokens" type="as" direction="in">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Interfaces or parts of interfaces in which to register an
            interest, represented by either a
            <tp:type>DBus_Interface</tp:type>, or a string prefixed with a
            <tp:type>DBus_Interface</tp:type>.</p>

          <p>If the Connection does not support one of these tokens, this
            is not considered to be an error; the unsupported token is
            simply ignored.</p>
        </tp:docstring>
      </arg>
    </method>

    <method name="RemoveClientInterest">
      <tp:added version="0.21.3"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Release an interest registered using
          <tp:member-ref>AddClientInterest</tp:member-ref>. See that
          method's documentation for details.</p>

        <p>Clients MAY ignore any errors raised by this method; it is intended
          to be called with the reply ignored.</p>

        <tp:rationale>
          <p>The only reasons it could fail are if it's unimplemented, or if
            the client's reference-counting is wrong and it has tried to
            remove a client interest that it did not add. In both cases,
            there's nothing the client could do about it.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Tokens" type="as" direction="in">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Interfaces or parts of interfaces that were previously passed to
            <tp:member-ref>AddClientInterest</tp:member-ref>.</p>
        </tp:docstring>
      </arg>
    </method>

    <property name="HasImmortalHandles"
      access="read" type="b">
      <tp:added version="0.21.6"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>True if handles last for the whole lifetime of the Connection.
          This SHOULD be the case in all connection managers, but clients
          MUST interoperate with older connection managers
          (which reference-count handles).</p>
      </tp:docstring>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This models a connection to a single user account on a communication
        service. Its basic capability is to provide the facility to request and
        receive channels of differing types (such as text channels or streaming
        media channels) which are used to carry out further communication.</p>

      <p>In order to allow Connection objects to be discovered by new clients,
        the object path and well-known bus name MUST be of the form
        <code>/org/freedesktop/Telepathy/Connection/cmname/proto/account</code>
        and
        <code>org.freedesktop.Telepathy.Connection.cmname.proto.account</code>
        where:</p>

      <ul>
        <li><em>cmname</em> is the same
          <tp:type>Connection_Manager_Name</tp:type> that appears
          in the connection manager's object path and well-known bus name</li>
        <li><em>proto</em> is the <tp:type>Protocol</tp:type> name as seen in
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.ConnectionManager">ListProtocols</tp:dbus-ref>,
          but with "-" replaced with "_" to get a valid
          object path/bus name</li>
        <li><em>account</em> is some non-empty sequence of ASCII letters,
          digits and underscores not starting with a digit</li>
      </ul>

      <p><em>account</em> SHOULD be formed such that any valid distinct
        connection instance on this protocol has a distinct name. This
        might be formed by including the server name followed by the user
        name (escaped via some suitable mechanism like telepathy-glib's
        tp_escape_as_identifier() function to preserve uniqueness); on
        protocols where connecting multiple times is permissable, a
        per-connection identifier might be necessary to ensure
        uniqueness.</p>

      <p>Clients MAY parse the object path to determine the connection
        manager name and the protocol, but MUST NOT attempt to parse the
        <em>account</em> part. Connection managers MAY use any unique string
        for this part.</p>

    <p>As well as the methods and signatures below, arbitrary interfaces may be
    provided by the Connection object to represent extra connection-wide
    functionality, such as the Connection.Interface.SimplePresence for
    receiving and
    reporting presence information, and Connection.Interface.Aliasing for
    connections where contacts may set and change an alias for themselves.
    These interfaces can be discovered using the
    <tp:member-ref>GetInterfaces</tp:member-ref> method.</p>

    <p>Contacts, rooms, and server-stored lists (such as subscribed contacts,
    block lists, or allow lists) on a service are all represented by
    immutable <em>handles</em>, which are unsigned non-zero integers which are
    valid only for the lifetime of the connection object, and are used
    throughout the protocol where these entities are represented, allowing
    simple testing of equality within clients.</p>

    <p>Zero as a handle value is sometimes used as a "null" value to mean
    the absence of a contact, room, etc.</p>

    <p>Handles have per-type uniqueness, meaning that
    every (handle type, handle number) tuple is guaranteed to be unique within
    a connection and that a handle alone (without its type) is meaningless or
    ambiguous. Connection manager implementations should reference count these
    handles to determine if they are in use either by any active clients or any
    open channels, and may deallocate them when this ceases to be true. Clients
    may request handles of a given type and identifier with the
    <tp:member-ref>RequestHandles</tp:member-ref> method, inspect the entity
    identifier with the <tp:member-ref>InspectHandles</tp:member-ref>
    method, keep handles from being released with
    <tp:member-ref>HoldHandles</tp:member-ref>, and notify that they are no
    longer storing handles with
    <tp:member-ref>ReleaseHandles</tp:member-ref>.</p>
    </tp:docstring>

    <tp:changed version="0.17.10">Previously, the account part of
      Connection bus names/object paths was allowed to have more than one
      component (i.e. contain dots or slashes), resulting in Connection
      bus names and object paths with more than 7 components. We now restrict
      Connection bus names/object paths to have exactly 7
      components.</tp:changed>

    <tp:changed version="0.17.23">The Requests and Contacts interfaces
      are now mandatory. Their functionality will be merged into the main
      Connection interface at some point in future.</tp:changed>

  </interface>


  <!-- Connection_Interface_Contacts.xml -->
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or modify it
      under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation; either version 2.1 of the License, or (at
      your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
      General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public License
      along with this library; if not, write to the Free Software Foundation,
      Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Contacts">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.9"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface allows many attributes of many contacts to be
        obtained in a single D-Bus round trip.</p>

      <p>Each contact attribute has an string identifier
        (<tp:type>Contact_Attribute</tp:type>), which is namespaced
        by the D-Bus interface which defines it.</p>
    </tp:docstring>

    <tp:simple-type name="Contact_Attribute" type="s">
      <tp:docstring>
        A <tp:type>DBus_Interface</tp:type>, followed by a slash '/' character
        and an identifier for an attribute defined by that interface. The
        attribute identifier SHOULD be in lower case.

        <tp:rationale>
          These aren't D-Bus core Properties, and we want them to look visibly
          different.
        </tp:rationale>
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Single_Contact_Attributes_Map">
      <tp:docstring>
        Some of the attributes of a single contact.
      </tp:docstring>

      <tp:member type="s" name="Attribute">
        <tp:docstring>
          The name of the attribute
        </tp:docstring>
      </tp:member>

      <tp:member type="v" name="Value">
        <tp:docstring>
          The value of the attribute
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:mapping name="Contact_Attributes_Map">
      <tp:docstring>Mapping returned by
        <tp:member-ref>GetContactAttributes</tp:member-ref>, representing a
        collection of Contacts and their requested attributes.</tp:docstring>

      <tp:member type="u" name="Contact">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:member>

      <tp:member type="a{sv}"
        name="Attributes">
        <tp:docstring>
          Attributes of that contact
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property name="ContactAttributeInterfaces" access="read" type="as">
      <tp:docstring>
        A list of D-Bus interfaces for which
        <tp:member-ref>GetContactAttributes</tp:member-ref> is expected to work.
        This cannot change during the lifetime of the Connection.
      </tp:docstring>
    </property>

    <method name="GetContactAttributes">
      <tp:docstring>
        Return any number of contact attributes for the given handles.
      </tp:docstring>

      <arg direction="in" name="Handles" type="au">
        <tp:docstring>
          An array of handles representing contacts.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Interfaces" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A list of strings indicating which D-Bus interfaces the calling
            process is interested in. All supported attributes from these
            interfaces, whose values can be obtained without additional network
            activity, will be in the reply.</p>

          <p>Connection managers SHOULD ignore interfaces requested which they
            do not support (i.e. those not mentioned in the
            <tp:member-ref>ContactAttributeInterfaces</tp:member-ref>
            property.)</p>

          <tp:rationale>
            <p>This simplifies client-side code. Clients which care may
              distinguish between unsupported interfaces (e.g. this Connection
              does not support Avatars), and interfaces on which no information
              is known for these contacts (e.g. we don't know the avatar tokens
              of any of the contacts, so we omitted them all) by inspecting
              <tp:member-ref>ContactAttributeInterfaces</tp:member-ref>.</p>
          </tp:rationale>

          <p>Attributes from the interface
            <tp:dbus-ref>org.freedesktop.Telepathy.Connection</tp:dbus-ref>
            are always returned, and need not be requested explicitly.</p>

          <p>As well as returning cached information immediately, the
            connection MAY start asynchronous requests to obtain better
            values for the contact attributes. If better values are later
            obtained by this process, they will be indicated with the usual
            signals (such as <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing">AliasesChanged</tp:dbus-ref>).</p>

          <tp:rationale>
            For instance, an XMPP connection manager could download vCards
            in response to a request for <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface">Aliasing</tp:dbus-ref>
            attributes.
          </tp:rationale>
        </tp:docstring>
        <tp:changed version="0.19.2">
          requesting information for interfaces not mentioned in
          <tp:member-ref>ContactAttributeInterfaces</tp:member-ref> is no
          longer an error. Be aware that older connection managers may still
          consider this an error.
        </tp:changed>
      </arg>

      <arg direction="in" name="Hold" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, all handles that appear as keys in the result have been
            held on behalf of the calling process, as if by a call to
            <tp:dbus-ref namespace="ofdT">Connection.HoldHandles</tp:dbus-ref>.
            (If <tp:dbus-ref namespace="ofdT.Connection"
              >HasImmortalHandles</tp:dbus-ref> is true, which SHOULD be the
            case in all new connection managers, this has no effect.)</p>

          <tp:rationale>
            <p>For further round-trip avoidance.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="out" type="a{ua{sv}}" name="Attributes">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary mapping the contact handles to contact attributes.
            If any of the requested handles are in fact invalid, they are
            simply omitted from this mapping. If contact attributes are not
            immediately known, the behaviour is defined by the interface;
            the attribute should either be omitted from the result or
            replaced with a default value.</p>

          <p>Each contact's attributes will always include at least the
            identifier that would be obtained by inspecting the handle
            (<code>org.freedesktop.Telepathy.Connection/contact-id</code>).</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>
  </interface>

  <!-- Account_Manager.xml -->
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.AccountManager">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>The account manager is a central service used to store account
        details.</p>

      <p>The current account manager is defined to be the process that owns
        the well-known bus name <tt>org.freedesktop.Telepathy.AccountManager</tt> on
        the session bus. This process must export an
        <tt>/org/freedesktop/Telepathy/AccountManager</tt> object with the
        AccountManager interface.</p>
    </tp:docstring>
    <tp:added version="0.17.2"/>

    <!-- Missing functionality compared with NMC 4.x:
    * look up accounts by conditions (can be done client-side, less
      efficiently, so not a blocker)
    * global presence/... changes (can be done client-side, less efficiently -
      we should add this)
    * count used channels (what's this for?)
    * get "average" status (not well-defined, UIs can do this)
    * request channels (out of scope: Channel Dispatcher will do this)
    * register filters (completely out of scope: Channel Dispatcher again)
    -->

    <property name="Interfaces"
      type="as" access="read">
      <tp:docstring>
        A list of the interfaces provided by the account manager object.
      </tp:docstring>
    </property>

    <property name="ValidAccounts" type="ao" access="read">
      <tp:docstring>
        A list of the valid (complete, usable) <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>s. Change
        notification is via
        <tp:member-ref>AccountValidityChanged</tp:member-ref>.

        <tp:rationale>
          This split between valid and invalid accounts makes it easy to
          ignore the invalid ones. The only things that should be manipulating
          invalid accounts are account-editing UIs, which might be able to
          rescue them.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="InvalidAccounts" type="ao" access="read">
      <tp:docstring>
        A list of incomplete or otherwise unusable <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>s. Change
        notification is via
        <tp:member-ref>AccountValidityChanged</tp:member-ref>.
      </tp:docstring>
    </property>

    <signal name="AccountRemoved">
      <tp:docstring>
        The given account has been removed.

        <tp:rationale>
          This is effectively change notification for the valid and invalid
          accounts lists. On emission of this signal, the Account indicated
          will no longer be present in either of the lists.
        </tp:rationale>
      </tp:docstring>

      <arg name="Account" type="o">
        <tp:docstring>
          An Account, which must not be used any more.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="AccountValidityChanged">
      <tp:docstring>
        The validity of the given account has changed. New accounts are
        also indicated by this signal, as an account validity change
        (usually to True) on an account that did not previously exist.

        <tp:rationale>
          This is effectively change notification for the valid and invalid
          accounts lists.
        </tp:rationale>
      </tp:docstring>

      <arg name="Account" type="o">
        <tp:docstring>
          An <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>.
        </tp:docstring>
      </arg>

      <arg name="Valid" type="b">
        <tp:docstring>
          True if the account is now valid.
        </tp:docstring>
      </arg>
    </signal>

    <property name="SupportedAccountProperties"
      type="as" access="read">
      <tp:added version="0.17.24"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the fully qualified names of properties that can be set
          via the Properties argument to
          <tp:member-ref>CreateAccount</tp:member-ref> when an account is
          created.</p>

        <tp:rationale>
          <p>Examples of good properties to support here include
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Icon</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Enabled</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Nickname</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">AutomaticPresence</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">ConnectAutomatically</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">RequestedPresence</tp:dbus-ref>
            and
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account.Interface.Avatar">Avatar</tp:dbus-ref>.
            </p>

          <p>Examples of properties that would make no sense here include
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Valid</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Connection</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">ConnectionStatus</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">ConnectionStatusReason</tp:dbus-ref>,
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">CurrentPresence</tp:dbus-ref>
            and
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">NormalizedName</tp:dbus-ref>.
          </p>
        </tp:rationale>

        <p>This property MUST NOT include include the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
          and <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Account">Parameters</tp:dbus-ref>
          properties, which are set using separate arguments.</p>

        <p>This property MAY include the names of properties that, after
          account creation, will be read-only: this indicates that the property
          can be set at account creation but not changed later.</p>

        <tp:rationale>
          <p>For example, an account manager might support migration tools that
            use this to preserve the <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">HasBeenOnline</tp:dbus-ref>
            property, even though that property is usually read-only.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="CreateAccount">
      <tp:docstring>
        Request the creation of a new <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>. The
        account manager SHOULD NOT allow invalid accounts to be created.
      </tp:docstring>
      <tp:changed version="0.17.24">added the Properties argument</tp:changed>

      <arg name="Connection_Manager" direction="in" type="s">
        <tp:docstring>
          The name of the connection manager, e.g. "salut".
        </tp:docstring>
      </arg>

      <arg name="Protocol" direction="in" type="s">
        <tp:docstring>The protocol, e.g. "local-xmpp".</tp:docstring>
      </arg>

      <arg name="Display_Name" direction="in" type="s">
        <tp:docstring>The initial value of the new account's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
          property. The account manager SHOULD modify this to make it unique if
          an Account already exists with the same display name, for instance by
          appending a number or the 'account' parameter. Account manager
          implementations SHOULD accept an empty string, but account editing
          user interfaces should avoid passing an empty string for this
          parameter.

          <tp:rationale>
            <p>The account creation UI may ask the user for a name for the new
              account. If the author of the UI chooses not to do this, the
              account creation UI is better able to suggest a default display
              name because it has protocol-specific knowledge which the account
              manager does not.</p>

            <p>The account manager always knows the complete list of accounts so
              it can easily tell whether it should append something to the
              display name to avoid presenting two identically-named accounts to
              the user.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg name="Parameters" direction="in" type="a{sv}">
        <tp:docstring>Initial parameter values, as would be passed to
          <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.ConnectionManager">RequestConnection</tp:dbus-ref>.</tp:docstring>
      </arg>

      <arg name="Properties" direction="in" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The values of any other properties to be set immediately on the
            new Account.</p>

          <p>Only the properties mentioned in
            <tp:member-ref>SupportedAccountProperties</tp:member-ref> are
            acceptable here. In particular, the <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">DisplayName</tp:dbus-ref>
            and <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Account">Parameters</tp:dbus-ref>
            properties are never allowed here, since they are set using the other
            arguments to this method.</p>

          <p>Account manager implementations SHOULD support creating accounts
            with an empty value for this argument.</p>
        </tp:docstring>
      </arg>

      <arg name="Account" direction="out" type="o">
        <tp:docstring>The new <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>.</tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The <var>Connection_Manager</var> is not installed or does not
              implement the given <var>Protocol</var>.</p>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The <var>Parameters</var> provided were unacceptable: they might
              omit a
              <tp:value-ref type='Conn_Mgr_Param_Flags'>Required</tp:value-ref>
              parameter, include an unsupported parameter, or have a value of
              the wrong type.</p>
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

  </interface>


  <!-- Account.xml -->
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
<p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Account">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An Account object encapsulates the necessary details to make a
        Telepathy connection.</p>

      <p>Accounts are uniquely identified by object path. The object path
        of an Account MUST take the form
        <code>/org/freedesktop/Telepathy/Account/<em>cm</em>/<em>proto</em>/<em>acct</em></code>, where:</p>

      <ul>
        <li><em>cm</em> is the same <tp:type>Connection_Manager_Name</tp:type>
          that appears in the connection manager's well-known bus name and
          object path</li>
        <li><em>proto</em> is the <tp:type>Protocol</tp:type> name as seen in
          <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">ConnectionManager.ListProtocols</tp:dbus-ref>,
          but with "-" replaced with "_"
          (i.e. the same as in the object-path of a <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>)</li>
        <li><em>acct</em> is an arbitrary string of ASCII letters, digits
          and underscores, starting with a letter or underscore, which
          uniquely identifies this account</li>
        <li>Clients SHOULD parse the object path to discover the
          connection manager and protocol</li>
        <li>Clients MUST NOT attempt to parse <em>acct</em></li>
        <li>Clients MUST NOT assume that <em>acct</em> matches
          the connection-specific part of a Connection's object-path and
          bus name</li>
        <li>The account manager SHOULD choose <em>acct</em> such that if
          an account is deleted, its object path will be re-used if and only
          if the new account is in some sense "the same"
          (incorporating the 'account' parameter in some way is
          recommended)</li>
      </ul>

      <tp:rationale>
        <p>This API avoids specifying the "profiles" used in Mission Control
          4.x or the "presets" that have been proposed to replace them. An
          optional interface will be provided for AM implementations
          that want to provide presets.</p>

        <p>There is deliberately no functionality here for opening channels;
          we intend to provide that in the channel dispatcher.</p>

        <p>Other missing features which would be better in their own
          interfaces:</p>

        <ul>
          <li>dynamic parameter-providing (aka provisioning)</li>
          <li>saved server capabilities</li>
          <li>account conditions</li>
          <li>account grouping</li>
        </ul>
      </tp:rationale>

    </tp:docstring>
    <tp:added version="0.17.2"/>
    <tp:changed version="0.17.6">moved the Avatar property to a separate
      interface</tp:changed>

    <!-- Missing functionality compared with NMC 4.x account + profile,
    apart from as listed above:

    * vCard field, + default profile for each vCard field
      (vCard field is per protocol and should be chosen by the
      Telepathy <-> address-book bridge?; default profile is now
      meaningless)

    * "normalized name" (normalized handle?)

    * branding icon (what's this and how does it differ from the icon?)

    * configuration UI (not our problem - perhaps the UI could special-case
      by cm,protocol,preset tuples?)

    * default account domain (somewhat meaningless in general; specialized
      account config UI can hard-code this)

    * SPLIT_ACCOUNT (pseudo-capability - this is a property of the protocol,
      not the profile, and in any case only the account config UI cares)

    Missing functionality compared with Decibel accounts:

    * we don't really know, they take arbitrary key/value pairs...
      but display name, protocol, presence/message, current, autoreconnect
      are the ones given special status by the source, and we have all of them
    -->

    <property name="Interfaces"
      type="as" access="read">
      <tp:docstring>
        A list of the extra interfaces provided by this account.
      </tp:docstring>
    </property>

    <method name="Remove">
      <tp:docstring>Delete the account.</tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <signal name="Removed">
      <tp:docstring>
        This account has been removed.

        <tp:rationale>
          This is redundant with <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.AccountManager">AccountRemoved</tp:dbus-ref>,
          but it's still worth having,
          to avoid having to bind to AccountManager.AccountRemoved to tell
          you whether your Account is valid — ideally, an account-editing UI
          should only care about a single Account.
        </tp:rationale>
      </tp:docstring>
    </signal>

    <signal name="AccountPropertyChanged">
      <tp:docstring>
        The values of one or more properties on this interface (that do not
        specify that this signal does not apply to them) may have changed.
        This does not cover properties of other interfaces, which must
        provide their own change notification if appropriate.
      </tp:docstring>

      <arg name="Properties" type="a{sv}">
        <tp:docstring>
          A map from property names in this namespace (e.g.
          <tp:member-ref>Nickname</tp:member-ref>) to
          values. Properties whose values have not changed SHOULD be
          omitted, but this need not be done.
        </tp:docstring>
      </arg>
    </signal>

    <property name="DisplayName" type="s" access="readwrite">
      <tp:docstring>
        The user-visible name of this account. This SHOULD be chosen by the
        user at account creation time. The account creation user interface
        is responsible for setting a reasonable default value in the user's
        locale; something like "Jabber (bob@example.com)" would be sensible.
      </tp:docstring>
    </property>

    <property name="Icon"
      type="s" access="readwrite">
      <tp:docstring>
        The name of an icon in the system's icon theme, such as "im-msn",
        or the empty string to not specify an icon. If the icon is set to
        an empty string, the account manager or any client MAY derive a
        default icon, for instance from the protocol.
      </tp:docstring>
    </property>

    <property name="Valid"
      type="b" access="read">
      <tp:docstring>
        If true, this account is considered by the account manager to be
        complete and usable. If false, user action is required to make it
        usable, and it will never attempt to connect (for instance, this
        might be caused by the absence of a required parameter).

        <tp:rationale>
          For connection managers with a plugin architecture, like
          telepathy-haze, we have little or no control over the parameters
          offered; for platforms with package management, we have little or
          no control over the CMs offered. NMC 4.x would just pretend the
          account didn't exist in these circumstances, but silent data loss
          is bad, and UIs with CM-specific knowledge (or a user filling in
          newly-required parameters) might be able to rescue a broken account.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="Enabled"
      type="b" access="readwrite">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>This property gives the users the possibility to prevent an account
          from being used. This flag does not change the validity of the
          account.</p>

        <p>A disabled account can never be put online.</p>

        <tp:rationale>
          <p>Use cases:</p>

          <ul>
            <li>user has two or more accounts capable of calling contact X, but
              he doesn't want the UI to prompt him everytime about which one he
              wants to use for the call. He can then disable all the equivalent
              accounts but one.</li>

            <li>There is some temporary server error and the user doesn't want
              to be be bother by error messages, or change the account
              configuration: temporarily disabling the account is quicker.</li>
          </ul>
        </tp:rationale>

        <p>The AccountManager SHOULD allow this property to be set on invalid
          accounts, but MUST NOT attempt to put invalid accounts online
          even if they become Enabled.</p>

        <tp:rationale>
          <p>There doesn't seem to be any good reason not to allow this.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="Nickname"
      type="s" access="readwrite">
      <tp:docstring>
        The nickname to set on this account for display to other contacts,
        as set by the user. When the account becomes connected, the
        account manager SHOULD set this as the user's alias using <tp:dbus-ref
        namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing">SetAliases</tp:dbus-ref>
        if appropriate.

        <tp:rationale>
          In a later specification revision, we plan to separate the concepts
          of a contact's nickname as set by themselves, and the local
          name for them in our contact list (a "handle" or "pet name" as
          described in XEP-0165 and its references). The terminology change
          from alias to nickname here is a step in that direction.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="Service" type="s"
        access="readwrite">
      <tp:added version="0.19.8"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Some protocols, like XMPP and SIP, are used by various different
          user-recognised brands, such as <i>Google Talk</i> and <i>Ovi by
          Nokia</i>. On accounts for such services, this property SHOULD be
          set to a string describing the service, which MUST consist only of
          ASCII letters, numbers and hyphen/minus signs, and start with a
          letter (matching the requirements for <tp:type>Protocol</tp:type>).
          For the <tt>jabber</tt> protocol, one of the following service names
          should be used if possible:</p>

        <ul>
          <li><tt>google-talk</tt> (for <a
            href="http://www.google.com/talk/">Google's IM service</a>)</li>
          <li><tt>ovi-chat</tt> (for <a href="http://www.ovi.com/">Ovi</a>'s IM
            service)</li>
          <li><tt>facebook</tt> (for <a
            href="http://www.facebook.com/sitetour/chat.php">Facebook's IM
            service</a>)</li>
          <li><tt>lj-talk</tt> (for <a
            href="http://www.livejournal.com/chat/">LiveJournal's IM
            service</a>)</li>

        </ul>

        <p>The <tp:member-ref>Icon</tp:member-ref> property SHOULD be set to a
          corresponding brand-specific icon name, if possible. In the future,
          this property may be used as an index into additional
          service-specific customizations. If this property is the empty string
          (or missing), the service is determined by the protocol name (either
          because this is a single-service protocol like <tt>msn</tt>, or
          because this is just a generic <tt>jabber</tt> or <tt>sip</tt>
          account without specific branding).</p>

        <p>This property MAY be set, if appropriate, when calling
          <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.AccountManager"
            >CreateAccount</tp:dbus-ref>. Updating this property will fail on
          externally-stored accounts whose <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Account.Interface.Storage"
            >StorageRestrictions</tp:dbus-ref> include
          <code>Cannot_Set_Service</code>.</p>
      </tp:docstring>
    </property>

    <property name="Parameters"
      type="a{sv}" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A map from connection manager parameter names (as in the
          <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">ConnectionManager</tp:dbus-ref>
          interface) to their values. This property includes
          only those parameters that are stored for this account, and SHOULD
          only include those parameters that the user has explicitly set.
        </p>
        <p>This property cannot be altered using
          <code>org.freedesktop.DBus.Properties.Set()</code>; use
          <tp:member-ref>UpdateParameters</tp:member-ref> instead.</p>
      </tp:docstring>
    </property>

    <method name="UpdateParameters">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Change the value of the <tp:member-ref>Parameters</tp:member-ref>
          property.</p>

        <p>If any of the <var>Set</var> parameters’
          <tp:type>Conn_Mgr_Param_Flags</tp:type> include
          <code>DBus_Property</code>, the change will be applied immediately to
          the corresponding D-Bus Property on the active
          <tp:member-ref>Connection</tp:member-ref>, if there is one. If any of
          the <var>Unset</var> parameters’
          <tp:type>Conn_Mgr_Param_Flags</tp:type> include both
          <code>DBus_Property</code> and <code>Has_Default</code>, the
          corresponding D-Bus Property on the connection will be set to the
          default value.  Changes to other parameters will not take effect
          until the next time the account is disconnected and reconnected. (If
          parameters are explicitly set to their default value, or are unset
          when previously set to their default value, the account manager MAY
          decide that no reconnection is necessary to make the change take
          effect.)</p>

        <tp:rationale>
          <p>In general, reconnecting is a destructive operation that shouldn't
            happen as a side-effect. In particular, migration tools that
            twiddle the settings of all accounts shouldn't cause an automatic
            disconnect and reconnect.</p>
        </tp:rationale>
      </tp:docstring>

      <tp:changed version="0.17.16">
        parameters which are also D-Bus properties can and should be updated on
        existing Connections
      </tp:changed>

      <tp:changed version="0.17.24">
        return an array of the parameters that won't change until the account
        is reconnected
      </tp:changed>

      <arg name="Set" type="a{sv}" direction="in">
        <tp:docstring>
          A mapping from parameter names to their values. These parameters
          should be stored for future use.
        </tp:docstring>
      </arg>

      <arg name="Unset" type="as" direction="in">
        <tp:docstring>
          A list of the names of parameters to be removed from the set of
          stored values, allowing the default values to be used.
          If the given parameters were not, in fact, stored, or even if they
          do not exist at all, the account manager MUST accept this without
          error.
        </tp:docstring>
      </arg>

      <arg name="Reconnect_Required" type="as" direction="out">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If all of the updates could be applied to the active
            <tp:member-ref>Connection</tp:member-ref> (if any),
            the empty list, signifying that no reconnection is required for the
            new parameters to take effect. For example, if the only parameter
            updated is <tt>...Cellular.<tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface.Cellular">MessageValidityPeriod</tp:dbus-ref></tt>,
            the new value can be applied immediately to the connection.</p>

          <p>Otherwise, a list of the names of parameters with changes that
            will not take effect until the account is reconnected. User
            interfaces that require "instant apply" semantics MAY call
            <tp:member-ref>Reconnect</tp:member-ref> in response to receiving a
            non-empty list. For example, if the caller updates both
            <tt>...Anonymity.<tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface.Anonymity">AnonymityMandatory</tp:dbus-ref></tt>
            and <tt>require-encryption</tt>, the former can be applied to the
            current connection, but the latter needs a reconnect to take
            effect, so this method should return
            <code>["require-encryption"]</code>.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
      </tp:possible-errors>
    </method>

    <property name="AutomaticPresence" type="(uss)" access="readwrite">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The presence status that this account should have if it is brought
          online.</p>

        <tp:rationale>
          In ITOS2007 and ITOS2008 this is a global preference, not visible
          on D-Bus (the "default presence"). "Automatic presence" better
          describes when it is used.
        </tp:rationale>

        <p>Setting this property MUST NOT actually change the account's
          status until the next time it is (re)connected for some reason.</p>

        <p>The value of this property MUST be one that would be acceptable
          for <tp:member-ref>RequestedPresence</tp:member-ref>,
          with the additional restriction that the
          <tp:type>Connection_Presence_Type</tp:type> MUST NOT be Offline.</p>

        <tp:rationale>
          <p>Otherwise, it would not be possible to use this presence to bring
            the account online for a channel request.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ConnectAutomatically" type="b" access="readwrite">
      <tp:docstring>
        If true, the account manager SHOULD attempt to put this account
        online with the <tp:member-ref>AutomaticPresence</tp:member-ref>
        whenever possible (in the base
        Account interface this is deliberately left vague). If false,
        it MUST NOT put the account online automatically in response to,
        for instance, connectivity changes, but SHOULD still put the account
        online with the <tp:member-ref>AutomaticPresence</tp:member-ref> if
        requested by the user (for
        instance, if the user tries to start a conversation using this
        account).
      </tp:docstring>
    </property>

    <property name="Connection"
      type="o" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Either the object path of the <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref> to
        this account, or the special value <code>'/'</code> if there is no
        connection.</p>

        <p>If this object path is not '/', the Connection's well-known bus
          name can be derived from this object path by removing the first '/'
          and replacing subsequent '/' characters with '.'.</p>

        <tp:rationale>
          Object paths aren't nullable, so we can't use an empty string.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ConnectionStatus" type="u"
      access="read">
      <tp:docstring>
        If the <tp:member-ref>Connection</tp:member-ref> property is non-empty,
        the status of that connection.
        If the Connection property is the empty string, this property may
        either be Disconnected (indicating that the account manager is not
        attempting to bring it online), or Connecting (indicating that the
        account manager is attempting to connect).
        The account manager is expected to set this by observing signals
        from the Connection.

        <tp:rationale>
          If the AM is doing some sort of backoff/delay on reconnection
          attempts, the account's status is conceptually "Connecting" even
          though there is no Connection.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ConnectionStatusReason" type="u"
      access="read">
      <tp:docstring>
        The reason for the last change to
        <tp:member-ref>ConnectionStatus</tp:member-ref>.
        The account manager is expected to set this by observing signals
        from the Connection.

        <tp:rationale>
          If you weren't watching the Connection at the time it failed,
          you can't tell why - unless the AM can tell you.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ConnectionError"
      access="read" type="s">
      <tp:added version="0.19.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If the last connection to this account failed with an error,
          the D-Bus error name of that error; otherwise, the empty string.
          The account manager is expected to set this by observing the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy"
            >Connection.ConnectionError</tp:dbus-ref> and
          <tp:dbus-ref namespace="org.freedesktop.Telepathy"
            >Connection.StatusChanged</tp:dbus-ref>
          signals.</p>

        <p>If ConnectionError is received before the connection disconnects,
          its first argument should be used to set this property;
          otherwise, the Reason argument of StatusChanged should be converted
          to a suitable D-Bus error name.</p>

        <p>Whenever the Connection connects successfully, this property should
          be reset to the empty string.</p>

        <tp:rationale>
          <p>This combines the state-recoverability of
            <tp:member-ref>ConnectionStatusReason</tp:member-ref> with the
            extensibility of Connection.ConnectionError.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ConnectionErrorDetails"
      access="read" type="a{sv}">
      <tp:added version="0.19.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If the last connection to this account failed with an error,
          a mapping representing any additional information about the last
          disconnection; otherwise, the empty map. The keys and values are
          the same as for the second argument of
          <tp:dbus-ref namespace="org.freedesktop.Telepathy"
            >Connection.ConnectionError</tp:dbus-ref>.</p>

        <p>Whenever the Connection connects successfully, this property should
          be reset to the empty map.</p>

        <tp:rationale>
          <p>This combines the state-recoverability of
            <tp:member-ref>ConnectionStatusReason</tp:member-ref> with the
            extensibility of Connection.ConnectionError.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="CurrentPresence" type="(uss)" access="read">
      <tp:docstring>
        The actual presence. If the connection is not online, the
        <tp:type>Connection_Presence_Type</tp:type> SHOULD be
        Connection_Presence_Type_Offline.
        If the connection is online but does not support the <tp:dbus-ref
        namespace="org.freedesktop.Telepathy.Connection.Interface">SimplePresence</tp:dbus-ref>
        interface, the type SHOULD be Connection_Presence_Type_Unset.
        The account manager is expected to set this by observing signals
        from the Connection.
      </tp:docstring>
    </property>

    <property name="RequestedPresence" type="(uss)" access="readwrite">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The requested presence for this account. When this is changed, the
        account manager should attempt to manipulate the connection manager to
        make <tp:member-ref>CurrentPresence</tp:member-ref> match
        <tp:member-ref>RequestedPresence</tp:member-ref> as closely as
          possible. It should not be saved to any sort of persistent
          storage.</p>

        <p>When the account manager automatically connects an account,
          it must signal this by setting the RequestedPresence to the same
          thing as the <tp:member-ref>AutomaticPresence</tp:member-ref>.</p>

        <p>The <tp:type>Connection_Presence_Type</tp:type> in this property
          MUST NOT be Unset, Unknown or Error.</p>

        <tp:rationale>
          <p>Requesting those presence types doesn't make sense.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="ChangingPresence"
      type="b" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, a change to the presence of this account is
        in progress.</p>

        <p>Whenever <tp:member-ref>RequestedPresence</tp:member-ref> is set on
        an account that could go online, or whenever an account with a
        non-offline <tp:member-ref>RequestedPresence</tp:member-ref> becomes
        able to go online (for instance because
        <tp:member-ref>Enabled</tp:member-ref> or
        <tp:member-ref>Valid</tp:member-ref> changes to True),
        ChangingPresence MUST change to True, and the two property changes MUST
        be emitted in the same
        <tp:member-ref>AccountPropertyChanged</tp:member-ref> signal, before the
        Set method returns.</p>

        <p>When the account manager succeeds or fails in changing the presence,
        or the connection disconnects due to an error, ChangingPresence MUST
        change to False as part of the same
        <tp:member-ref>AccountPropertyChanged</tp:member-ref> signal.</p>

        <tp:rationale>
          <p>This allows UIs to indicate that a presence change is in progress
          or has finished, even if the change was initiated by a different
          UI.</p>

          <p>For instance, Maemo 5 and Empathy indicate a presence change by
          having the presence indicator alternate between the
          <tp:member-ref>RequestedPresence</tp:member-ref>
          and the <tp:member-ref>CurrentPresence</tp:member-ref>; they should
          start blinking when ChangingPresence becomes true, and stop when it
          becomes false.</p>
        </tp:rationale>

      </tp:docstring>
    </property>

    <method name="Reconnect">
      <tp:added version="0.17.24"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Re-connect this account. If the account is currently disconnected
          and the requested presence is offline, or if the account
          is not <tp:member-ref>Enabled</tp:member-ref> or not
          <tp:member-ref>Valid</tp:member-ref>, this does nothing.</p>

        <p>If the account is disconnected and the requested presence is not
          offline, this forces an attempt to connect with the requested
          presence immediately.</p>

        <p>If the account is connecting or connected, this is equivalent to
          remembering the current value of
          <tp:member-ref>RequestedPresence</tp:member-ref>, setting its value
          to (OFFLINE, "offline", ""), waiting for the change to take effect,
          then setting its value to the value that was previously
          remembered.</p>

        <tp:rationale>
          <p>Clients desiring "instant apply" semantics for CM parameters MAY
            call this method to achieve that.</p>
        </tp:rationale>

        <p>In particular, if the account's
          <tp:member-ref>Connection</tp:member-ref> is in the Connecting
          state, calling this method causes the attempt to connect to be
          aborted and re-tried.</p>

        <tp:rationale>
          <p>This is necessary to ensure that the new parameters are
            picked up.</p>
        </tp:rationale>
      </tp:docstring>
    </method>

    <property name="NormalizedName" type="s" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The normalized user ID of the local user on this account (i.e. the
          string returned when the <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>
          method is called on the
          result of <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection">GetSelfHandle</tp:dbus-ref>
          for an active connection).</p>

        <p>It is unspecified whether this user ID is globally unique.</p>

        <tp:rationale>
          <p>As currently implemented, IRC user IDs are only unique within
            the same IRCnet. On some saner protocols, the user ID includes a
            DNS name which provides global uniqueness.</p>
        </tp:rationale>

        <p>If this value is not known yet (which will always be the case for
          accounts that have never been online), it will be an empty
          string.</p>

        <p>It is possible that this value will change if the connection
          manager's normalization algorithm changes, although this SHOULD
          be avoided.</p>

        <tp:rationale>
          <p>It's not always completely clear what normalization algorithm
            should be used; for instance, in Gabble, we currently use JIDs,
            but it would also have been reasonable to use xmpp URIs.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="HasBeenOnline"
      type="b" access="read">
      <tp:docstring>
        If true, this account has successfully been put online at some point
        in the past.

        <tp:rationale>
          UIs could apply a policy that the 'account' parameter can only be
          edited in accounts that have never been online, or that
          ConnectAutomatically cannot be set on such accounts. The account
          manager should not enforce such policies, but it can expose enough
          information to UIs that the UI can decide what to do.
        </tp:rationale>
      </tp:docstring>
    </property>
  </interface>


  <!-- Connection_Interface_Contact_List.xml -->
  <tp:copyright>Copyright © 2009-2010 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.ContactList">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.21.0">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for connections that have any concept of a list of
        known contacts (roster, buddy list, friends list etc.)</p>

      <tp:rationale>
        <p>On many protocols, there's a server-side roster (as in XMPP),
          or a set of server-side lists that can be combined to form a
          roster (as in MSN).</p>

        <p>In some protocols (like link-local XMPP), while there might not be
          any server or roster, it's possible to list "nearby" contacts.</p>

        <p>In Telepathy 0.20 and older, we represented contact lists as a
          collection of <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel.Type"
            >ContactList</tp:dbus-ref> channels. This is remarkably difficult to
          work with in practice - every client that cares about contact lists
          has to take the union of some hard-to-define set of these
          channels - and conflicts with the idea that channels that cannot
          be dispatched to a handler should be closed.</p>
      </tp:rationale>

      <p>The list of contacts is not exposed as a D-Bus property; it can be
        fetched using <tp:member-ref>GetContactListAttributes</tp:member-ref>.
      </p>

      <tp:rationale>
        <p>In some protocols, such as XMPP, the contact list may not be
          available immediately. The
          <tp:member-ref>GetContactListAttributes</tp:member-ref> method
          will fail until the contact list is available.
          Using a method also allows extra attributes to be retrieved at
          the same time.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:enum name="Contact_List_State" type="u">
      <tp:docstring>
        The progress made in retrieving the contact list.
      </tp:docstring>

      <tp:enumvalue suffix="None" value="0">
        <tp:docstring>The connection has not started to retrieve the contact
          list. If <tp:member-ref>GetContactListAttributes</tp:member-ref> is
          called in this state, it will raise NotYet.</tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Waiting" value="1">
        <tp:docstring>The connection has started to retrieve the contact
          list, but has not yet succeeded or failed.
          If <tp:member-ref>GetContactListAttributes</tp:member-ref> is called
          in this state, it will raise NotYet.</tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Failure" value="2">
        <tp:docstring>
          <p>The connection has tried and failed to retrieve the contact
            list. If <tp:member-ref>GetContactListAttributes</tp:member-ref>
            is called in this state, it will immediately raise an error
            indicating the reason for failure.</p>

          <p>The connection manager SHOULD try again to obtain the contact
            list, if appropriate for the protocol. If it succeeds later,
            the <tp:member-ref>ContactListState</tp:member-ref> MUST advance
            to Success.</p>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Success" value="3">
        <tp:docstring>The connection has successfully retrieved the contact
          list. If <tp:member-ref>GetContactListAttributes</tp:member-ref>
          is called in this state, it will return successfully.</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <property name="ContactListState"
      type="u" access="read">
      <tp:docstring>
        The progress made in retrieving the contact list.
        Change notification is via
        <tp:member-ref>ContactListStateChanged</tp:member-ref>.
      </tp:docstring>
    </property>

    <signal name="ContactListStateChanged">
      <tp:docstring>
        Emitted when <tp:member-ref>ContactListState</tp:member-ref>
        changes.
      </tp:docstring>

      <arg name="Contact_List_State" type="u">
        <tp:docstring>
          The new value of <tp:member-ref>ContactListState</tp:member-ref>.
        </tp:docstring>
      </arg>
    </signal>

    <method name="GetContactListAttributes">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Return some contact attributes for a list of contacts
          associated with the user. This list MUST include at least:</p>

        <ul>
          <li>all contacts whose <tp:token-ref>subscribe</tp:token-ref>
            attribute is not No</li>
          <li>all contacts whose <tp:token-ref>publish</tp:token-ref>
            attribute is not No</li>
        </ul>

        <p>but MAY contain other contacts.</p>

        <tp:rationale>
          <p>For instance, on XMPP, all contacts on the roster would appear
            here even if they have subscription="none", unless there's
            reason to believe the user does not want to see them (such as
            having been blocked).</p>
        </tp:rationale>

        <p>This list does not need to contain every visible contact: for
          instance, contacts seen in XMPP or IRC chatrooms SHOULD NOT appear
          here. Blocked contacts SHOULD NOT appear here, unless they still
          have a non-<tt>No</tt> <tp:token-ref>subscribe</tp:token-ref> or
          <tp:token-ref>publish</tp:token-ref> attribute
          for some reason.</p>

        <tp:rationale>
          <p>It's reasonable to assume that blocked contacts should not be
            visible to the user unless they specifically go looking for them,
            at least in protocols like XMPP where blocking a contact
            suppresses presence.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Interfaces" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A list of strings indicating which D-Bus interfaces the calling
            process is interested in. Equivalent to the corresponding argument
            to <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface.Contacts"
              >GetContactAttributes</tp:dbus-ref>,
            except that if this list does not contain the ContactList
            interface itself, it is treated as though that interface was also
            requested.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Hold" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, all handles that appear as keys in the result have been
            held on behalf of the calling process, as if by a call to
            <tp:dbus-ref namespace="ofdT">Connection.HoldHandles</tp:dbus-ref>.
            (If <tp:dbus-ref namespace="ofdT.Connection"
              >HasImmortalHandles</tp:dbus-ref> is true, which SHOULD be the
            case in all new connection managers, this has no effect.)</p>
        </tp:docstring>
      </arg>

      <arg direction="out" type="a{ua{sv}}" name="Attributes">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary mapping the contact handles to contact attributes,
            equivalent to the result of <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection.Interface.Contacts"
              >GetContactAttributes</tp:dbus-ref>.</p>

        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.ServiceBusy"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYet">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The <tp:member-ref>ContactListState</tp:member-ref> is
              None or Waiting. In particular, this error is raised if the
              <tp:dbus-ref namespace="ofdT.Connection">Status</tp:dbus-ref>
              is not yet Connection_Status_Connected.</p>
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:enum name="Subscription_State" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An enumeration indicating whether presence subscription is denied,
          denied but pending permission, or allowed. The exact semantics
          vary according to where this type is used: see the
          <tp:token-ref>subscribe</tp:token-ref> and
          <tp:token-ref>publish</tp:token-ref> contact attributes for
          details.</p>
      </tp:docstring>

      <tp:enumvalue suffix="Unknown" value="0">
        <tp:docstring>The presence subscription state is
          unknown.</tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="No" value="1">
        <tp:docstring>Presence information cannot be seen, and either the
          subscription state Removed_Remotely does not apply, or it is
          not known whether that state applies.
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Removed_Remotely" value="2">
        <tp:docstring>Presence information cannot be seen because the
          remote contact took action: either the local user's request to
          see the remote contact's presence was denied, or the remote
          contact requested to see the local user's presence but then
          cancelled their request.</tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Ask" value="3">
        <tp:docstring>Presence information cannot be seen. Permission
          to see presence information has been requested, and the request
          has not yet been declined or accepted.</tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Yes" value="4">
        <tp:docstring>Presence information can be seen.</tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:contact-attribute name="subscribe"
      type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If this attribute on a contact is Yes, this connection can
          expect to receive their presence, along with any other information
          that has the same access control.</p>

        <tp:rationale>
          <p>This is subscription="from" or subscription="both" in XMPP,
            the "forward list" on MSN, or the contact being "added to
            the local user's buddy list" in ICQ, for example.</p>
        </tp:rationale>

        <p>If this attribute is not Yes, the local user cannot generally
          expect to receive presence from this contact. Their presence status
          as returned by <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.SimplePresence">GetPresences</tp:dbus-ref>
          is likely to be (Unknown, "unknown", ""), unless the local user
          can temporarily see their presence for some other reason (for
          instance, on XMPP, contacts seen in chatrooms will temporarily
          have available presence).</p>

        <p>If this attribute is Ask, this indicates that the local user has
          asked to receive the contact's presence at some time. It is
          implementation-dependent whether contacts' subscribe attributes
          can remain set to Ask, or are reset to No, when the connection
          disconnects.</p>

        <tp:rationale>
          <p>Some protocols store the fact that we wishes to see a contact's
            presence; on these protocols, this attribute can remain Ask
            indefinitely. On other protocols, only contacts who have been
            asked during the current session will ever have Ask status.</p>
        </tp:rationale>

        <p>If this attribute is Removed_Remotely, this indicates that the
          local user has asked to receive the contact's presence at some time,
          but the remote contact has rejected that request, and a local
          user interface has not yet acknowledged this. It is
          implementation-dependent whether contacts' subscribe attributes can
          remain set to Removed_Remotely, or are reset to No, when the
          connection disconnects.</p>

        <p>After notifying the user, user interfaces MAY acknowledge a change
          to <tt>subscribe</tt>=Removed_Remotely by calling either
          <tp:member-ref>Unsubscribe</tp:member-ref> or
          <tp:member-ref>RemoveContacts</tp:member-ref>, which will set
          <tt>subscribe</tt> to No (and perhaps remove the contact). This
          allows user interfaces to detect that the user has been notified
          about the rejected request.</p>

        <p>This attribute's value will be Unknown or omitted until the
          <tp:member-ref>ContactListState</tp:member-ref> has changed to
          Success.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:contact-attribute name="publish"
      type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If this attribute on a contact is Yes, the local user's presence
          is published to that contact, along with any other information that
          shares an access-control mechanism with presence (depending on
          protocol, server configuration and/or user configuration, this may
          include avatars, "rich presence" such as location, etc.).</p>

        <tp:rationale>
          <p>This is subscription="to" or subscription="both" in XMPP,
            the "reverse list" on MSN, or the state of "being added to
            the contact's buddy list" in ICQ, for example.</p>
        </tp:rationale>

        <p>If this attribute is not Yes, the
          local user's presence is not published to that contact; however,
          if it is Ask, the contact has requested that the local user's
          presence is made available to them.</p>

        <p>It is implementation-dependent whether contacts' <tt>publish</tt>
          attributes can remain set to Ask, or are reset to No, when the
          connection disconnects.</p>

        <tp:rationale>
          <p>Some protocols store the fact that a contact wishes to see our
            presence; on these protocols, this attribute can remain Ask
            indefinitely. On other protocols, only contacts who have asked
            during the current session will ever have Ask status.</p>
        </tp:rationale>

        <p>If this attribute is Removed_Remotely, this indicates that the
          remote contact has asked to receive the user's presence at some time,
          but has then cancelled that request before a response was given by
          the local user. User interfaces MAY reset <tt>publish</tt> from
          Removed_Remotely to No, by calling either
          <tp:member-ref>Unpublish</tp:member-ref> or
          <tp:member-ref>RemoveContacts</tp:member-ref>.</p>

        <p>If multiple factors affect whether a contact can receive the local
          user's presence, this attribute SHOULD reflect the overall
          result. For instance, an XMPP contact with subscription="to" or
          subscription="both", but who has been blocked via
          <a href="http://xmpp.org/extensions/xep-0016.html">XEP-0016 Privacy
            Lists</a>, SHOULD have publish=No.</p>

        <p>This attribute's value will be Unknown or omitted until the
          <tp:member-ref>ContactListState</tp:member-ref> has changed to
          Success.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:contact-attribute name="publish-request" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If the <tp:token-ref>publish</tp:token-ref> attribute is Ask, an
          optional message that was sent by the contact asking to receive the
          local user's presence; omitted if none was given.</p>

        <tp:rationale>
          <p>If the contact asking to receive our presence is also using
            Telepathy, this is the message they supplied as the Message
            argument to <tp:member-ref>RequestSubscription</tp:member-ref>.</p>
        </tp:rationale>

        <p>Otherwise, this SHOULD be omitted.</p>

        <p>This attribute will also be omitted until the
          <tp:member-ref>ContactListState</tp:member-ref> has changed to
          Success.</p>
      </tp:docstring>
    </tp:contact-attribute>

    <property name="ContactListPersists"
      type="b" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, presence subscriptions (in both directions) on this
          connection are stored by the server or other infrastructure.</p>

        <tp:rationale>
          <p>XMPP, MSN, ICQ, etc. all behave like this.</p>
        </tp:rationale>

        <p>If false, presence subscriptions on this connection are not
          stored.</p>

        <tp:rationale>
          <p>In SIMPLE (SIP), <em>clients</em> are expected to keep a record
            of subscriptions, as described below. In link-local XMPP,
            subscriptions are implicit (everyone on the local network receives
            presence from everyone else) so nothing is ever stored.</p>
        </tp:rationale>

        <p>If <tp:member-ref>CanChangeContactList</tp:member-ref>
          is true, Telepathy clients (e.g. user interfaces or address books)
          MAY keep a record of permission to publish and requests to subscribe
          locally, and attempt to restore it for each Connection. If
          ContactListPersists is false, clients MAY do this for all contacts;
          if ContactListPersists is true, clients SHOULD NOT change the state
          of contacts that were not changed locally.</p>

        <tp:rationale>
          <p>In SIMPLE (SIP), ContactListPersists is false, but
            CanChangeContactList is true. Presence will not be received
            unless clients renew any subscriptions they have for each
            connection, in the way described. There is no server-side storage,
            so clients have no alternative but to maintain independent contact
            lists.</p>

          <p>In protocols like XMPP and MSN, it may be useful for clients to
            queue up subscription requests or removals made while offline and
            process them next time the connection is online. However, clients
            should only replay the changes, rather than resetting the contact
            list to match a stored copy, to avoid overwriting changes that
            were made on the server.</p>
        </tp:rationale>

        <p>Clients that replay requests like this SHOULD do so by calling
          AuthorizePublication to pre-approve publication of presence to the
          appropriate contacts, followed by RequestSubscription to request the
          appropriate contacts' presences.</p>

        <p>This property cannot change after the connection has moved to the
          Connected state. Until then, its value is undefined, and it may
          change at any time, without notification.</p>
      </tp:docstring>
    </property>

    <tp:enum name="Contact_Metadata_Storage_Type" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Values of this enumeration indicate the extent to which metadata
          such as aliases and group memberships can be stored for the contacts
          on a particular connection.</p>

        <p>On some protocols, certain metadata (for instance, contact aliases)
          can only be stored for contacts on the contact list, or contacts
          with a particular contact list state.</p>

        <p>To make it easier to deal with such protocols, if clients set
          metadata on a contact who is not in the required state, the
          Connection MUST cache the metadata for the duration of the session.
          If clients request the attributes of that contact after the
          appropriate "set" method has returned successfully, the Connection
          MUST return the new (cached) value.</p>

        <p>If the contact is later placed in the required state to store
          metadata (for instance, if subscription to the contact's presence
          is requested, on a protocol like MSN where the alias has storage type
          Subscribed_Or_Pending), the connection MUST store the cached
          metadata at that time.</p>

        <tp:rationale>
          <p>If the Connection didn't cache changes in this way, a client
            intending to change the alias on MSN would have to wait until
            the server acknowledged the subscription request; in the meantime,
            other clients would still display the old alias.</p>
        </tp:rationale>

        <p>The only exception to that general rule is that if the Connection
          cannot store particular metadata at all (i.e. the
          storage type is None), it MUST reject attempts to set it.</p>

        <tp:rationale>
          <p>If the implementation knows that metadata can't be stored at
            all, it's useful to report that, which can be done
            synchronously. In general, user interfaces should detect
            storage type None and not display editing controls at all.</p>
        </tp:rationale>
      </tp:docstring>

      <tp:enumvalue suffix="None" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This connection cannot store this type of metadata at all, and
            attempting to do so will fail with NotImplemented.</p>

          <tp:rationale>
            <p>Link-local XMPP can't store aliases or group memberships at
              all, and subscription and presence states are implicit (all
              contacts on the local network have subscribe = publish = Yes
              and no other contacts exist).</p>

            <p>As of April 2010, the XMPP server for Facebook Chat provides a
              read-only view of the user's Facebook contacts, so it could also
              usefully have this storage type.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Subscribed_Or_Pending" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This type of metadata can only be stored permanently for contacts
            whose subscribe attribute is Ask or Yes.</p>

          <tp:rationale>
            <p>Contact aliases and groups on MSN have this behaviour.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Subscribed" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>This type of metadata can only be stored permanently for contacts
            whose subscribe attribute is Yes.</p>

          <tp:rationale>
            <p>No service with this behaviour is currently known, but it's a
              stricter form of Subscribed_Or_Pending.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>

      <tp:enumvalue suffix="Anyone" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The user can set this metadata for any valid contact identifier,
            whether or not they have any presence subscription relationship
            to it, and it will be stored on their contact list.</p>

          <tp:rationale>
            <p>Contact aliases and groups on XMPP have this behaviour; it
              is possible to put a contact in a group, or assign an alias
              to them, without requesting that presence be shared.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:struct name="Contact_Subscriptions" array-name="">
      <tp:docstring>
        A single contact's subscribe, publish and publish-request attributes.
      </tp:docstring>

      <tp:member name="Subscribe" type="u">
        <tp:docstring>
          The new value of the contact's "subscribe" attribute.
        </tp:docstring>
      </tp:member>

      <tp:member name="Publish" type="u">
        <tp:docstring>
          The new value of the contact's "publish" attribute.
        </tp:docstring>
      </tp:member>

      <tp:member name="Publish_Request" type="s">
        <tp:docstring>
          The new value of the contact's "publish-request" attribute,
          or the empty string if that attribute would be omitted.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Contact_Subscription_Map" array-name="">
      <tp:docstring>
        A map from contacts to their subscribe, publish and publish-request
        attributes.
      </tp:docstring>

      <tp:member name="Contact" type="u">
        <tp:docstring>
          The contact's handle.
        </tp:docstring>
      </tp:member>

      <tp:member name="States" type="(uus)">
        <tp:docstring>
          The contact's subscribe, publish and publish-request attributes.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <signal name="ContactsChangedWithID">
      <tp:added version="0.21.8"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when the contact list becomes available, when contacts'
          basic stored properties change, when new contacts are added to the
          list that would be returned by
          <tp:member-ref>GetContactListAttributes</tp:member-ref>,
          or when contacts are removed from that list.</p>

        <tp:rationale>
          <p>This provides change notification for that list, and for
            contacts' <tp:token-ref>subscribe</tp:token-ref>,
            <tp:token-ref>publish</tp:token-ref> and
            <tp:token-ref>publish-request</tp:token-ref> attributes.</p>
        </tp:rationale>

        <p>Connection managers SHOULD also emit this signal when a contact
          requests that the user's presence is published to them, even if
          that contact's <tp:token>publish</tp:token> attribute is already
          Ask and the <tp:token>publish-request</tp:token> has not changed.</p>

        <tp:rationale>
          <p>If the same contact sends 10 identical requests, 10 identical
            signals should be emitted.</p>
        </tp:rationale>
      </tp:docstring>

      <arg type="a{u(uus)}" name="Changes">
        <tp:docstring>
          The new <tp:token-ref>subscribe</tp:token-ref>,
            <tp:token-ref>publish</tp:token-ref> and
            <tp:token-ref>publish-request</tp:token-ref> attributes of all the
          contacts that have been added, and all the contacts for which those
          attributes have changed.
        </tp:docstring>
      </arg>

      <arg name="Identifiers" type="a{us}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          The identifiers of the contacts in the <var>Changes</var> map.
        </tp:docstring>
      </arg>

      <arg name="Removals" type="a{us}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          The contacts that have been removed from the list that would be
          returned by
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.
          This also implies that they have subscribe = No and publish = No;
          contacts MUST NOT be listed both here and in <var>Changes</var>.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="ContactsChanged">
      <tp:deprecated version="0.21.8">Connection managers MUST still
        emit this signal, but clients SHOULD listen for the
        <tp:member-ref>ContactsChangedWithID</tp:member-ref> signal in
        addition, and ignore this signal after ContactsChangedWithID has been
        emitted at least once.
      </tp:deprecated>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted immediately after
          <tp:member-ref>ContactsChangedWithID</tp:member-ref>, under the same
          circumstances.</p>

        <p>If clients receive this signal without first receiving a
          corresponding <tp:member-ref>ContactsChangedWithID</tp:member-ref>,
          they MUST assume that only this signal will be emitted.</p>
      </tp:docstring>

      <arg type="a{u(uus)}" name="Changes">
        <tp:docstring>
          The same as the corresponding argument to
          <tp:member-ref>ContactsChangedWithID</tp:member-ref>.
        </tp:docstring>
      </arg>

      <arg name="Removals" type="au">
        <tp:docstring>
          The same as the corresponding argument to
          <tp:member-ref>ContactsChangedWithID</tp:member-ref>, except that it
          only includes handles and not identifiers.
        </tp:docstring>
      </arg>
    </signal>

    <property name="CanChangeContactList" type="b" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, presence subscription and publication can be changed
          using the
          <tp:member-ref>RequestSubscription</tp:member-ref>,
          <tp:member-ref>AuthorizePublication</tp:member-ref> and
          <tp:member-ref>RemoveContacts</tp:member-ref> methods.</p>

        <p>If false, all of those methods will always fail; they SHOULD raise
          the error org.freedesktop.Telepathy.Error.NotImplemented.</p>

        <tp:rationale>
          <p>In XEP-0174 "Serverless Messaging" (link-local XMPP), presence is
            implicitly published to everyone in the local subnet, so the user
            cannot control their presence publication.</p>
        </tp:rationale>

        <p>This property cannot change after the connection has moved to the
          Connected state. Until then, its value is undefined, and it may
          change at any time, without notification.</p>
      </tp:docstring>
    </property>

    <method name="RequestSubscription">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the given contacts allow the local user to
          subscribe to their presence, i.e. that their subscribe attribute
          becomes Yes.</p>

        <p>Connection managers SHOULD NOT attempt to enforce a
          mutual-subscription policy (i.e. when this method is called, they
          should not automatically allow the contacts to see the local user's
          presence). User interfaces that require mutual subscription
          MAY call <tp:member-ref>AuthorizePublication</tp:member-ref>
          at the same time as this method.</p>

        <tp:rationale>
          <p>Whether to enforce mutual subscription is a matter of policy,
            so it is left to the user interface and/or the server.</p>
        </tp:rationale>

        <p>Before calling this method on a connection where <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing"
            >GetAliasFlags</tp:dbus-ref> returns the <code>User_Set</code> flag,
          user interfaces SHOULD obtain, from the user, an alias to
          identify the contact in future, and store it using <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Aliasing"
            >SetAliases</tp:dbus-ref>.</p>

        <p>The user MAY be
          prompted using the contact's current self-assigned nickname, or
          something derived from the contact's (presumably self-assigned)
          identifier, as a default, but these names chosen by the contact
          SHOULD NOT be used without user approval.</p>

        <tp:rationale>
          <p>This is a generalization of
            <a href="http://xmpp.org/extensions/xep-0165.html"
              >XEP-0165 "Best Practices to Discourage JID Mimicking"</a>)
            to protocols other than XMPP. A reasonable user interface for
            this, as used in many XMPP clients, is to have a text entry
            for the alias adjacent to the text entry for the identifier
            to add.</p>
        </tp:rationale>

        <p>For contacts with subscribe=Yes, this method has no effect.
          It MUST return successfully if all contacts are in this state.</p>

        <p>For contacts with subscribe=Ask, this method SHOULD send a new
          request, with the given message, if allowed by the underlying
          protocol.</p>

        <p>For contacts with subscribe=No or subscribe=Rejected, this method
          SHOULD request that the contact allows the local user to subscribe
          to their presence; in general, this will change their publish
          attribute to Ask (although it could change directly to Yes in some
          situations).</p>

        <p>Any state changes that immediately result from this request MUST
          be signalled via <tp:member-ref>ContactsChanged</tp:member-ref>
          before this method returns.</p>

        <tp:rationale>
          <p>This makes it easy for user interfaces to see what practical
            effect this method had.</p>
        </tp:rationale>

        <p>If the remote contact accepts the request, their subscribe
          attribute will later change from Ask to Yes.</p>

        <p>If the remote contact explicitly rejects the request (in protocols
          that allow this), their subscribe attribute will later change from
          Ask to Rejected.</p>

        <p>If the subscription request is cancelled by the local user, the
          contact's subscribe attribute will change from Ask to No.</p>

        <p>This method SHOULD NOT be called until the
          <tp:member-ref>ContactListState</tp:member-ref> changes to Success.
          If the <tp:member-ref>ContactListState</tp:member-ref> changes to
          Failure, this method SHOULD raise the same error as
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Contacts" direction="in"
        type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>One or more contacts to whom requests are to be sent.</p>
        </tp:docstring>
      </arg>

      <arg name="Message" type="s" direction="in">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An optional plain-text message from the user, to send to those
            contacts with the subscription request. The
            <tp:member-ref>RequestUsesMessage</tp:member-ref> property
            indicates whether this message will be used or ignored.</p>

          <p>Clients SHOULD NOT send a non-empty message without first giving
            the user an opportunity to edit it.</p>

          <tp:rationale>
            <p>These messages are typically presented to the remote contact
              as if the user had typed them, so as a minimum, the user should be
              allowed to see what the UI will be saying on their behalf.</p>
          </tp:rationale>

          <p>Connections where this message is not useful MUST still allow it to
            be non-empty.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYet">
          <tp:docstring>
            The <tp:member-ref>ContactListState</tp:member-ref> is None
            or Waiting.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            It was not possible to perform the requested action, because
            <tp:member-ref>CanChangeContactList</tp:member-ref> is false.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <property name="RequestUsesMessage" type="b" access="read">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, the Message parameter to
          <tp:member-ref>RequestSubscription</tp:member-ref> is likely to be
          significant, and user interfaces SHOULD prompt the user for a
          message to send with the request; a message such as "I would like
          to add you to my contact list", translated into the local user's
          language, might make a suitable default.</p>

        <tp:rationale>
          <p>This matches user expectations in XMPP and ICQ, for instance.</p>
        </tp:rationale>

        <p>If false, the parameter is ignored; user interfaces SHOULD avoid
          prompting the user, and SHOULD pass an empty string to
          RequestSubscription.</p>

        <tp:rationale>
          <p><em>FIXME: is there any such protocol?</em></p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="AuthorizePublication">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>For each of the given contacts, request that the local user's
          presence is sent to that contact, i.e. that their publish attribute
          becomes Yes.</p>

        <p>Connection managers SHOULD NOT attempt to enforce a
          mutual-subscription policy (i.e. when this method is called, they
          should not automatically request that the contacts allow the user to
          subscribe to their presence). User interfaces that require mutual
          subscription MAY call
          <tp:member-ref>RequestSubscription</tp:member-ref> at the same time
          as this method.</p>

        <tp:rationale>
          <p>Whether to enforce mutual subscription is a matter of policy,
            so it is left to the user interface and/or the server.</p>
        </tp:rationale>

        <p>For contacts with publish=Yes, this method has no effect; it
          MUST return successfully if all contacts given have this state.</p>

        <p>For contacts with publish=Ask, this method accepts the
          contact's request to see the local user's presence, changing
          their publish attribute from Ask to Yes.</p>

        <p>For contacts with publish=No, if the protocol allows it, this
          method allows the contacts to see the local user's presence even
          though they have not requested it, changing their publish attribute
          from No to Yes. Otherwise, it merely records the fact that
          presence publication to those contacts is allowed; if any of
          those contacts ask to receive the local user's presence
          later in the lifetime of the connection, the connection SHOULD
          immediately allow them to do so, changing their publish
          attribute directly from No to Yes.</p>

        <tp:rationale>
          <p>This makes it easy to implement the common UI policy that if
            the user attempts to subscribe to a contact's presence, requests
            for reciprocal subscription are automatically approved.</p>
        </tp:rationale>

        <p>Any state changes that immediately result from this request MUST
          be signalled via <tp:member-ref>ContactsChanged</tp:member-ref>
          before this method returns.</p>

        <tp:rationale>
          <p>This makes it easy for user interfaces to see what practical
            effect this method had.</p>
        </tp:rationale>

        <p>This method SHOULD NOT be called until the
          <tp:member-ref>ContactListState</tp:member-ref> changes to Success.
          If the <tp:member-ref>ContactListState</tp:member-ref> changes to
          Failure, this method SHOULD raise the same error as
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Contacts" direction="in"
        type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>One or more contacts to authorize.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            It was not possible to perform the requested action, because
            <tp:member-ref>CanChangeContactList</tp:member-ref> is false.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYet">
          <tp:docstring>
            The <tp:member-ref>ContactListState</tp:member-ref> is None
            or Waiting.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RemoveContacts">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Remove the given contacts from the contact list entirely. It is
          protocol-dependent whether this works, and under which
          circumstances.</p>

        <p>If possible, this method SHOULD set the contacts' subscribe and
          publish attributes to No, remove any stored aliases for those
          contacts, and remove the contacts from the result of
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>

        <p>This method SHOULD succeed even if it was not possible to carry out
          the request entirely or for all contacts (for instance, if there is an
          outstanding request to subscribe to the contact's presence, and it's
          not possible to cancel such requests). However, all signals that
          immediately result from this method call MUST be emitted before it
          returns, so that clients can interpret the result.</p>

        <tp:rationale>
          <p>User interfaces removing a contact from the contact list are
            unlikely to want spurious failure notifications resulting from
            limitations of a particular protocol. However, emitting the
            signals first means that if a client does want to check exactly
            what happened, it can wait for the method to return (while
            applying change-notification signals to its local cache of the
            contact list's state), then consult its local cache of the
            contact list's state to see whether the contact is still there.</p>
        </tp:rationale>

        <p>This method SHOULD NOT be called until the
          <tp:member-ref>ContactListState</tp:member-ref> changes to Success.
          If the <tp:member-ref>ContactListState</tp:member-ref> changes to
          Failure, this method SHOULD raise the same error as
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Contacts" direction="in"
        type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>One or more contacts to remove.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            It was not possible to perform the requested action because
            <tp:member-ref>CanChangeContactList</tp:member-ref> is false.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYet">
          <tp:docstring>
            The <tp:member-ref>ContactListState</tp:member-ref> is None
            or Waiting.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Unsubscribe">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Attempt to set the given contacts' subscribe attribute to No,
          i.e. stop receiving their presence.</p>

        <p>For contacts with subscribe=Ask, this attempts to cancel
          an earlier request to subscribe to the contact's presence; for
          contacts with subscribe=Yes, this attempts to
          unsubscribe from the contact's presence.</p>

        <p>As with <tp:member-ref>RemoveContacts</tp:member-ref>, this method
          SHOULD succeed even if it was not possible to carry out the request
          entirely or for all contacts; however, all signals that
          immediately result from this method call MUST be emitted before it
          returns.</p>

        <p>This method SHOULD NOT be called until the
          <tp:member-ref>ContactListState</tp:member-ref> changes to Success.
          If the <tp:member-ref>ContactListState</tp:member-ref> changes to
          Failure, this method SHOULD raise the same error as
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Contacts" direction="in"
        type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>One or more contacts to remove.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            It was not possible to perform the requested action because
            <tp:member-ref>CanChangeContactList</tp:member-ref> is false.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="Unpublish">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Attempt to set the given contacts' publish attribute to No,
          i.e. stop sending presence to them.</p>

        <p>For contacts with publish=Ask, this method explicitly rejects the
          contact's request to subscribe to the user's presence; for
          contacts with publish=Yes, this method attempts to prevent the
          user's presence from being received by the contact.</p>

        <p>As with <tp:member-ref>RemoveContacts</tp:member-ref>, this method
          SHOULD succeed even if it was not possible to carry out the request
          entirely or for all contacts; however, all signals that
          immediately result from this method call MUST be emitted before it
          returns.</p>

        <p>This method SHOULD NOT be called until the
          <tp:member-ref>ContactListState</tp:member-ref> changes to Success.
          If the <tp:member-ref>ContactListState</tp:member-ref> changes to
          Failure, this method SHOULD raise the same error as
          <tp:member-ref>GetContactListAttributes</tp:member-ref>.</p>
      </tp:docstring>

      <arg name="Contacts" direction="in"
        type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>One or more contacts to remove.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            It was not possible to perform the requested action because
            <tp:member-ref>CanChangeContactList</tp:member-ref> is false.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotYet">
          <tp:docstring>
            The <tp:member-ref>ContactListState</tp:member-ref> is None
            or Waiting.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

  </interface>




  <!-- Channel.xml -->
  <tp:copyright>Copyright © 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright © 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel">

    <property name="ChannelType" type="s"
      access="read">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The channel's type. This cannot change once the channel has
          been created.</p>

        <p>For compatibility between older connection managers and newer
          clients, if this is unavailable or is an empty string,
          clients MUST use the result of calling
          <tp:member-ref>GetChannelType</tp:member-ref>.</p>

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip, which is desirable.
        </tp:rationale>

        <p>When requesting a channel, the request MUST specify a channel
          type, and the request MUST fail if the specified channel type
          cannot be supplied.</p>

        <tp:rationale>
          Common sense.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="Interfaces"
      type="as" access="read">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Extra interfaces provided by this channel. This SHOULD NOT include
          the channel type and the Channel interface itself, and cannot
          change once the channel has been created.</p>

        <p>For compatibility between older connection managers and newer
          clients, if this is unavailable, or if this is an empty list and
          <tp:member-ref>ChannelType</tp:member-ref> is an empty string,
          clients MUST use the result of calling
          <tp:member-ref>GetInterfaces</tp:member-ref> instead. If this is an
          empty list but ChannelType is non-empty, clients SHOULD NOT call
          GetInterfaces; this implies that connection managers that implement
          the ChannelType property MUST also implement the Interfaces property
          correctly.</p>

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip, which is desirable.
        </tp:rationale>

        <p>When requesting a channel with a particular value for this
          property, the request must fail without side-effects unless the
          connection manager expects to be able to provide a channel whose
          interfaces include at least the interfaces requested.</p>
      </tp:docstring>
    </property>

    <property name="TargetHandle" type="u" access="read">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The handle (a representation for the identifier) of the contact,
          chatroom, etc. with which this handle communicates. Its type
          is given by the <tp:member-ref>TargetHandleType</tp:member-ref>
          property.</p>

        <p>This is fixed for the lifetime of the channel, so channels which
          could potentially be used to communicate with multiple contacts,
          and do not have an identity of their own (such as a Handle_Type_Room
          handle), must have TargetHandleType set to Handle_Type_None and
          TargetHandle set to 0.</p>

        <p>Unlike in the telepathy-spec 0.16 API, there is no particular
          uniqueness guarantee - there can be many channels with the same
          (channel type, handle type, handle) tuple. This is necessary
          to support conversation threads in XMPP and SIP, for example.</p>

        <p>If this is present in a channel request, it must be nonzero,
          <tp:member-ref>TargetHandleType</tp:member-ref>
          MUST be present and not Handle_Type_None, and
          <tp:member-ref>TargetID</tp:member-ref> MUST NOT be
          present. Properties from
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Addressing.DRAFT</tp:dbus-ref>
          MUST NOT be present.</p>

        <p>The channel that satisfies the request MUST either:</p>

        <ul>
          <li>have the specified TargetHandle property; or</li>
          <li>have <tp:member-ref>TargetHandleType</tp:member-ref> =
            Handle_Type_None, TargetHandle = 0, and be configured such that
            it could communicate with the specified handle in some other way
            (e.g. have the requested contact handle in its Group
            interface)</li>
        </ul>
      </tp:docstring>
    </property>

    <property name="TargetID"
      type="s" access="read">
      <tp:added version="0.17.9"/>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The string that would result from inspecting the
          <tp:member-ref>TargetHandle</tp:member-ref>
          property (i.e. the identifier in the IM protocol of the contact,
          room, etc. with which this channel communicates), or the empty
          string if the TargetHandle is 0.</p>

        <tp:rationale>
          <p>The presence of this property avoids the following race
            condition:</p>

          <ul>
            <li>New channel C is signalled with target handle T</li>
            <li>Client calls <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [T])</li>
            <li>Channel C closes, removing the last reference to handle T</li>
            <li><tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [T]) returns an error</li>
          </ul>
        </tp:rationale>

        <p>If this is present in a channel request,
          <tp:member-ref>TargetHandleType</tp:member-ref>
          MUST be present and not Handle_Type_None, and
          <tp:member-ref>TargetHandle</tp:member-ref> MUST NOT be
          present. Properties from
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">Addressing.DRAFT</tp:dbus-ref>
          MUST NOT be present.The request MUST fail with error InvalidHandle,
          without side-effects, if the requested TargetID would not be
          accepted by
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>.</p>

        <p>The returned channel must be related to the handle corresponding
          to the given identifier, in the same way as if TargetHandle
          had been part of the request instead.</p>

        <tp:rationale>
          <p>Requesting channels with a string identifier saves a round-trip
            (the call to RequestHandles). It also allows the channel
            dispatcher to accept a channel request for an account that is not
            yet connected (and thus has no valid handles), bring the account
            online, and pass on the same parameters to the new connection's
            CreateChannel method.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="TargetHandleType" type="u" access="read">
      <tp:added version="0.17.7"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The type of <tp:member-ref>TargetHandle</tp:member-ref>.</p>

        <p>If this is omitted from a channel request, connection managers
          SHOULD treat this as equivalent to Handle_Type_None.</p>

        <p>If this is omitted or is Handle_Type_None,
          <tp:member-ref>TargetHandle</tp:member-ref> and
          <tp:member-ref>TargetID</tp:member-ref> MUST be omitted from the
          request.</p>
      </tp:docstring>
    </property>

    <method name="Close">
      <tp:docstring>
        Request that the channel be closed. This is not the case until
        the <tp:member-ref>Closed</tp:member-ref> signal has been emitted, and
        depending on the connection
        manager this may simply remove you from the channel on the server,
        rather than causing it to stop existing entirely. Some channels
        such as contact list channels may not be closed.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            This channel may never be closed, e.g. a contact list
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This channel is not currently in a state where it can be closed,
            e.g. a non-empty user-defined contact group
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="Closed">
      <tp:docstring>
        Emitted when the channel has been closed. Method calls on the
        channel are no longer valid after this signal has been emitted,
        and the connection manager may then remove the object from the bus
        at any point.
      </tp:docstring>
    </signal>

    <method name="GetChannelType">
      <tp:deprecated version="0.17.7">Use the ChannelType
        property if possible.</tp:deprecated>
      <arg direction="out" type="s"
        name="Channel_Type">
        <tp:docstring>The interface name</tp:docstring>
      </arg>
      <tp:docstring>
        Returns the interface name for the type of this channel.  Clients
        SHOULD use the <tp:member-ref>ChannelType</tp:member-ref> property
        instead, falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="GetHandle">
      <tp:deprecated version="0.17.7">Use the TargetHandleType
        and TargetHandle properties if possible.</tp:deprecated>
      <arg direction="out" type="u"
        name="Target_Handle_Type">
        <tp:docstring>
          The same as TargetHandleType.
        </tp:docstring>
      </arg>
      <arg direction="out" type="u" name="Target_Handle">
        <tp:docstring>
          The same as TargetHandle.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns the handle type and number if this channel represents a
        communication with a particular contact, room or server-stored list, or
        zero if it is transient and defined only by its contents. Clients
        SHOULD use the <tp:member-ref>TargetHandle</tp:member-ref> and
        <tp:member-ref>TargetHandleType</tp:member-ref> properties instead,
        falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <method name="GetInterfaces">
      <tp:deprecated version="0.17.7">Use the Interfaces
        property if possible.</tp:deprecated>
      <arg direction="out" type="as"
        name="Interfaces">
        <tp:docstring>
          An array of the D-Bus interface names
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the optional interfaces implemented by the channel.
        Clients SHOULD use the <tp:member-ref>Interfaces</tp:member-ref>
        property instead, falling back to this method only if necessary.

        <tp:rationale>
          The GetAll method lets clients retrieve all properties in one
          round-trip.
        </tp:rationale>
      </tp:docstring>
    </method>

    <property name="Requested"
      type="b" access="read">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>True if this channel was created in response to a local request,
          such as a call to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>
          or
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.Interface.Requests.CreateChannel</tp:dbus-ref>.</p>

        <tp:rationale>
          <p>The idea of this property is to distinguish between "incoming"
            and "outgoing" channels, in a way that doesn't break down when
            considering special cases like contact lists that are automatically
            created on connection to the server, or chatrooms that an
            IRC proxy/bouncer like irssi-proxy or bip was already in.</p>

          <p>The reason we want to make that distinction is that UIs for
            things that the user explicitly requested should start up
            automatically, whereas for incoming messages and VoIP calls we
            should first ask the user whether they want to open the messaging
            UI or accept the call.</p>
        </tp:rationale>

        <p>If the channel was not explicitly requested (even if it was
          created as a side-effect of a call to one of those functions,
          e.g. because joining a Tube in a MUC context on XMPP implies
          joining that MUC), then this property is false.</p>

        <p>For compatibility with older connection managers, clients SHOULD
          assume that this property is true if they see a channel announced
          by the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.NewChannel</tp:dbus-ref>
          signal with the suppress_handler parameter set to true.</p>

        <tp:rationale>
          <p>In a correct connection manager, the only way to get such a
            channel is to request it.</p>
        </tp:rationale>

        <p>Clients MAY additionally assume that this property is false
          if they see a channel announced by the NewChannel signal with the
          suppress_handler parameter set to false.</p>

        <tp:rationale>
          <p>This is more controversial, since it's possible to get that
            parameter set to false by requesting a channel. However, there's
            no good reason to do so, and we've deprecated this practice.</p>

          <p>In the particular case of the channel dispatcher, the only
            side-effect of wrongly thinking a channel is unrequested
            is likely to be that the user has to confirm that they want to
            use it, so it seems fairly harmless to assume in the channel
            dispatcher that channels with suppress_handler false are
            indeed unrequested.</p>
        </tp:rationale>

        <p>It does not make sense for this property to be in channel
          requests—it will always be true for channels returned by
          CreateChannel, and callers of EnsureChannel cannot control whether an
          existing channel was originally requested locally—so it MUST NOT
          be accepted.</p>
      </tp:docstring>
    </property>

    <property name="InitiatorHandle" type="u"
      access="read">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The contact who initiated the channel; for instance, the contact
          who invited the local user to a chatroom, or the contact who
          initiated a call.</p>

        <p>This does <em>not</em> necessarily represent the contact who
          created the underlying protocol-level construct. For instance, if
          Rob creates a chatroom, Will joins that chatroom, and Will invites Simon
          to join it, then Simon will see Will as the InitiatorHandle of the
          channel representing the chatroom.</p>

        <tp:rationale>
          <p>The room creator is generally a less useful piece of information
            than the inviter, is less likely to be available at invitation
            time (i.e. can't necessarily be an immutable property), and is
            less likely to be available at all. The creator of a chatroom
            is not currently available via Telepathy; if added in future, it
            is likely to be made available as a property on the Chatroom
            interface (<a
              href="http://bugs.freedesktop.org/show_bug.cgi?id=23151">bug 23151</a>).</p>
        </tp:rationale>

        <p>For channels requested by the
          local user, this MUST be the value of
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.SelfHandle</tp:dbus-ref>
          at the time the channel was created (i.e. not a channel-specific
          handle).</p>

        <tp:rationale>
          <p>On some protocols, the SelfHandle may change (as signalled by
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy">Connection.SelfHandleChanged</tp:dbus-ref>),
            but this property is immutable. Hence, locally-requested channels'
            InitiatorHandle and InitiatorID may not match the current
            SelfHandle; <tp:member-ref>Requested</tp:member-ref> can be used to
            determine whether the channel was created locally.</p>
        </tp:rationale>

        <p>For channels requested by a remote user, this MUST be their handle.
          If unavailable or not applicable, this MUST be 0 (for instance,
          contact lists are not really initiated by anyone in particular, and
          it's easy to imagine a protocol where chatroom invitations can be
          anonymous).</p>

        <p>For channels with the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel.Interface">Group</tp:dbus-ref>
          interface, this SHOULD be the same
          contact who is signalled as the "Actor" causing the self-handle
          to be placed in the local-pending set.</p>

        <p>This SHOULD NOT be a channel-specific handle, if possible.</p>

        <p>It does not make sense for this property to be in channel
          requests - the initiator will always be the local user - so it
          MUST NOT be accepted.</p>
      </tp:docstring>
    </property>

    <property name="InitiatorID" type="s" access="read">
      <tp:added version="0.17.13">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The string that would result from inspecting the
          <tp:member-ref>InitiatorHandle</tp:member-ref>
          property (i.e. the initiator's identifier in the IM protocol).</p>

        <tp:rationale>
          <p>The presence of this property avoids the following race
            condition:</p>

          <ul>
            <li>New StreamedMedia channel C is signalled with initiator
              handle I</li>
            <li>Client calls <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [I])</li>
            <li>Channel C closes, removing the last reference to handle I</li>
            <li><tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>(CONTACT,
              [I]) returns an error</li>
            <li>Client can indicate that a call was missed, but not who
              called!</li>
          </ul>
        </tp:rationale>

        <p>It does not make sense for this property to be in channel
          requests - the initiator will always be the local user - so it
          MUST NOT be accepted.</p>
      </tp:docstring>
    </property>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>All communication in the Telepathy framework is carried out via channel
    objects which are created and managed by connections. This interface must
    be implemented by all channel objects, along with one single channel type,
    such as <tp:dbus-ref
    namespace="org.freedesktop.Telepathy">Channel.Type.ContactList</tp:dbus-ref>
    which represents a list of people (such as a buddy list) or <tp:dbus-ref
    namespace="org.freedesktop.Telepathy">Channel.Type.Text</tp:dbus-ref> which
    represents a channel over which textual messages are sent and received.</p>

    <p>Each Channel's object path MUST start with the object path of
      its associated <tp:dbus-ref
      namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>, followed
      by '/'. There MAY be any number of additional object-path components,
      which clients MUST NOT attempt to parse.</p>

    <tp:rationale>
      <p>This ensures that Channel object paths are unique, even between
        Connections and CMs, because Connection object paths are
        guaranteed-unique via their link to the well-known bus name.</p>

      <p>If all connection managers in use are known to comply with at least
        spec version 0.17.10, then the Connection's object path can
        even be determined from the Channel's without any additional
        information, by taking the first 7 components.</p>
    </tp:rationale>

    <p>Each channel has a number of immutable properties (which cannot vary
      after the channel has been announced with <tp:dbus-ref
        namespace='ofdT.Connection.Interface.Requests'>NewChannels</tp:dbus-ref>),
      provided to clients in the
      <tp:dbus-ref namespace='ofdT.Client.Observer'>ObserveChannels</tp:dbus-ref>,
      <tp:dbus-ref namespace='ofdT.Client.Approver'>AddDispatchOperation</tp:dbus-ref> and
      <tp:dbus-ref namespace='ofdT.Client.Handler'>HandleChannels</tp:dbus-ref>
      methods to permit immediate identification of the channel. This interface
      contains immutable properties common to all channels. In brief:</p>

    <ul>
      <li><tp:member-ref>ChannelType</tp:member-ref> specifies the kind of
        communication carried out on this channel;</li>
      <li><tp:member-ref>TargetHandleType</tp:member-ref>,
        <tp:member-ref>TargetHandle</tp:member-ref> and
        <tp:member-ref>TargetID</tp:member-ref> specify the entity with which
        this channel communicates, such as the other party in a 1-1 call, or
        the name of a multi-user chat room;</li>
      <li><tp:member-ref>InitiatorHandle</tp:member-ref> and
        <tp:member-ref>InitiatorID</tp:member-ref> specify who created this
        channel;</li>
      <li><tp:member-ref>Requested</tp:member-ref> indicates whether the local
        user requested this channel, or whether it is an incoming call, a text
        conversation started by a remote contact, a chatroom invitation,
        etc.</li>
    </ul>

    <p>Other optional <tp:member-ref>Interfaces</tp:member-ref> can be
      implemented to indicate other available
      functionality, such as <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Channel.Interface.Group</tp:dbus-ref>
      if the channel contains a number of contacts, <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Channel.Interface.Password</tp:dbus-ref>
      to indicate that a channel may have a password set to require entry, and
      <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Channel.Interface.ChatState</tp:dbus-ref>
      for typing notifications. The interfaces implemented may not vary after
      the channel has been created. These other interfaces (along with the
      interface named by <tp:member-ref>ChannelType</tp:member-ref>) may
      themselves specify immutable properties to be announced up-front along
      with the properties on this interface.</p>

    <p>Some channels are “anonymous”, with
      <tp:member-ref>TargetHandleType</tp:member-ref> set to <code>None</code>,
      which indicates that the channel is defined by some other properties. For
      instance, transient ad-hoc chat rooms may be defined only by their members (as visible
      through the <tp:dbus-ref
        namespace="ofdT.Channel.Interface">Group</tp:dbus-ref>
      interface), and <tp:dbus-ref
        namespace='ofdT.Channel.Type'>ContactSearch</tp:dbus-ref>
      channels represent a single search attempt for a particular <tp:dbus-ref
        namespace='ofdT.Channel.Type.ContactSearch'>Server</tp:dbus-ref>.</p>

    <p>Specific connection manager implementations may implement channel types and
    interfaces which are not contained within this specification in order to
    support further functionality. To aid interoperability between client and
    connection manager implementations, the interfaces specified here should be
    used wherever applicable, and new interfaces made protocol-independent
    wherever possible. Because of the potential for 3rd party interfaces adding
    methods or signals with conflicting names, the D-Bus interface names should
    always be used to invoke methods and bind signals.</p>
    </tp:docstring>

    <tp:changed version="0.17.7">Previously we guaranteed that, for
      any handle type other than Handle_Type_None, and for any channel type
      and any handle, there would be no more than one channel with that
      combination of channel type, handle type and handle. This guarantee
      has now been removed in order to accommodate features like message
      threads.
    </tp:changed>

    <tp:changed version="0.17.10">Previously we did not explicitly
      guarantee that Channels' object paths had the Connection's object path
      as a prefix.
    </tp:changed>
  </interface>



  <!-- Channel_Type_Contact_List.xml -->
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Type.ContactList">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>
    <tp:requires interface="org.freedesktop.Telepathy.Channel.Interface.Group"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>A channel type for representing a list of people on the server which is
    not used for communication. This is intended for use with the interface
    <tp:dbus-ref
      namespace="org.freedesktop.Telepathy">Channel.Interface.Group</tp:dbus-ref>
    for managing buddy lists and privacy lists
    on the server. This channel type has no methods because all of the
    functionality it represents is available via the group interface.</p>

    <p>There are currently two types of contact list:
    HANDLE_TYPE_LIST is a &quot;magic&quot; server-defined list, and
    HANDLE_TYPE_GROUP is a user-defined contact group.</p>

    <p>For server-defined lists like the subscribe list, singleton instances
    of this channel type should be created by the connection manager at
    connection time if the list exists on the server, or may be requested
    by using the appropriate handle.  These handles can be obtained using
    <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    with a <tp:type>Handle_Type</tp:type> of HANDLE_TYPE_LIST and one of the
    following identifiers:</p>

    <ul>
      <li>subscribe - the group of contacts for whom you receive presence</li>
      <li>publish - the group of contacts who may receive your presence</li>
      <li>hide - a group of contacts who are on the publish list but are temporarily disallowed from receiving your presence</li>
      <li>allow - a group of contacts who may send you messages</li>
      <li>deny - a group of contacts who may not send you messages</li>
      <li>stored - on protocols where the user's contacts are stored, this
      contact list contains all stored contacts regardless of subscription
      status.</li>
    </ul>

    <p>A contact can be in several server-defined lists. All lists are optional
    to implement. If <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    or <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Connection">RequestChannel</tp:dbus-ref>
    for a particular contact list raises an error, this indicates that the
    connection manager makes no particular statement about the list's contents;
    clients MUST NOT consider this to be fatal.</p>

    <p>If a client wants to list all of a user's contacts, it is appropriate to
    use the union of the subscribe, publish and stored lists, including the
    local and remote pending members.</p>

    <p>For example in XMPP, contacts who have the subscription type "none",
    "from", "to" and "both" can be respectively in the lists:</p>

    <ul>
      <li>"none": stored</li>
      <li>"from": stored and publish</li>
      <li>"to": stored and subscribe</li>
      <li>"both": stored, publish and subscribe</li>
    </ul>

    <p>These contact list channels may not be closed.</p>

    <p>For user-defined contact groups, instances of this channel type should
    be created by the connection manager at connection time for each group
    that exists on the server. New, empty groups can be created by calling
    <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Connection">RequestHandles</tp:dbus-ref>
    with a <tp:type>Handle_Type</tp:type> of HANDLE_TYPE_GROUP and with the
    name set to the human-readable UTF-8 name of the group.</p>

    <p>User-defined groups may be deleted by calling <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref> on the
    channel, but only if
    the group is already empty. Closing a channel to a non-empty group is
    not allowed; its members must be set to the empty set first.</p>

    <p>On some protocols (e.g. XMPP) empty groups are not represented on the
    server, so disconnecting from the server and reconnecting might cause
    empty groups to vanish.</p>
    </tp:docstring>

  </interface>




  <!-- Channel_Interface_Group.xml -->
  <tp:copyright>Copyright © 2005-2009 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright © 2005-2009 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright © 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Channel.Interface.Group">
    <tp:requires interface="org.freedesktop.Telepathy.Channel"/>

    <tp:struct name="Local_Pending_Info" array-name="Local_Pending_Info_List">
      <tp:docstring>A structure representing a contact whose attempt to
        join a group is to be confirmed by the local user using
        <tp:member-ref>AddMembers</tp:member-ref>.</tp:docstring>
      <tp:member type="u" name="To_Be_Added">
        <tp:docstring>
          The contact to be added to the group
        </tp:docstring>
      </tp:member>
      <tp:member type="u" name="Actor">
        <tp:docstring>
          The contact requesting or causing the change
        </tp:docstring>
      </tp:member>
      <tp:member type="u" name="Reason">
        <tp:docstring>
          The reason for the change
        </tp:docstring>
      </tp:member>
      <tp:member type="s" name="Message">
        <tp:docstring>
          A human-readable message from the Actor, or an empty string
          if there is no message
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="AddMembers">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of contact handles to invite to the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Invite all the given contacts into the channel, or accept requests for
          channel membership for contacts on the pending local list.</p>

        <p>A message may be provided along with the request, which will be sent
        to the server if supported. See the CHANNEL_GROUP_FLAG_MESSAGE_ADD and
        CHANNEL_GROUP_FLAG_MESSAGE_ACCEPT
        <tp:member-ref>GroupFlags</tp:member-ref> to see in which cases this
        message should be provided.</p>

        <p>Attempting to add contacts who are already members is allowed;
          connection managers must silently accept this, without error.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
      </tp:possible-errors>
    </method>

    <method name="GetAllMembers">
      <tp:deprecated version="0.17.6">Use GetAll on the D-Bus
        Properties D-Bus interface to get properties including Members,
        RemotePendingMembers and LocalPendingMembers instead, falling back to
        this method and GetLocalPendingMembersWithInfo if necessary.
      </tp:deprecated>

      <arg direction="out" type="au"
        name="Members">
        <tp:docstring>
          array of handles of current members
        </tp:docstring>
      </arg>
      <arg direction="out" type="au"
        name="Local_Pending">
        <tp:docstring>
          array of handles of local pending members
        </tp:docstring>
      </arg>
      <arg direction="out" type="au"
        name="Remote_Pending">
        <tp:docstring>
          array of handles of remote pending members
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns arrays of all current, local and remote pending channel
        members.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:flags name="Channel_Group_Flags" value-prefix="Channel_Group_Flag" type="u">
      <tp:flag suffix="Can_Add" value="1">
        <tp:docstring>
            The <tp:member-ref>AddMembers</tp:member-ref> method can be used to
            add or invite members who are
            not already in the local pending list (which is always valid).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Can_Remove" value="2">
        <tp:docstring>
            The <tp:member-ref>RemoveMembers</tp:member-ref> method can be used
            to remove channel members
            (removing those on the pending local list is always valid).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Can_Rescind" value="4">
        <tp:docstring>
            The <tp:member-ref>RemoveMembers</tp:member-ref> method can be used
            on people on the remote
            pending list.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Add" value="8">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>AddMembers</tp:member-ref> on
            contacts who are not currently pending members.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Remove" value="16">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are currently channel members.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Accept" value="32">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>AddMembers</tp:member-ref> on
            contacts who are locally pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Reject" value="64">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are locally pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Rescind" value="128">
        <tp:docstring>
            A message may be sent to the server when calling
            <tp:member-ref>RemoveMembers</tp:member-ref> on
            contacts who are remote pending.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Channel_Specific_Handles" value="256">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The members of this group have handles which are specific to
            this channel, and are not valid as general-purpose handles on
            the connection. Depending on the channel, it may be possible to
            check the <tp:member-ref>HandleOwners</tp:member-ref> property or
            call <tp:member-ref>GetHandleOwners</tp:member-ref> to find the
            owners of these handles, which should be done if you wish to (e.g.)
            subscribe to the contact's presence.
          </p>

          <p>
            Connection managers must ensure that any given handle is not
            simultaneously a general-purpose handle and a channel-specific
            handle.
          </p>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Only_One_Group" value="512">
        <tp:docstring>
            Placing a contact in multiple groups of this type is not allowed
            and will raise NotAvailable (on services where contacts may only
            be in one user-defined group, user-defined groups will have
            this flag).
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Handle_Owners_Not_Available" value="1024">
        <tp:docstring>
          In rooms with channel specific handles (ie Channel_Specific_Handles
          flag is set), this flag indicates that no handle owners are
          available, apart from the owner of the
          <tp:member-ref>SelfHandle</tp:member-ref>.

          <tp:rationale>
            This used to be an important optimization to avoid repeated
            GetHandleOwners calls, before we introduced the
            <tp:member-ref>HandleOwners</tp:member-ref> property and
            <tp:member-ref>HandleOwnersChanged</tp:member-ref> signal.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Properties" value="2048">
        <tp:docstring>
          This flag indicates that all the properties introduced in
          specification 0.17.6 are fully supported.
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Members_Changed_Detailed" value="4096">
        <tp:docstring>
          Indicates that <tp:member-ref>MembersChangedDetailed</tp:member-ref>
          will be emitted for changes to this group's members in addition to
          <tp:member-ref>MembersChanged</tp:member-ref>.
          Clients can then connect to the former and ignore emission of the
          latter. This flag's state MUST NOT change over the lifetime of a
          channel.

          <tp:rationale>
            If it were allowed to change, client bindings would have to always
            connect to MembersChanged just in case the flag ever went away (and
            generally be unnecessarily complicated), which would mostly negate
            the point of having this flag in the first place.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
      <tp:flag suffix="Message_Depart" value="8192">
        <tp:added version="0.17.21"/>
        <tp:docstring>
          A message may be sent to the server when calling
          <tp:member-ref>RemoveMembers</tp:member-ref> on
          the <tp:member-ref>SelfHandle</tp:member-ref>.

          <tp:rationale>
            This would be set for XMPP Multi-User Chat or IRC channels,
            but not for a typical implementation of streamed media calls.
          </tp:rationale>
        </tp:docstring>
      </tp:flag>
    </tp:flags>

    <property name="GroupFlags" type="u"
      access="read">
      <tp:docstring>
        An integer representing the bitwise-OR of flags on this
        channel. The user interface can use this to present information about
        which operations are currently valid. Change notification is via
        the <tp:member-ref>GroupFlagsChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetGroupFlags if
        Channel_Group_Flag_Properties is not present.</tp:added>
    </property>

    <method name="GetGroupFlags">
      <arg direction="out" type="u"
        name="Group_Flags">
        <tp:docstring>
          The value of the GroupFlags property
        </tp:docstring>
      </arg>
      <tp:docstring>
        Returns the value of the <tp:member-ref>GroupFlags</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use GetAll on the D-Bus
        Properties D-Bus interface to get properties including GroupFlags
        instead, falling back to this method if necessary.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:mapping name="Handle_Owner_Map">
      <tp:docstring>
        A map from channel-specific handles to their owners.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetHandleOwners if
        Channel_Group_Flag_Properties is not present.</tp:added>

      <tp:member type="u" name="Channel_Specific_Handle">
        <tp:docstring>
          A nonzero channel-specific handle
        </tp:docstring>
      </tp:member>
      <tp:member type="u" name="Global_Handle">
        <tp:docstring>
          The global handle that owns the corresponding channel-specific
          handle, or 0 if this could not be determined
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <property name="HandleOwners" type="a{uu}"
      access="read">
      <tp:docstring>
        A map from channel-specific handles to their owners, including
        at least all of the channel-specific handles in this channel's members,
        local-pending or remote-pending sets as keys. Any handle not in
        the keys of this mapping is not channel-specific in this channel.
        Handles which are channel-specific, but for which the owner is
        unknown, MUST appear in this mapping with 0 as owner. Change
        notification is via the
        <tp:member-ref>HandleOwnersChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:added version="0.17.6"/>
    </property>

    <signal name="HandleOwnersChanged">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>HandleOwners</tp:member-ref>
        property changes.
      </tp:docstring>
      <tp:added version="0.17.6">This signal should not be relied on
        unless Channel_Group_Flag_Properties is present.</tp:added>
      <tp:deprecated version="0.23.4">Clients should listen to
        <tp:member-ref>HandleOwnersChangedDetailed</tp:member-ref> instead to
        get the new identifiers as well.
        </tp:deprecated>

      <arg name="Added" type="a{uu}">
        <tp:docstring>
          A map from channel-specific handles to their owners, in which the
          keys include all the handles that were added to the keys of the
          HandleOwners property, and all the handles in that property whose
          owner has changed
        </tp:docstring>
      </arg>
      <arg name="Removed" type="au">
        <tp:docstring>
          The channel-specific handles that were removed from the keys of the
          HandleOwners property, as a result of the contact leaving this group
          in a previous <tp:member-ref>MembersChanged</tp:member-ref> signal
        </tp:docstring>
      </arg>
    </signal>

    <signal name="HandleOwnersChangedDetailed">
      <tp:docstring>
        <p>Emitted whenever the <tp:member-ref>HandleOwners</tp:member-ref>
        property changes.</p>

        <p>Clients can assume this signal is emitted by the Connection Manager
        if the <tp:member-ref>MemberIdentifiers</tp:member-ref> property exists
        </p>
      </tp:docstring>
      <tp:added version="0.23.4"/>

      <arg name="Added" type="a{uu}">
        <tp:docstring>
          A map from channel-specific handles to their owners, in which the
          keys include all the handles that were added to the keys of the
          HandleOwners property, and all the handles in that property whose
          owner has changed
        </tp:docstring>
      </arg>
      <arg name="Removed" type="au">
        <tp:docstring>
          The channel-specific handles that were removed from the keys of the
          HandleOwners property, as a result of the contact leaving this group
          in a previous <tp:member-ref>MembersChanged</tp:member-ref> signal
        </tp:docstring>
      </arg>
      <arg name="Identifiers" type="a{us}">
        <tp:docstring>
          The string identifiers for handles mentioned in this signal, to
          give clients the minimal information necessary to create contacts
          without waiting for round-trips. Connection managers MUST include at
          least the identifiers for all handles in the Added map, and MAY
          include those from Removed array.
        </tp:docstring>
      </arg>
    </signal>

    <method name="GetHandleOwners">
      <arg direction="in" name="Handles" type="au">
        <tp:docstring>
          A list of integer handles representing members of the channel
        </tp:docstring>
      </arg>
      <arg direction="out" type="au" name="Owners">
        <tp:docstring>
          An array of integer handles representing the owner handles of
          the given room members, in the same order, or 0 if the
          owner is not available
        </tp:docstring>
      </arg>
      <tp:docstring>
        If the CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES flag is set on
        the channel, then the handles of the group members are specific
        to this channel, and are not meaningful in a connection-wide
        context such as contact lists. This method allows you to find
        the owner of the handle if it can be discovered in this channel,
        or 0 if the owner is not available.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Clients should use the
        HandleOwners property and HandleOwnersChanged signal if
        Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            This channel doesn't have the CHANNEL_SPECIFIC_HANDLES flag,
            so handles in this channel are globally meaningful and calling
            this method is not necessary
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            One of the given handles is not a member
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="GetLocalPendingMembers">
      <arg direction="out" type="au"
        name="Handles"/>
      <tp:docstring>
        Returns the To_Be_Added handle (only) for each structure in the
        <tp:member-ref>LocalPendingMembers</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the LocalPendingMembers
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <method name="GetLocalPendingMembersWithInfo">
      <tp:added version="0.15.0" />
      <tp:docstring>
        Returns the <tp:member-ref>LocalPendingMembers</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the LocalPendingMembers
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <arg direction="out" type="a(uuus)"
        name="Info">
        <tp:docstring>
          An array of structs containing:
          <ul>
            <li>
              A handle representing the contact requesting channel membership
            </li>
            <li>
              A handle representing the contact making the request, or 0 if
              unknown
            </li>
            <li>
              The reason for the request: one of the values of
              <tp:type>Channel_Group_Change_Reason</tp:type>
            </li>
            <li>
              A string message containing the reason for the request if any (or
              blank if none)
            </li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <property name="LocalPendingMembers" access="read"
      type="a(uuus)">
      <tp:docstring>
        An array of structs containing handles representing contacts
        requesting channel membership and awaiting local approval with
        <tp:member-ref>AddMembers</tp:member-ref>.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties is
        not present, clients should fall back to using the
        deprecated GetLocalPendingMembersWithInfo method, or fall back
        from that to the deprecated GetAllMembers method.</tp:added>
    </property>

    <property name="Members"
      access="read" type="au">
      <tp:docstring>
        The members of this channel.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties
        is not set, fall back to calling GetAllMembers.</tp:added>
    </property>

    <method name="GetMembers">
      <arg direction="out" type="au"
        name="Handles"/>
      <tp:docstring>
        Returns the <tp:member-ref>Members</tp:member-ref> property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the Members
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <property name="RemotePendingMembers" access="read" type="au">
      <tp:docstring>
        An array of handles representing contacts who have been
        invited to the channel and are awaiting remote approval.
      </tp:docstring>
      <tp:added version="0.17.6">If Channel_Group_Flag_Properties
        is not set, fall back to calling GetAllMembers.</tp:added>
    </property>

    <method name="GetRemotePendingMembers">
      <arg direction="out" type="au"
        name="Handles"/>
      <tp:docstring>
        Returns an array of handles representing contacts who have been
        invited to the channel and are awaiting remote approval.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Use the
        <tp:member-ref>RemotePendingMembers</tp:member-ref>
        property, if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <signal name="SelfHandleChanged">
      <tp:docstring>
        Emitted whenever the <tp:member-ref>SelfHandle</tp:member-ref> property
        changes.
      </tp:docstring>
      <tp:added version="0.17.6">This signal should not be relied on
        unless Channel_Group_Flag_Properties is present.</tp:added>
      <tp:deprecated version="0.23.4">Clients should listen to
        <tp:member-ref>SelfContactChanged</tp:member-ref> instead to get the new
        identifier as well.
        </tp:deprecated>

      <arg type="u" name="Self_Handle">
        <tp:docstring>
          The new value of the SelfHandle property.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="SelfContactChanged">
      <tp:docstring>
        <p>Emitted whenever the <tp:member-ref>SelfHandle</tp:member-ref> property
        changes.</p>

        <p>Clients can assume this signal is emitted by the Connection Manager
        if the <tp:member-ref>MemberIdentifiers</tp:member-ref> property exists.
        </p>
      </tp:docstring>
      <tp:added version="0.23.4"/>

      <arg type="u" name="Self_Handle">
        <tp:docstring>
          The new value of the SelfHandle property.
        </tp:docstring>
      </arg>
      <arg type="s" name="Self_ID">
        <tp:docstring>
          The new value of the SelfHandle property's identifier.
        </tp:docstring>
      </arg>
    </signal>

    <property name="SelfHandle" type="u"
      access="read">
      <tp:docstring>
        The handle for the user on this channel (which can also be a
        local or remote pending member), or 0 if the user is not a member at
        all (which is likely to be the case, for instance, on <tp:dbus-ref
        namespace="org.freedesktop.Telepathy.Channel.Type">ContactList</tp:dbus-ref>
        channels). Note that this is different from the result of
        <tp:dbus-ref
        namespace="org.freedesktop.Telepathy">Connection.GetSelfHandle</tp:dbus-ref>
        on some protocols, so the value of this handle should
        always be used with the methods of this interface.
      </tp:docstring>
      <tp:added version="0.17.6">For backwards compatibility,
        clients should fall back to calling GetSelfHandle if
        Channel_Group_Flag_Properties is not present.</tp:added>
    </property>

    <property name="MemberIdentifiers" type="a{us}"
      access="read">
      <tp:docstring>
        The string identifiers for handles mentioned in this channel, to
        give clients the minimal information necessary to create contacts
        without waiting for round-trips. Connection managers MUST include at
        least the identifiers for
        <tp:member-ref>SelfHandle</tp:member-ref>,
        <tp:member-ref>Members</tp:member-ref>,
        <tp:member-ref>LocalPendingMembers</tp:member-ref> (and their actors if
        any),
        <tp:member-ref>RemotePendingMembers</tp:member-ref> and
        <tp:member-ref>HandleOwners</tp:member-ref>.
      </tp:docstring>
      <tp:added version="0.23.4"/>
    </property>

    <method name="GetSelfHandle">
      <arg direction="out" type="u"
        name="Self_Handle"/>
      <tp:docstring>
        Returns the value of the <tp:member-ref>SelfHandle</tp:member-ref>
        property.
      </tp:docstring>
      <tp:deprecated version="0.17.6">Clients should retrieve the
        SelfHandle property using GetAll instead,
        if Channel_Group_Flag_Properties is present.</tp:deprecated>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <signal name="GroupFlagsChanged">
      <arg name="Added" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been set
        </tp:docstring>
      </arg>
      <arg name="Removed" type="u">
        <tp:docstring>
          A bitwise OR of the flags which have been cleared
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the flags as returned by
        <tp:member-ref>GetGroupFlags</tp:member-ref> are changed.
        The user interface should be updated as appropriate.
      </tp:docstring>
    </signal>

    <tp:enum name="Channel_Group_Change_Reason" type="u">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The reason for a set of handles to move to one of
          <tp:member-ref>Members</tp:member-ref>,
          <tp:member-ref>LocalPendingMembers</tp:member-ref> or
          <tp:member-ref>RemotePendingMembers</tp:member-ref>, or to be removed
          from the group. A client may supply a reason when attempting to
          remove members from a group with
          <tp:member-ref>RemoveMembersWithReason</tp:member-ref>, and reasons
          are supplied by the CM when emitting
          <tp:member-ref>MembersChanged</tp:member-ref> and
          <tp:member-ref>MembersChangedDetailed</tp:member-ref>. Some reason
          codes have different meanings depending on the <var>Actor</var> in a
          MembersChanged signal.</p>
      </tp:docstring>

      <tp:enumvalue suffix="None" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>No reason was provided for this change.</p>

          <p>In particular, this reason SHOULD be used when representing
            users joining a named chatroom in the usual way, users leaving
            a chatroom by their own request, and normal termination of a
            StreamedMedia call by the remote user.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed from
            a group for this reason and the actor is not the SelfHandle, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Terminated</code>.</p>

          <p>If the SelfHandle is removed from a group for this reason and
            the actor is also the SelfHandle, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Cancelled</code>.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Offline" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a user going offline. Also used when
            user is already offline, but this wasn't known previously.</p>

          <p>If a one-to-one <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called is offline, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason Offline.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If a handle is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Offline</code>.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Kicked" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a kick operation.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Channel.Kicked</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Busy" value="3">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a busy indication.</p>

          <p>If a one-to-one <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called is busy, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason Busy.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Busy</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invited" value="4">
        <tp:docstring>
          The change is due to an invitation. This reason SHOULD only be used
          when contacts are added to the remote-pending set (to indicate that
          the contact has been invited) or to the members (to indicate that
          the contact has accepted the invitation).

          <tp:rationale>
            Otherwise, what would it mean?
          </tp:rationale>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Banned" value="5">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is due to a kick+ban operation.</p>

          <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is removed
            from a group for this reason, the equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.Channel.Banned</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Error" value="6">
        <tp:docstring>
            The change is due to an error occurring.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Invalid_Contact" value="7">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because the requested contact does not exist.</p>

          <p>For instance, if the user invites a nonexistent contact to a
            chatroom or attempts to call a nonexistent contact, this could
            be indicated by the CM adding that contact's handle to
            remote-pending for reason None or Invited, then removing it for
            reason Invalid_Contact. In the case of a 1-1 StreamedMedia
            call, the CM SHOULD remove the self handle from the Group
            in the same signal.</p>

          <tp:rationale>
            For 1-1 calls, the call terminates as a result of removing the
            remote contact, so the SelfHandle should be removed at the same
            time as the remote contact and for the same reason.
          </tp:rationale>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.DoesNotExist</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="No_Answer" value="8">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because the requested contact did not respond.</p>

          <p>If a one-to-one <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
            call fails because the contact being called did not respond, or the
            local user did not respond to an incoming call, the
            connection manager SHOULD indicate this by removing both the
            <tp:member-ref>SelfHandle</tp:member-ref> and the other contact's
            handle from the Group interface with reason No_Answer.</p>

          <tp:rationale>
            Documenting existing practice.
          </tp:rationale>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.NoAnswer</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Renamed" value="9">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because a contact's unique identifier changed.
          There must be exactly one handle in the removed set and exactly
          one handle in one of the added sets. The <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Renaming">Renamed</tp:dbus-ref>
          signal on the
          <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface">Renaming</tp:dbus-ref>
          interface will have been emitted for the same handles,
          shortly before this <tp:member-ref>MembersChanged</tp:member-ref> signal is emitted.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Permission_Denied" value="10">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The change is because there was no permission to contact the
            requested handle.</p>

          <p>If a contact is removed from a group for this reason, the
            equivalent D-Bus error is
            <code>org.freedesktop.Telepathy.Error.PermissionDenied</code>.
          </p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Separated" value="11">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If members are removed with this reason code, the change is
            because the group has split into unconnected parts which can only
            communicate within themselves (e.g. netsplits on IRC use this
            reason code).
          </p>
          <p>
            If members are added with this reason code, the change is because
            unconnected parts of the group have rejoined. If this channel
            carries messages (e.g. <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
            or <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">Tubes</tp:dbus-ref>
            channels) applications must
            assume that the contacts being added are likely to have missed some
            messages as a result of the separation, and that the contacts
            in the group are likely to have missed some messages from the
            contacts being added.
          </p>
          <p>Note that from the added contacts' perspective, they have been
            in the group all along, and the contacts we indicate to be in
            the group (including the local user) have just rejoined
            the group with reason Separated. Application protocols in Tubes
            should be prepared to cope with this situation.
          </p>

          <p>The <tp:member-ref>SelfHandle</tp:member-ref> SHOULD NOT be
            removed from channels with this reason.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <signal name="MembersChanged">
      <arg name="Message" type="s">
        <tp:docstring>
          A string message from the server, or blank if not
        </tp:docstring>
      </arg>
      <arg name="Added" type="au">
        <tp:docstring>
          A list of members added to the channel
        </tp:docstring>
      </arg>
      <arg name="Removed" type="au">
        <tp:docstring>
          A list of members removed from the channel
        </tp:docstring>
      </arg>
      <arg name="Local_Pending" type="au">
        <tp:docstring>
          A list of members who are pending local approval
        </tp:docstring>
      </arg>
      <arg name="Remote_Pending" type="au">
        <tp:docstring>
          A list of members who are pending remote approval
        </tp:docstring>
      </arg>
      <arg name="Actor" type="u">
        <tp:docstring>
          The contact handle of the person who made the change, or 0
          if not known
        </tp:docstring>
      </arg>
      <arg name="Reason" type="u">
        <tp:docstring>
          A reason for the change
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when contacts join any of the three lists (members, local
          pending or remote pending) or when they leave any of the three lists.
          There may also be a message from the server regarding this change,
          which may be displayed to the user if desired.</p>

        <p>All channel-specific handles that are mentioned in this signal
          MUST be represented in the value of the
          <tp:member-ref>HandleOwners</tp:member-ref> property.
          In practice, this will mean that
          <tp:member-ref>HandleOwnersChanged</tp:member-ref> is
          emitted <em>before</em> emitting a MembersChanged signal in which
          channel-specific handles are added, but that it is emitted
          <em>after</em> emitting a MembersChanged signal in which
          channel-specific handles are removed.</p>

        <p>See <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          for an overview of how group state changes are used to indicate the
          progress of a call.</p>
      </tp:docstring>
    </signal>

    <tp:mapping name="Handle_Identifier_Map">
      <tp:docstring>
        A map from handles to the corresponding normalized string identifier.
      </tp:docstring>
      <tp:added version="0.17.17"/>

      <tp:member type="u" name="Handle">
        <tp:docstring>
          A nonzero handle
        </tp:docstring>
      </tp:member>
      <tp:member type="s" name="Identifier">
        <tp:docstring>
          The same string that would be returned by <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection">InspectHandles</tp:dbus-ref>
          for this handle.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <signal name="MembersChangedDetailed">
      <arg name="Added" type="au">
        <tp:docstring>
          A list of members added to the channel
        </tp:docstring>
      </arg>
      <arg name="Removed" type="au">
        <tp:docstring>
          A list of members removed from the channel
        </tp:docstring>
      </arg>
      <arg name="Local_Pending" type="au">
        <tp:docstring>
          A list of members who are pending local approval
        </tp:docstring>
      </arg>
      <arg name="Remote_Pending" type="au">
        <tp:docstring>
          A list of members who are pending remote approval
        </tp:docstring>
      </arg>
      <arg name="Details" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Information about the change, which may include the following
            well-known keys:</p>

          <dl>
            <dt>actor (u — <tp:type>Contact_Handle</tp:type>)</dt>
            <dd>The contact handle of the person who made the change; 0 or
              omitted if unknown or not applicable.</dd>

            <dt>change-reason (u — <tp:type>Channel_Group_Change_Reason</tp:type>)</dt>
            <dd>A reason for the change.</dd>

            <dt>contact-ids (a{us} — <tp:type>Handle_Identifier_Map</tp:type>)</dt>
            <dd>
              <p>The string identifiers for handles mentioned in this signal, to
              give clients the minimal information necessary to react to the
              event without waiting for round-trips.  Connection managers
              SHOULD include the identifiers for members added to the group and
              for the actor (if any); they MAY omit the identifiers for handles
              which have been removed from the group.</p>

              <tp:rationale>
                <p>On IRC, an event such as a netsplit could cause the vast
                majority of a channel to leave.  Given that clients should
                already know the identifiers of a channel's members, including
                potentially hundreds of strings in the netsplit signal is
                unnecessary.</p>
              </tp:rationale>

              <p>Clients MUST NOT assume that the presence or absence of a
                handle in this mapping is meaningful. This mapping is merely
                an optimization for round-trip reduction, and connection
                managers MAY add additional handles, omit some handles, or
                omit the mapping completely.</p>
            </dd>

            <dt>message (s)</dt>
            <dd>A string message from the server regarding the change</dd>

            <dt>error (s — <tp:type>DBus_Error_Name</tp:type>)</dt>
            <dd>A (possibly implementation-specific) DBus error describing the
              change, providing more specific information than the
              <tp:type>Channel_Group_Change_Reason</tp:type> enum allows. This
              MUST only be present if it is strictly more informative than
              'change-reason'; if present, 'change-reason' MUST be set to the
              closest available reason.

              <tp:rationale>
                A SIP connection manager might want to signal "402 Payment
                required" as something more specific than Error or
                Permission_Denied so that a SIP-aware UI could handle it
                specially; including a namespaced error permits this to be done
                without <tp:type>Channel_Group_Change_Reason</tp:type> being
                extended to encompass every error any CM ever wants to report.
              </tp:rationale>
            </dd>

            <dt>debug-message (s)</dt>
            <dd>Debugging information on the change. SHOULD NOT be shown to
              users in normal circumstances.</dd>
          </dl>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Emitted when contacts join any of the three lists (members, local
          pending or remote pending) or when they leave any of the three
          lists. This signal provides a superset of the information provided by
          <tp:member-ref>MembersChanged</tp:member-ref>;
          if the channel's <tp:member-ref>GroupFlags</tp:member-ref>
          contains Members_Changed_Detailed, then clients may listen exclusively
          to this signal in preference to that signal.</p>

        <p>All channel-specific handles that are mentioned in this signal
          MUST be represented in the value of the
          <tp:member-ref>HandleOwners</tp:member-ref> property.  In practice,
          this will mean that
          <tp:member-ref>HandleOwnersChanged</tp:member-ref> is emitted
          <em>before</em> emitting a MembersChangedDetailed signal in which
          channel-specific handles are added, but that it is emitted
          <em>after</em> emitting a MembersChangedDetailed signal in which
          channel-specific handles are removed.</p>

        <p>See <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          for an overview of how group state changes are used to indicate the
          progress of a call.</p>
      </tp:docstring>
      <tp:added version="0.17.16"/>
    </signal>

    <method name="RemoveMembers">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of contact handles to remove from the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Requests the removal of contacts from a channel, reject their
          request for channel membership on the pending local list, or
          rescind their invitation on the pending remote list.</p>

        <p>If the <tp:member-ref>SelfHandle</tp:member-ref> is in a Group,
          it can be removed via this method, in order to leave the group
          gracefully. This is the recommended way to leave a chatroom, close
          or reject a <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          call, and so on.</p>

        <p>Accordingly, connection managers SHOULD support
          doing this, regardless of the value of
          <tp:member-ref>GroupFlags</tp:member-ref>.
          If doing so fails with PermissionDenied, this is considered to a bug
          in the connection manager, but clients MUST recover by falling back
          to closing the channel with the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">Close</tp:dbus-ref>
          method.</p>

        <p>Removing any contact from the local pending list is always
          allowed. Removing contacts other than the
          <tp:member-ref>SelfHandle</tp:member-ref> from the channel's members
          is allowed if and only if Channel_Group_Flag_Can_Remove is in the
          <tp:member-ref>GroupFlags</tp:member-ref>,
          while removing contacts other than the
          <tp:member-ref>SelfHandle</tp:member-ref> from the remote pending list
          is allowed if and only if Channel_Group_Flag_Can_Rescind is in the
          <tp:member-ref>GroupFlags</tp:member-ref>.</p>

        <p>A message may be provided along with the request, which will be
          sent to the server if supported. See the
          Channel_Group_Flag_Message_Remove,
          Channel_Group_Flag_Message_Depart,
          Channel_Group_Flag_Message_Reject and
          Channel_Group_Flag_Message_Rescind
          <tp:member-ref>GroupFlags</tp:member-ref> to see in which cases this
          message should be provided.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="RemoveMembersWithReason">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of contact handles to remove from the channel
        </tp:docstring>
      </arg>
      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          A string message, which can be blank if desired
        </tp:docstring>
      </arg>
      <arg direction="in" name="Reason" type="u">
        <tp:docstring>
          A reason for the change
        </tp:docstring>
      </arg>
      <tp:docstring>
        As <tp:member-ref>RemoveMembers</tp:member-ref>, but a reason code may
        be provided where
        appropriate. The reason code may be ignored if the underlying
        protocol is unable to represent the given reason.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The provided reason code was invalid.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Interface for channels which have multiple members, and where the members
    of the channel can change during its lifetime. Your presence in the channel
    cannot be presumed by the channel's existence (for example, a channel you
    may request membership of but your request may not be granted).</p>

  <p>This interface implements three lists: a list of current members
    (<tp:member-ref>Members</tp:member-ref>), and two lists of local pending
    and remote pending members
    (<tp:member-ref>LocalPendingMembers</tp:member-ref> and
    <tp:member-ref>RemotePendingMembers</tp:member-ref>, respectively).
    Contacts on the remote
    pending list have been invited to the channel, but the remote user has not
    accepted the invitation. Contacts on the local pending list have requested
    membership of the channel, but the local user of the framework must accept
    their request before they may join. A single contact should never appear on
    more than one of the three lists. The lists are empty when the channel is
    created, and the <tp:member-ref>MembersChanged</tp:member-ref> signal
    (and, if the channel's <tp:member-ref>GroupFlags</tp:member-ref> contains
    Members_Changed_Detailed, the
    <tp:member-ref>MembersChangedDetailed</tp:member-ref> signal)
    should be emitted when information
    is retrieved from the server, or changes occur.</p>

  <p>If the <tp:member-ref>MembersChanged</tp:member-ref> or
    <tp:member-ref>MembersChangedDetailed</tp:member-ref> signal indicates
    that the <tp:member-ref>SelfHandle</tp:member-ref> has been removed from
    the channel, and the channel subsequently emits <tp:dbus-ref
      namespace="org.freedesktop.Telepathy.Channel">Closed</tp:dbus-ref>,
    clients SHOULD consider the details given in the MembersChanged or
    MembersChangedDetailed signal to be the reason why the channel closed.</p>

  <p>Addition of members to the channel may be requested by using
    <tp:member-ref>AddMembers</tp:member-ref>. If
    remote acknowledgement is required, use of the AddMembers method will cause
    users to appear on the remote pending list. If no acknowledgement is
    required, AddMembers will add contacts to the member list directly.  If a
    contact is awaiting authorisation on the local pending list, AddMembers
    will grant their membership request.</p>

  <p>Removal of contacts from the channel may be requested by using
    <tp:member-ref>RemoveMembers</tp:member-ref>.  If a contact is awaiting
    authorisation on the local pending
    list, RemoveMembers will refuse their membership request. If a contact is
    on the remote pending list but has not yet accepted the invitation,
    RemoveMembers will rescind the request if possible.</p>

  <p>It should not be presumed that the requester of a channel implementing this
    interface is immediately granted membership, or indeed that they are a
    member at all, unless they appear in the list. They may, for instance,
    be placed into the remote pending list until a connection has been
    established or the request acknowledged remotely.</p>

  <p>If the local user joins a Group channel whose members or other state
    cannot be discovered until the user joins (e.g. many chat room
    implementations), the connection manager should ensure that the channel
    is, as far as possible, in a consistent state before adding the local
    contact to the members set; until this happens, the local contact should
    be in the remote-pending set. For instance, if the connection manager
    queries the server to find out the initial members list for the
    channel, it should leave the local contact in the remote-pending set
    until it has finished receiving the initial members list.
  </p>

  <p>If the protocol provides no reliable way to tell whether the complete
    initial members list has been received yet, the connection manager
    should make a best-effort attempt to wait for the full list
    (in the worst case, waiting for a suitable arbitrary timeout)
    rather than requiring user interfaces to do so on its behalf.</p>
    </tp:docstring>
  </interface>




  <!-- Connection_Interface_Requests.xml -->
  <tp:copyright>Copyright (C) 2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2008 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Connection.Interface.Requests">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.11">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An enhanced version of the Telepathy connection interface, which can
        represent bundles of channels that should be dispatched together, and
        does not assume any particular properties by which channels are
        uniquely identifiable.</p>

      <p>If this interface is implemented on a connection, then
        <tp:member-ref>NewChannels</tp:member-ref> MUST be emitted for
        all new channels, even those created with <tp:dbus-ref
          namespace="org.freedesktop.Telepathy.Connection"
        >RequestChannel</tp:dbus-ref>.</p>
    </tp:docstring>

    <tp:struct name="Channel_Details" array-name="Channel_Details_List">
      <tp:added version="0.17.11">(as stable API)</tp:added>

      <tp:docstring>
        Enough details of a channel that clients can work out how to dispatch
        or handle it.
      </tp:docstring>

      <tp:member name="Channel" type="o">
        <tp:docstring>
          The object path of the channel.
        </tp:docstring>
      </tp:member>

      <tp:member name="Properties" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel.</p>

          <p>Connection managers MUST NOT include properties in this mapping
            if their values can change. Clients MUST ignore properties
            that appear in this mapping if their values can change.</p>

          <tp:rationale>
            <p>If properties that could change were included, the following
              race condition would be likely to exist in some cases:</p>

            <ul>
              <li>NewChannels or Get("Channels") includes a property P with
                value V1</li>
              <li>Client creates a proxy object for the channel</li>
              <li>The value of P changes to V2</li>
              <li>Client connects to PChanged signal</li>
              <li>Client should call Get("P") or GetAll here, to avoid the
                race, but client's author has forgotten to do so</li>
              <li>Proxy object thinks P == V1, but actually P == V2</li>
            </ul>

            <p>We've taken the opportunity to make the API encourage the
              client author to get it right. Where possible, we intend that
              properties whose value will be used in channel dispatching
              or other "early" processing will be defined so that they are
              immutable (can never change).</p>
          </tp:rationale>

          <p>Each dictionary MUST contain the keys
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.ChannelType</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandleType</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandle</tp:dbus-ref>,
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetID</tp:dbus-ref>
            and
            <tp:dbus-ref>org.freedesktop.Telepathy.Channel.Requested</tp:dbus-ref>.
          </p>

          <tp:rationale>
            <p>We expect these to be crucial to the channel-dispatching
              process.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="CreateChannel">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:changed version="0.17.14">It is now guaranteed that
        CreateChannel returns the channel before NewChannels announces it
        (the reverse was previously guaranteed).</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that an entirely new channel is created.</p>

        <tp:rationale>
          <p>There is deliberately no flag corresponding to the
            suppress_handler argument to
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>,
            because passing a FALSE value for that argument is deprecated.
            Requests made using this interface always behave as though
            suppress_handler was TRUE.</p>
        </tp:rationale>

      </tp:docstring>

      <arg direction="in" name="Request" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties, which MUST include
            <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel">ChannelType</tp:dbus-ref>.
            Some properties
            are defined such that only an exact match makes sense, and
            connection managers MUST NOT satisfy a request with a channel
            where that property does not match; some properties are defined
            such that the connection manager MAY treat the request as merely
            a hint, and make a best-effort attempt to satisfy it. This is
            documented separately for each property.</p>

          <p>If this dictionary contains a property whose semantics
            are not known to the connection manager, this method MUST fail
            without side-effects (in particular it must not create a new
            channel).</p>

          <tp:rationale>
            <p>This is necessary if we want to be able to invent properties
              in future that, when used in a request, are hard requirements
              rather than just hints. A connection manager that did not know
              the semantics of those properties could incorrectly return a
              new channel that did not satisfy the requirements.</p>
          </tp:rationale>

          <p>The connection manager MUST NOT respond successfully,
            and SHOULD NOT create a new channel or cause any other
            side-effects, unless it can create a new channel that satisfies
            the client's requirements.</p>

          <p>Properties that will be set by this argument need not have write
            access after the channel has been created - indeed, it is
            expected that most will be read-only.</p>
        </tp:docstring>
      </arg>

      <arg name="Channel" direction="out" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The Channel object, which MUST NOT be signalled with
            <tp:member-ref>NewChannels</tp:member-ref> until after this method
            returns.</p>

          <tp:rationale>
            <p>This allows the requester to alter its handling of
              NewChannels by knowing whether one of the channels satisfied
              a request it made.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg name="Properties" direction="out" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel that was produced, equivalent to
            the properties in <tp:type>Channel_Details</tp:type>.
            Connection managers MUST NOT include properties here whose
            values can change, for the same reasons as in
            <tp:type>Channel_Details</tp:type>.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The channel request was one that can never succeed,
            such as requesting an unsupported channel type, or requesting
            a channel type which this connection manager does not support with
            the given target handle type.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            An invalid handle was requested as the value of a property whose
            value is a handle (like
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetHandle</tp:dbus-ref>),
            or a syntactically invalid identifier was requested as the value
            of a property whose value is the string corresponding to a handle
            (like <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Channel.TargetID</tp:dbus-ref>).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The request matched the fixed properties of a
            <tp:type>Requestable_Channel_Class</tp:type> in
            <tp:member-ref>RequestableChannelClasses</tp:member-ref>, but the
            allowed arguments did not make sense; for example, a <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">RoomList</tp:dbus-ref>
            was requested, but the <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type.RoomList">Server</tp:dbus-ref>
            property provided was not a valid DNS name.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because the requested
            contact is using a client that lacks a particular feature.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Offline">
          <tp:docstring>
            The requested channel cannot be created because the target is
            offline.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
            <p>The requested channel cannot be created, but in
              principle, a similar request might succeed in future.
              For instance, this might be because:</p>

            <ul>
              <li>a channel matching the request already exists and the
                protocol requires that only one such channel can exist at a
                time</li>
              <li>a channel matching the request has already been requested
                (by a previous call to CreateChannel,
                <tp:member-ref>EnsureChannel</tp:member-ref>,
                <tp:dbus-ref
                  namespace="org.freedesktop.Telepathy">Connection.RequestChannel</tp:dbus-ref>
                or similar) and the protocol requires that only one such
                channel can exist at a time</li>
            </ul>
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <method name="EnsureChannel">
      <tp:added version="0.17.12"/>
      <tp:changed version="0.17.14">It is now guaranteed that if
        the channel was created by this call to EnsureChannel, it's returned
        before NewChannels announces it (the reverse was previously
        guaranteed).</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that channels are ensured to exist.</p>

        <tp:rationale>
          <p>The connection manager is in the best position to determine which
            existing channels could satisfy which requests.</p>
        </tp:rationale>

      </tp:docstring>

      <arg direction="in" name="Request" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A dictionary containing desirable properties, with the same
            semantics as the corresponding parameter to
            <tp:member-ref>CreateChannel</tp:member-ref>.</p>
        </tp:docstring>
      </arg>

      <arg name="Yours" direction="out" type="b">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>If false, the caller of EnsureChannel MUST assume that some
            other process is handling this channel; if true, the caller of
            EnsureChannel SHOULD handle it themselves or delegate it to another
            client.</p>

          <p>If the creation of a channel makes several calls to EnsureChannel
            (and no other requests) successful, exactly one of those calls MUST
            return a true value for this argument.</p>

          <p>If the creation of a channel makes other requests successful,
            the value returned for this argument MUST be such that exactly
            one of the clients making requests ends up responsible for the
            channel. In particular, if
            <tp:member-ref>CreateChannel</tp:member-ref> returns a channel
            <em>C</em>, any EnsureChannel calls that also return <em>C</em>
            MUST return a false value for this argument.</p>
        </tp:docstring>
      </arg>

      <arg name="Channel" direction="out" type="o">
        <tp:docstring>
          The Channel object. If it was created as a result of this method
          call, it MUST NOT be signalled by
          <tp:member-ref>NewChannels</tp:member-ref> until after this method
          returns.

          <tp:rationale>
            <p>This allows the requester to alter its handling of
              NewChannels by knowing whether one of the channels satisfied
              a request it made.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg name="Properties" direction="out" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties of the channel that was produced, equivalent to
            the properties in <tp:type>Channel_Details</tp:type>.
            Connection managers MUST NOT include properties here whose
            values can change, for the same reasons as in
            <tp:type>Channel_Details</tp:type>.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotImplemented">
          <tp:docstring>
            The channel request was one that can never succeed,
            such as requesting an unsupported channel type, or requesting
            a channel type which this connection manager does not support with
            the given target handle type.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            An invalid handle was requested as the value of a property whose
            value is a handle (like
            <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.TargetHandle</tp:dbus-ref>),
            or a syntactically invalid identifier was requested as the value
            of a property whose value is the string corresponding to a handle
            (like <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Channel.TargetID</tp:dbus-ref>).
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            The request matched the fixed properties of a
            <tp:type>Requestable_Channel_Class</tp:type> in
            <tp:member-ref>RequestableChannelClasses</tp:member-ref>, but the
            allowed arguments did not make sense; for example, a <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">RoomList</tp:dbus-ref>
            was requested, but the <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type.RoomList">Server</tp:dbus-ref>
            property provided was not a valid DNS name.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotCapable">
          <tp:docstring>
            The requested channel cannot be created because the requested
            contact is using a client that lacks a particular feature.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Offline">
          <tp:docstring>
            The requested channel cannot be created because the target is
            offline.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The requested channel cannot be created, but in
            principle, a similar request might succeed in future.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Banned"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.Full"/>
        <tp:error name="org.freedesktop.Telepathy.Error.Channel.InviteOnly"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <signal name="NewChannels">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:changed version="0.17.14">Added a guarantee of ordering
        relative to NewChannel</tp:changed>

      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>New channels have been created. The connection manager SHOULD emit
          a single signal for any group of closely related channels that are
          created at the same time, so that the channel dispatcher can try to
          dispatch them to a handler as a unit.</p>

        <p>In particular, if additional channels are created as a side-effect
          of a call to <tp:member-ref>CreateChannel</tp:member-ref>,
          these channels SHOULD appear in the same NewChannels signal as
          the channel that satisfies the request.</p>

        <tp:rationale>
          <p>Joining a MUC Tube in XMPP requires joining the corresponding
            MUC (chatroom), so a <tp:dbus-ref
              namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
            channel can be created as a side-effect.</p>
        </tp:rationale>

        <p>Every time NewChannels is emitted, it MUST be followed by
          a <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Connection.NewChannel</tp:dbus-ref>
          signal for each channel.</p>

        <tp:rationale>
          <p>The double signal emission is for the benefit of older Telepathy
            clients, which won't be listening for NewChannels.</p>

          <p>The more informative NewChannels signal comes first so that
            clients that did not examine the connection to find
            out whether Requests is supported will see the more informative
            signal for each channel first, and then ignore the less
            informative signal because it announces a new channel of which
            they are already aware.</p>
        </tp:rationale>
      </tp:docstring>

      <arg name="Channels" type="a(oa{sv})">
        <tp:docstring>
          The channels and their details. All channels that are signalled
          together like this MUST have the same
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.FUTURE">Bundle</tp:dbus-ref>
          property, which may
          either refer to an existing bundle, or establish a new bundle.
        </tp:docstring>
      </arg>
    </signal>

    <property name="Channels"
      type="a(oa{sv})" access="read">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring>
        A list of all the channels which currently exist on this connection.
        Change notification is via the
        <tp:member-ref>NewChannels</tp:member-ref> and
        <tp:member-ref>ChannelClosed</tp:member-ref> signals.
      </tp:docstring>
    </property>

    <signal name="ChannelClosed">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring>
        Emitted when a channel is closed and hence disappears from the
        <tp:member-ref>Channels</tp:member-ref> property.

        <tp:rationale>
          This is redundant with the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel">Closed</tp:dbus-ref>
          signal on the channel itself, but it does provide full change
          notification for the Channels property.
        </tp:rationale>
      </tp:docstring>

      <arg name="Removed" type="o">
        <tp:docstring>
          The channel which has been removed from the Channels property
        </tp:docstring>
      </arg>
    </signal>

    <tp:mapping name="Channel_Class" array-name="Channel_Class_List">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Mapping representing a class of channels that can be requested
          from a connection manager, can be handled by a user interface,
          are supported by a contact, etc.</p>

        <p>Classes of channel are identified by the fixed values of
          a subset of their properties.</p>

        <p>Channel classes SHOULD always include the keys
          <tp:dbus-ref>org.freedesktop.Telepathy.Channel.ChannelType</tp:dbus-ref>
          and
          <tp:dbus-ref>org.freedesktop.Telepathy.Channel.TargetHandleType</tp:dbus-ref>.
          (One exception is that <tp:dbus-ref namespace="ofdT.Channel.Type"
            >ContactSearch</tp:dbus-ref> channels do not have TargetHandleType
          <code>None</code> in their requestable channel classes, for
          historical reasons.)</p>
      </tp:docstring>

      <tp:member type="s" name="Key">
        <tp:docstring>
          A D-Bus interface name, followed by a dot and a D-Bus property name.
        </tp:docstring>
      </tp:member>

      <tp:member type="v" name="Value">
        <tp:docstring>
          The value of the property.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:struct name="Requestable_Channel_Class"
      array-name="Requestable_Channel_Class_List">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Structure representing a class of channels that can be requested,
          identified by a set of properties that identify that class of
          channel.</p>

        <tp:rationale>
          <p>This will often just be the channel type and the handle type,
            but can include other properties of the channel - for instance,
            encrypted channels might require properties that
            unencrypted channels do not, like an encryption key.</p>
        </tp:rationale>

        <p>In some cases, these classes of channel may overlap, in the sense
          that one class fixes all the properties that another class does,
          plus some more properties.</p>

        <tp:rationale>
          <p>For older clients to still be able to understand how to request
            channels in the presence of a hypothetical "encryption" interface,
            we'd need to represent it like this:</p>

          <ul>
            <li>class 1: ChannelType = Text, TargetHandleType = CONTACT</li>
            <li>class 2: Channel.ChannelType = Text,
              Channel.TargetHandleType = CONTACT,
              Encryption.Encrypted = TRUE</li>
          </ul>
        </tp:rationale>
      </tp:docstring>

      <tp:member name="Fixed_Properties" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The property values that identify this requestable channel class.
            These properties MUST be included in requests for a channel of this
            class, and MUST take these values.</p>

          <p>Clients that do not understand the semantics of all the
            Fixed_Properties MUST NOT request channels of this class, since
            they would be unable to avoid making an incorrect request.</p>

          <p>This implies that connection managers wishing to make channels
            available to old or minimal clients SHOULD have a channel class
            with the minimum number of Fixed_Properties, and MAY additionally
            have channel classes with extra Fixed_Properties.</p>

          <p>Interface designers SHOULD avoid introducing fixed properties
            whose types are not serializable in a <code>.manager</code>
            file.</p>

          <tp:rationale>
            <p>Connection managers with a fixed property that is not
              serializable cannot have a complete <code>.manager</code>
              file.</p>
          </tp:rationale>
        </tp:docstring>
      </tp:member>

      <tp:member name="Allowed_Properties" type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Properties that MAY be set when requesting a channel of this
            channel type and handle type.</p>

          <p>This array MUST NOT include properties that are in the
            Fixed_Properties mapping.</p>

          <p>Properties in this array may either be required or optional,
            according to their documented semantics.</p>

          <tp:rationale>
            <p>For instance, if
              TargetHandleType takes a value that is not Handle_Type_None,
              one or the other of TargetHandle and TargetID is required.
              Clients are expected to understand the documented relationship
              between the properties, so we do not have separate arrays
              of required and optional properties.</p>
          </tp:rationale>

          <p>If this array contains the
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.FUTURE">Bundle</tp:dbus-ref>
            property, then this class of channel can be combined with other
            channels with that property in a request, or added to an existing
            bundle. If not, this signifies that the connection manager is
            unable to mark channels of this class as part of a bundle - this
            means that to the remote contact they are likely to be
            indistinguishable from channels requested separately.</p>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <property name="RequestableChannelClasses" access="read"
      type="a(a{sv}as)">
      <tp:added version="0.17.11">(as stable API)</tp:added>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The classes of channel that are expected to be available on this
          connection, i.e. those for which
          <tp:member-ref>CreateChannel</tp:member-ref> can reasonably
          be expected to succeed. User interfaces can use this information
          to show or hide UI components.</p>

        <p>This property cannot change after the connection has gone to
          state Connection_Status_Connected, so there is no change
          notification (if the connection has context-dependent capabilities,
          it SHOULD advertise support for all classes of channel that it might
          support during its lifetime). Before this state has been reached,
          the value of this property is undefined.</p>

        <tp:rationale>
          <p>This is not on an optional interface, because connection
            managers can always offer some sort of clue about the channel
            classes they expect to support (at worst, they can announce
            support for everything for which they have code).</p>
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>



  <!-- Connection_Interface_Aliasing.xml -->
  <tp:copyright> Copyright (C) 2005, 2006 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Aliasing">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:mapping name="Alias_Map" array-name="">
      <tp:docstring>A dictionary whose keys are contact handles and whose
        values are aliases.</tp:docstring>
      <tp:member type="u" name="Handle"/>
      <tp:member type="s" name="Alias"/>
    </tp:mapping>

    <tp:struct name="Alias_Pair" array-name="Alias_Pair_List">
      <tp:docstring>
        A pair (contact handle, alias) as seen in the
        <tp:member-ref>AliasesChanged</tp:member-ref> signal.
      </tp:docstring>
      <tp:member type="u" name="Handle"/>
      <tp:member type="s" name="Alias"/>
    </tp:struct>

    <signal name="AliasesChanged">
      <arg name="Aliases" type="a(us)">
        <!-- FIXME: if we break API, this could be an Alias_Map, a{us} -->
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array containing structs of:
          <ul>
            <li>the handle representing the contact</li>
            <li>the new alias</li>
          </ul>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Signal emitted when a contact's alias (or that of the user) is changed.
      </tp:docstring>
    </signal>
    <tp:flags name="Connection_Alias_Flags" value-prefix="Connection_Alias_Flag" type="u">
      <tp:flag suffix="User_Set" value="1">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The aliases of contacts on this connection may be changed by the
            user of the service, not just by the contacts themselves. This is
            the case on Jabber, for instance.</p>
          <p>It is possible that aliases can be changed by the contacts too -
            which alias takes precedence is not defined by this
            specification, and depends on the server and/or connection manager
            implementation.</p>
          <p>This flag only applies to the aliases of "globally valid" contact
            handles. At this time, clients should not expect to be able to
            change the aliases corresponding to any channel-specific
            handles. If this becomes possible in future, a new flag will
            be defined.</p>
        </tp:docstring>
      </tp:flag>
    </tp:flags>
    <method name="GetAliasFlags">
      <arg direction="out" type="u"
        name="Alias_Flags">
        <tp:docstring>
          An integer with a bitwise OR of flags from ConnectionAliasFlags
        </tp:docstring>
      </arg>
      <tp:docstring>
        Return a bitwise OR of flags detailing the behaviour of aliases on this
        connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
      </tp:possible-errors>
    </method>
    <method name="RequestAliases">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" type="as" name="Aliases">
        <tp:docstring>
          A list of aliases in the same order as the contact handles
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request the value of several contacts' aliases at once.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>
    <method name="GetAliases">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" type="a{us}" name="Aliases">
        <tp:docstring>
          A dictionary mapping contact handles to aliases
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request the value of several contacts' aliases at once. This SHOULD
        only return cached aliases, falling back on the contact identifier
        (i.e. the string corresponding to the handle) if none is present. Also
        if there was no cached alias, a request SHOULD be started of which the
        result is later signalled by
        <tp:member-ref>AliasesChanged</tp:member-ref>.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>
    <method name="SetAliases">
      <arg direction="in" name="Aliases" type="a{us}">
        <tp:docstring>
          A dictionary mapping integer handles of contacts
          to strings of the new alias to set.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request that the alias of the given contact be changed. Success will be
        indicated by emitting an <tp:member-ref>AliasesChanged</tp:member-ref>
        signal. On connections where the CONNECTION_ALIAS_FLAG_USER_SET flag is
        not set, this method will only ever succeed if the contact is the
        user's own handle (as returned by <tp:dbus-ref
          namespace="org.freedesktop.Telepathy">Connection.GetSelfHandle</tp:dbus-ref>).
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
      </tp:possible-errors>
    </method>

    <tp:contact-attribute name="alias" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>GetAliases</tp:member-ref>
          (always present with some value, possibly the
          same as Connection/contact-id, if information from the
          Aliasing interface was requested)
        </p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface on connections to support protocols where contacts have an
    alias which they can change at will. Provides a method for the user to set
    their own alias, and a signal which should be emitted when a contact's
    alias is changed or first discovered.</p>

    <p>On connections where the user is allowed to set aliases for contacts and
    store them on the server, the <tp:member-ref>GetAliasFlags</tp:member-ref>
    method will have the CONNECTION_ALIAS_FLAG_USER_SET flag set, and the
    <tp:member-ref>SetAliases</tp:member-ref> method may be called on contact
    handles other than the user themselves.</p>

    <p>Aliases are intended to be used as the main displayed name for the
    contact, where available.</p>
    </tp:docstring>
  </interface>



  <!-- Connection_Interface_Avatars.xml -->
  <tp:copyright>Copyright (C) 2005-2008 Collabora Limited</tp:copyright>
  <tp:copyright>Copyright (C) 2005-2008 Nokia Corporation</tp:copyright>
  <tp:copyright>Copyright (C) 2006 INdT</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.Avatars">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:simple-type name="Avatar_Token" type="s"
      array-name="Avatar_Token_List">
      <tp:changed version="0.17.16">strengthened uniqueness requirements
        so (CM name, protocol, token) is unique; previously only
        (our Account, remote contact identifier, token) was required to be
        unique</tp:changed>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An opaque token chosen by the connection manager, representing
          a particular avatar.</p>

        <tp:rationale>
          <p>Because avatars can be relatively large images, most protocols
            provide a way to detect whether an old avatar is still valid,
            or whether an avatar has changed, without pushing the actual
            avatar data to all clients.</p>
        </tp:rationale>

        <p>The connection manager MUST choose these tokens in a way that
          makes it highly unlikely that two different avatars with the same
          connection manager and protocol will have the same token.</p>

        <tp:rationale>
          <p>This means that clients MAY use the triple
            (<tp:type>Connection_Manager_Name</tp:type>,
            <tp:type>Protocol</tp:type>, avatar token) as a key for
            their avatar cache. For instance, an avatar for a
            telepathy-gabble Jabber contact might be stored in a file
            .../gabble/jabber/4e199b4a1c40b497a95fcd1cd896351733849949.png.</p>
        </tp:rationale>

        <p>For instance, some protocols (like XMPP) identify avatars by a
          hash of the avatar data; in this case, the hash can be used as the
          avatar token.</p>

        <p>Some protocols identify avatars by the timestamp of the last
          change to the avatar; in these protocols it would be necessary for
          the connection manager to encode both the timestamp and the
          contact's identifier into the avatar token in order to ensure
          uniqueness.</p>

        <p>This token SHOULD be kept short and reasonably suitable for use
          in a filename, but MAY contain any UTF-8 character (so clients using
          avatar tokens in filenames MUST be prepared to escape characters
          that are not valid in filenames). Connection managers for protocols
          where tokens would otherwise become inconveniently large or contain
          many unsuitable characters SHOULD hash the identifying data to
          generate the token.</p>
      </tp:docstring>
    </tp:simple-type>

    <tp:mapping name="Avatar_Token_Map">
      <tp:docstring>A dictionary whose keys are contact handles and whose
        values are avatar tokens.</tp:docstring>
      <tp:member type="u" name="Handle"/>
      <tp:member type="s" name="Token"/>
    </tp:mapping>

    <signal name="AvatarUpdated">
      <arg name="Contact" type="u">
        <tp:docstring>
          An integer handle for the contact whose avatar has changed
        </tp:docstring>
      </arg>
      <arg name="New_Avatar_Token" type="s">
        <tp:docstring>
          Unique token for their new avatar
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the avatar for a contact has been updated, or first
        discovered on this connection. If the token differs from the token
        associated with the client's cached avatar for this contact, the new
        avatar should be requested with
        <tp:member-ref>RequestAvatars</tp:member-ref>.
      </tp:docstring>
    </signal>

    <signal name="AvatarRetrieved">
      <arg name="Contact" type="u">
        <tp:docstring>
          The contact whose avatar has been retrieved
        </tp:docstring>
      </arg>
      <arg name="Token" type="s">
        <tp:docstring>
          The token corresponding to the avatar
        </tp:docstring>
      </arg>
      <arg name="Avatar" type="ay">
        <tp:docstring>
          An array of bytes containing the image data
        </tp:docstring>
      </arg>
      <arg name="Type" type="s">
        <tp:docstring>
          A string containing the image MIME type (eg image/jpeg), or empty if
          unknown
        </tp:docstring>
      </arg>
      <tp:docstring>
        Emitted when the avatar for a contact has been retrieved.
      </tp:docstring>
    </signal>

    <property name="SupportedAvatarMIMETypes"
      type="as" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        An array of supported MIME types (e.g. "image/jpeg").
        Clients MAY assume that the first type in this array is preferred.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MinimumAvatarHeight"
      type="u" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The minimum height in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MinimumAvatarWidth"
      type="u" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The minimum width in pixels of an avatar on this protocol, which MAY
        be 0.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="RecommendedAvatarHeight"
      type="u" access="read">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended height in pixels of an avatar on this protocol, or 0 if
        there is no preferred height.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          In XMPP a recommended width is given by the protocol specification;
          in proprietary protocols, using the same avatar size as the
          proprietary client is likely to lead to the best display to other
          users.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="RecommendedAvatarWidth"
      type="u" access="read">
      <tp:added version="0.17.22"/>
      <tp:docstring>
        The recommended width in pixels of an avatar on this protocol, or 0 if
        there is no preferred width.
        This property cannot change after the Connection goes to the Connected
        state.

        <tp:rationale>
          The rationale is the same as for
          <tp:member-ref>RecommendedAvatarHeight</tp:member-ref>.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="MaximumAvatarHeight"
      type="u" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum height in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MaximumAvatarWidth"
      type="u" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum width in pixels of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <property name="MaximumAvatarBytes"
      type="u" access="read">
      <tp:added version="0.17.22">Fall back to calling
        <tp:member-ref>GetAvatarRequirements</tp:member-ref> if getting this
          property fails.</tp:added>
      <tp:docstring>
        The maximum size in bytes of an avatar on this protocol, or 0 if
        there is no limit.
        This property cannot change after the Connection goes to the Connected
        state.
      </tp:docstring>
    </property>

    <method name="GetAvatarRequirements">
      <tp:deprecated version="0.17.22">Use GetAll to retrieve the
        D-Bus properties on this interface, falling back to this method
        on failure.</tp:deprecated>
      <arg direction="out" type="as" name="MIME_Types">
        <tp:docstring>
          An array of supported MIME types (eg image/jpeg)
        </tp:docstring>
      </arg>
      <arg direction="out" type="q" name="Min_Width">
        <tp:docstring>
          The minimum image width in pixels
        </tp:docstring>
      </arg>
      <arg direction="out" type="q" name="Min_Height">
        <tp:docstring>
          The minimum image height in pixels
        </tp:docstring>
      </arg>
      <arg direction="out" type="q" name="Max_Width">
        <tp:docstring>
          The maximum image width in pixels, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <arg direction="out" type="q" name="Max_Height">
        <tp:docstring>
          The maximum image height in pixels, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <arg direction="out" type="u" name="Max_Bytes">
        <tp:docstring>
          The maximum image size in bytes, or 0 if there is no limit
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the required format of avatars on this connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetAvatarTokens">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
        An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" type="as" name="Tokens">
        <tp:docstring>
          An array of avatar tokens or empty strings (if no avatar is set) in the
          same order as the given array of contact handles
        </tp:docstring>
      </arg>
      <tp:deprecated version="0.15.5">Use GetKnownAvatarTokens
        instead.</tp:deprecated>
      <tp:docstring>
        Get the unique tokens for all of the given contacts' avatars.

        Using this method in new Telepathy clients is deprecated; use
        <tp:member-ref>GetKnownAvatarTokens</tp:member-ref> instead.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetKnownAvatarTokens">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
        An array of handles representing contacts
        </tp:docstring>
      </arg>
      <arg direction="out" type="a{us}" name="Tokens">
        <tp:docstring>
          A dictionary of handles mapped to avatar tokens, containing only
          the known avatar tokens.
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get the unique tokens for the given contacts' avatars. These tokens
        can be persisted across connections, and should be used by the client
        to check whether the avatars have been updated.  For handles other than
        the self handle, only tokens that are already known are returned; an
        empty token means the given contact has no avatar.  However, a CM must
        always have the tokens for the self handle if one is set (even if it is
        set to no avatar).  On protocols where the avatar does not persist
        between connections, a CM should omit the self handle from the returned
        map until an avatar is explicitly set or cleared.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="RequestAvatar">
      <arg direction="in" name="Contact" type="u">
        <tp:docstring>
          An integer handle for the contact to request the avatar for
        </tp:docstring>
      </arg>
      <arg direction="out" type="ay" name="Data">
        <tp:docstring>
          An array of bytes containing the image data
        </tp:docstring>
      </arg>
      <arg direction="out" type="s" name="MIME_Type">
        <tp:docstring>
        A string containing the image MIME type (eg image/jpeg), or empty if
        unknown
        </tp:docstring>
      </arg>
      <tp:deprecated version="0.15.5">Use RequestAvatars
        instead.</tp:deprecated>
      <tp:docstring>
        Request the avatar for a given contact. Using this method in new
        Telepathy clients is deprecated; use RequestAvatars instead.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable">
          <tp:docstring>
            The contact does not currently have an avatar.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <method name="RequestAvatars">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          The contacts to retrieve avatars for
        </tp:docstring>
      </arg>
      <tp:docstring>
        Request avatars for a number of contacts. The
        <tp:member-ref>AvatarRetrieved</tp:member-ref> signal is emitted for
        each avatar retrieved. If the handles are valid but retrieving an
        avatar fails (for any reason, including the contact not having an
        avatar) the AvatarRetrieved signal is not emitted for that contact.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
      </tp:possible-errors>
    </method>

    <method name="SetAvatar">
      <arg direction="in" name="Avatar" type="ay">
        <tp:docstring>
          An array of bytes representing the avatar image data
        </tp:docstring>
      </arg>
      <arg direction="in" name="MIME_Type" type="s">
        <tp:docstring>
          A string representing the image MIME type
        </tp:docstring>
      </arg>
      <arg direction="out" type="s" name="Token">
        <tp:docstring>
          The string token of the new avatar
        </tp:docstring>
      </arg>
      <tp:docstring>
        Set a new avatar image for this connection. The avatar image must
        respect the requirements obtained by
        <tp:member-ref>GetAvatarRequirements</tp:member-ref>.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument"/>
        <tp:error name="org.freedesktop.Telepathy.Error.PermissionDenied"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="ClearAvatar">
      <tp:added version="0.15.0" />
      <tp:docstring>
        Remove the avatar image for this connection.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <tp:contact-attribute name="token" type="s">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same string that would be returned by
          <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
          (omitted from the result if the contact's avatar token is not known,
          present as an empty string if the contact is known not to have
          an avatar). Unlike in the
          <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
          method, the avatar tokens for the self handle aren't required to be
          present. This attribute should not be used to determine whether or
          not the Avatar needs to be set.
        </p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>An interface for requesting avatars for contacts on a given connection,
    receiving notification when avatars are changed, and publishing your own
    avatar.</p>

    <p>Avatars are identified by a string, the <tp:type>Avatar_Token</tp:type>,
    which represents a particular avatar. Tokens MUST be chosen by the
    connection manager in such a way that the triple
    (<tp:type>Connection_Manager_Name</tp:type>, <tp:type>Protocol</tp:type>,
    <tp:type>Avatar_Token</tp:type>) uniquely identifies an avatar.
    An empty token means that an avatar has not been set for this contact, and
    a changed token implies the contact's avatar has changed, but the strings
    should otherwise be considered opaque by clients.</p>

    <p>A client should use <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>
    to request the tokens for the
    avatars of all the contacts it is interested in when it connects. The
    avatars can then be requested using
    <tp:member-ref>RequestAvatars</tp:member-ref> for the contacts.  Clients
    should bind to the <tp:member-ref>AvatarUpdated</tp:member-ref> signal and
    request a new copy of
    the avatar when a contacts' avatar token changes. Clients should cache the
    token and data of each contact's avatar between connections, to avoid
    repeatedly retrieving the same avatar.</p>

    <p>To publish an avatar, a client should use
    <tp:member-ref>SetAvatar</tp:member-ref> to provide an image which meets
    the requirements returned by the
    <tp:member-ref>GetAvatarRequirements</tp:member-ref>
    function. On some protocols the avatar is stored on the server, so setting
    the avatar is persistent, but on others it is transferred via a peer to
    peer mechanism, so needs to be set every connection. Hence, on every
    connection, clients should inspect the avatar token of the connection's
    self handle using <tp:member-ref>GetKnownAvatarTokens</tp:member-ref>; if
    the self handle is not in the
    returned map, the client should re-set the avatar. If the self handle's
    avatar token is known, but the avatar has been changed locally since the
    last connection, the client should upload the new avatar; if the avatar has
    not changed locally, then the client should download the avatar from the
    server if its token differs from the that of the local avatar.</p>

    <p>To remove the published avatar on protocols which have persistent avatars,
    a client should use the <tp:member-ref>ClearAvatar</tp:member-ref> method.
    This method can safely be used even if there is no avatar for this
    connection.</p>
    </tp:docstring>
  </interface>



  <!-- Connection_Interface_Simple_Presence.xml -->
  <tp:copyright> Copyright (C) 2005-2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or modify it
      under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation; either version 2.1 of the License, or (at
      your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
      General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public License
      along with this library; if not, write to the Free Software Foundation,
      Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Connection.Interface.SimplePresence">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>

    <tp:struct name="Simple_Presence">
      <tp:docstring>
        A struct representing the presence of a contact.
      </tp:docstring>
      <tp:member type="u" name="Type">
        <tp:docstring>
          The presence type, e.g. Connection_Presence_Type_Away.
        </tp:docstring>
      </tp:member>
      <tp:member type="s" name="Status">
        <tp:docstring>
          The string identifier of the status, e.g. "brb", as defined in the
          <tp:member-ref>Statuses</tp:member-ref> property.
        </tp:docstring>
      </tp:member>
      <tp:member type="s" name="Status_Message">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The user-defined status message, e.g. "Back soon!".</p>

          <p>Clients SHOULD set the status message for the local
            user to the empty string, unless the user has actually provided
            a specific message (i.e. one that conveys more information than the
            Status).</p>

          <p>User interfaces SHOULD regard an empty status message as unset,
            and MAY replace it with a localized string corresponding to the
            Status or Type.</p>

          <tp:rationale>
            Use case: Daf sets his status in Empathy by choosing the Welsh
            translation of "Available" from a menu.
            It is more informative for his English-speaking colleagues
            to see the English translation of "Available" (as localized
            by their own clients) than to see "Ar Gael" (which they don't
            understand anyway).
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Simple_Contact_Presences">
      <tp:docstring>
        Mapping returned by <tp:member-ref>GetPresences</tp:member-ref>
        and signalled by <tp:member-ref>PresencesChanged</tp:member-ref>,
        indicating the presence of a number of contacts.
      </tp:docstring>
      <tp:member type="u" name="Contact">
        <tp:docstring>
          A contact
        </tp:docstring>
      </tp:member>
      <tp:member type="(uss)" name="Presence">
        <tp:docstring>
          The contact's presence
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <tp:struct name="Simple_Status_Spec">
      <tp:docstring>
        A struct containing information about a status.
      </tp:docstring>
      <tp:member type="u" name="Type">
        <tp:docstring>
          The type of a presence. This SHOULD NOT be used as a way to set
          statuses that the client does not recognise (as explained in
          <tp:member-ref>SetPresence</tp:member-ref>), but MAY be used to check
          that the client's assumptions about a particular status name
          match the connection manager's.
        </tp:docstring>
      </tp:member>
      <tp:member type="b" name="May_Set_On_Self">
        <tp:docstring>
          If true, the user can set this status on themselves using
          <tp:member-ref>SetPresence</tp:member-ref>.
        </tp:docstring>
      </tp:member>
      <tp:member type="b" name="Can_Have_Message">
        <tp:docstring>
          If true, a non-empty message can be set for this status. Otherwise,
          the empty string is the only acceptable message.

          <tp:rationale>
            On IRC you can be Away with a status message, but if you are
            available you cannot set a status message.
          </tp:rationale>
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:mapping name="Simple_Status_Spec_Map">
      <tp:docstring>
        A mapping describing possible statuses.
      </tp:docstring>

      <tp:member type="s" name="Identifier">
        <tp:docstring>
          The string identifier of this status.
        </tp:docstring>
      </tp:member>
      <tp:member type="(ubb)" name="Spec">
        <tp:docstring>
          Details of this status.
        </tp:docstring>
      </tp:member>
    </tp:mapping>

    <method name="SetPresence">
      <arg direction="in" name="Status" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The string identifier of the desired status. Possible status
            identifiers are defined in the
            <tp:member-ref>Statuses</tp:member-ref> property.</p>

          <p>Clients MUST NOT set a status whose string value they do not
            recognise, even if its presence type in Statuses
            matches what the user requested.</p>

          <tp:rationale>
            <p>Suppose a protocol has statuses that include 'phone' (of type
              BUSY) and 'in-a-meeting' (of type BUSY), but there is no
              generic 'busy' status.</p>

            <p>If the user requests "Busy" status from a menu, a
              client author might be tempted to pick an arbitrary status
              that has type BUSY. However, on this protocol, neither of
              the choices would be appropriate, and incorrect information
              about the user would be conveyed.</p>
          </tp:rationale>

          <p>Statuses whose <tp:type>Connection_Presence_Type</tp:type>
            is Offline, Error or Unknown MUST NOT be passed to this
            function. Connection managers SHOULD reject these statuses.</p>

          <tp:rationale>
            <p>To go offline, call <tp:dbus-ref
                namespace="org.freedesktop.Telepathy.Connection">Disconnect</tp:dbus-ref>
            instead. The "error" and "unknown" statuses make no sense.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>
      <arg direction="in" name="Status_Message" type="s">
        <tp:docstring>
          The status message associated with the current status.
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Request that the presence status and status message are published for
          the connection.  Changes will be indicated by
          <tp:member-ref>PresencesChanged</tp:member-ref>
          signals being emitted.</p>

        <p>This method may be called on a newly-created connection while it
          is still in the DISCONNECTED state, to request that when the
          connection connects, it will do so with the selected status.</p>

        <p>In DISCONNECTED state the
          <tp:member-ref>Statuses</tp:member-ref>
          property will indicate which statuses are allowed to be set
          while DISCONNECTED (none, if the Connection Manager doesn't allow
          this). This value MUST NOT be cached, as the set of allowed
          presences might change upon connecting.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidArgument">
          <tp:docstring>
            Either the specified status is not supported, the specified
            status cannot be set on the user themselves, or a non-empty
            message was supplied for a status that does not
            accept a message.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <method name="GetPresences">
      <arg direction="in" name="Contacts" type="au">
        <tp:docstring>
          An array of the contacts whose presence should be obtained.
        </tp:docstring>
      </arg>
      <arg direction="out" name="Presence" type="a{u(uss)}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Presence information in the same format as for the
            <tp:member-ref>PresencesChanged</tp:member-ref> signal.
            The returned mapping MUST include an entry for each contact
            in the method's argument.</p>

          <p>The definition of the connection presence types Unknown
            and Offline means that if a connection manager will return
            Unknown for contacts not on the subscribe list, it MUST delay
            the reply to this method call until it has found out which
            contacts are, in fact, on the subscribe list.</p>
        </tp:docstring>
      </arg>
      <tp:docstring>
        Get presence previously emitted by
        <tp:member-ref>PresencesChanged</tp:member-ref> for the given
        contacts. Data is returned in the same structure as the
        PresencesChanged signal; no additional network requests are made.
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle"/>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError">
          <tp:docstring>
            While discovering the subscribe list in order to distinguish
            between Unknown and Offline statuses, a network error occurred.
          </tp:docstring>
        </tp:error>
        <tp:error name="org.freedesktop.Telepathy.Error.NotAvailable"/>
      </tp:possible-errors>
    </method>

    <property name="Statuses" access="read"
      type="a{s(ubb)}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A dictionary where the keys are the presence statuses that are
          available on this connection, and the values are the corresponding
          presence types.</p>

        <p>While the connection is in the DISCONNECTED state, it contains
          the set of presence statuses allowed to be set before connecting.
          The connection manager will attempt to set the appropriate status
          when the connection becomes connected, but cannot necessarily
          guarantee it. The available statuses cannot change until the
          connection status changes, so there is no change notification.</p>

        <p>While the connection is in the CONNECTED state, this property
          contains the set of presence statuses which are actually available
          on this protocol. This set is constant for the remaining lifetime
          of the connection, so again, there is no change notification.</p>

        <p>While the connection is in the CONNECTING state, the value of
          this property is undefined and SHOULD NOT be used. It can change
          at any time without notification (in particular, any cached values
          from when the connection was in the DISCONNECTED or CONNECTING
          state MUST NOT be assumed to still be correct when the state has
          become CONNECTED).</p>

        <p>This property MUST include the special statuses "unknown" and
          "error" if and only if the connection manager can emit them
          as a contact's status.</p>

        <tp:rationale>
          For instance, connection managers for local-xmpp (XEP-0174) would
          omit "unknown" since there is no such concept.
        </tp:rationale>
      </tp:docstring>
    </property>

    <property name="MaximumStatusMessageLength"
      access="read"
      type="u">
      <tp:added version="0.22.2"/>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The maximum length in characters for any individual status
          message, or 0 if there is no limit.</p>

        <p>While the connection is in the DISCONNECTED state, this property will
          be 0. The connection manager will attempt to set the appropriate value
          when the connection becomes connected, but cannot necessarily
          guarantee it. The maximum length cannot change until the
          connection status changes, so there is no change notification.</p>

        <p>While the connection is in the CONNECTED state, this property
          contains the maximum length in characters for any individual status
          message which is actually allowed on this protocol.
          This value is constant for the remaining lifetime
          of the connection, so again, there is no change notification.</p>

        <p>While the connection is in the CONNECTING state, the value of
          this property is undefined and SHOULD NOT be used. It can change
          at any time without notification (in particular, any cached values
          from when the connection was in the DISCONNECTED or CONNECTING
          state MUST NOT be assumed to still be correct when the state has
          become CONNECTED).</p>

        <p>If a message passed to <tp:member-ref>SetPresence</tp:member-ref> is
          longer than allowed by this property, the connection manager MUST
          truncate the supplied message; when emitting
          <tp:member-ref>PresencesChanged</tp:member-ref>, the truncated version
          of the message MUST be used.</p>

        <tp:rationale>
          <p>Some XMPP servers, like Google Talk, define a maximum length for
          status messages. Whether the user's server is one of
          these cannot be detected until quite late in the connection
          process.</p>
        </tp:rationale>

      </tp:docstring>
    </property>

    <signal name="PresencesChanged">
      <arg name="Presence" type="a{u(uss)}">
        <tp:docstring>
          A dictionary of contact handles mapped to the status,
          presence type and status message.
        </tp:docstring>
      </arg>
      <tp:docstring>
        This signal should be emitted when your own presence has been changed,
        or the presence of the member of any of the connection's channels has
        been changed.
      </tp:docstring>
    </signal>

    <tp:enum name="Connection_Presence_Type" type="u">
      <tp:enumvalue suffix="Unset" value="0">
        <tp:docstring>
          An invalid presence type used as a null value. This value MUST NOT
          appear in the <tp:member-ref>Statuses</tp:member-ref> property,
          or in the result of <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Presence">GetStatuses</tp:dbus-ref>
          on the deprecated <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface">Presence</tp:dbus-ref>
          interface.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Offline" value="1">
        <tp:docstring>
          Offline
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Available" value="2">
        <tp:docstring>
          Available
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Away" value="3">
        <tp:docstring>
          Away
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Extended_Away" value="4">
        <tp:docstring>
          Away for an extended time
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Hidden" value="5">
        <tp:docstring>
          Hidden (invisible)
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Busy" value="6">
        <tp:added version="0.17.0"/>
        <tp:docstring>
          Busy, Do Not Disturb.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Unknown" value="7">
        <tp:added version="0.17.8"/>
        <tp:docstring>
          Unknown, unable to determine presence for this contact, for example
          if the protocol only allows presence of subscribed contacts.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Error" value="8">
        <tp:added version="0.17.8"/>
        <tp:docstring>
          Error, an error occurred while trying to determine presence.  The
          message, if set, is an error from the server.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Access_Control_Type" type="u"
             array-name="Access_Control_Type_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A type for communication access control. These control
          policies are used in
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">CommunicationPolicy.DRAFT</tp:dbus-ref>
          as well as most rich presence interfaces.</p>

        <p>New interfaces should use this type, and NOT
          <tp:type>Rich_Presence_Access_Control_Type</tp:type>.</p>
      </tp:docstring>
      <tp:enumvalue suffix="Whitelist" value="0">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Only allow contacts that are in a certain whitelist.</p>

          <p>The associated variant
            in <tp:type>Access_Control</tp:type> is a list of
            <tp:type>Contact_Handle</tp:type> representing
            the whitelist, with signature <code>au</code>.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Publish_List" value="1">
        <tp:docstring>
          Allow contacts in the user's 'publish' list. The associated
          variant in <tp:type>Access_Control</tp:type> is ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Group" value="2">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Only allow contacts that are in a certain group.</p>

          <p>The associated variant in <tp:type>Access_Control</tp:type> is a
            <tp:type>Group_Handle</tp:type> representing the permitted
            group.</p>
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="3">
        <tp:docstring>
          Allow all contacts.  The associated
          variant in <tp:type>Access_Control</tp:type> is ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Subscribe_Or_Publish_List" value="4">
        <tp:docstring>
          Allow all contacts in the user's 'subscribe' or 'publish'
          list. The associated variant in <tp:type>Access_Control</tp:type> is
          ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Closed" value="5">
        <tp:docstring>
          Forbid all contacts. The associated variant in
          <tp:type>Access_Control</tp:type> is ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Not_Understood" value="6">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The access control rule is too complex to be represented
            in the current Telepathy API. The associated variant is
            meaningless. Setting this mode is never valid; the
            connection manager MUST raise an error if this is attempted.</p>

          <tp:rationale>
            XEP-0016 Privacy Lists can easily produce access control
            mechanisms that can't be expressed in a simpler API. We
            need to be able to at least indicate that fact.
          </tp:rationale>

          <p>The associated variant in <tp:type>Access_Control</tp:type> is
            ignored.</p>
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:enum name="Rich_Presence_Access_Control_Type" type="u"
      array-name="Rich_Presence_Access_Control_Type_List">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A type of access control for Rich_Presence_Access_Control.
          For most types, the exact access control is given by an associated
          variant.</p>

        <tp:rationale>
          <p>These are the access control types from XMPP publish/subscribe
          (XEP-0060).</p>
        </tp:rationale>

        <p><tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Location</tp:dbus-ref>
          uses this for historical reasons, new interfaces will use
          <tp:type>Access_Control_Type</tp:type>.</p>
      </tp:docstring>

      <tp:enumvalue suffix="Whitelist" value="0">
        <tp:docstring>
          The associated variant is a list of contacts (signature 'au',
          Contact_Handle[]) who can see the extended presence information.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Publish_List" value="1">
        <tp:docstring>
          All contacts in the user's 'publish' contact list can see the
          extended presence information. The associated variant is ignored.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Group" value="2">
        <tp:docstring>
          The associated variant is a handle of type Group (signature 'u',
          Group_Handle) representing a group of contacts who can see the
          extended presence information.
        </tp:docstring>
      </tp:enumvalue>
      <tp:enumvalue suffix="Open" value="3">
        <tp:docstring>
          Anyone with access to the service can see the extended presence
          information.
        </tp:docstring>
      </tp:enumvalue>
    </tp:enum>

    <tp:struct name="Access_Control">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An access control mode for extended presence items like geolocation.
          This type isn't actually used by the SimplePresence interface, but
          it's included here so it can be referenced by rich presence
          interfaces.</p>

        <p>New interfaces should use this type, and NOT
          <tp:type>Rich_Presence_Access_Control</tp:type>.</p>
      </tp:docstring>

      <tp:member name="Type" type="u">
        <tp:docstring>
          The type of access control to apply.
        </tp:docstring>
      </tp:member>
      <tp:member name="Detail" type="v">
        <tp:docstring>
          Any additional information required by the Type. The required
          type and semantics are defined for each
          <tp:type>Access_Control_Type</tp:type>.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:struct name="Rich_Presence_Access_Control">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>An access control mode for extended presence items like geolocation.
          This type isn't actually used by the SimplePresence interface, but
          it's included here so it can be referenced by rich presence interfaces
          such as <tp:dbus-ref
                     namespace="org.freedesktop.Telepathy.Connection.Interface">Location</tp:dbus-ref>.</p>

        <p><tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface">Location</tp:dbus-ref>
          uses this for historical reasons, new interfaces will use
          <tp:type>Access_Control_Type</tp:type>.</p>
      </tp:docstring>

      <tp:member name="Type" type="u">
        <tp:docstring>
          The type of access control to apply.
        </tp:docstring>
      </tp:member>
      <tp:member name="Detail" type="v">
        <tp:docstring>
          Any additional information required by the Type. The required
          type and semantics are defined for each
          <tp:type>Rich_Presence_Access_Control_Type</tp:type>.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <tp:contact-attribute name="presence"
      type="(uss)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same struct that would be returned by
          <tp:member-ref>GetPresences</tp:member-ref>
          (always present with some value if information from the
          SimplePresence interface was requested)</p>
      </tp:docstring>
    </tp:contact-attribute>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface is for services which have a concept of presence which
        can be published for yourself and monitored on your contacts.</p>

      <p>Presence on an individual (yourself or one of your contacts) is
        modelled as a status and a status message. Valid statuses are defined
        per connection, and a list of those that can be set on youself
        can be obtained from the
        <tp:member-ref>Statuses</tp:member-ref>
        property.</p>

      <p>Each status has an arbitrary string identifier which should have an
        agreed meaning between the connection manager and any client which is
        expected to make use of it. The following well-known values should be
        used where possible to allow clients to identify common choices:</p>

      <table>
        <tr>
          <th>Status identifier</th>
          <th><tp:type>Connection_Presence_Type</tp:type></th>
          <th>Remarks</th>
        </tr>
        <tr>
          <td><code>"available"</code></td>
          <td>Available</td>
          <td></td>
        </tr>
        <tr>
          <td><code>"chat"</code></td>
          <td>Available</td>
          <td>Actively interested in chatting, as opposed to merely
            available.</td>
        </tr>
        <tr>
          <td><code>"pstn"</code></td>
          <td>Available</td>
          <td>This contact is actually a phone number, not an IM account. As
            such, the contact is conceptually always available, but not in the
            same way that a contact can set their IM status to “available”.
            It does not make sense to allow the user to set this status on
            herself; hence, on protocols where this status is supported, its
            entry in <tp:member-ref>Statuses</tp:member-ref> SHOULD have
            <var>May_Set_On_Self</var> set to <code>False</code>.</td>
        </tr>
        <tr>
          <td><code>"away"</code></td>
          <td>Away</td>
          <td></td>
        </tr>
        <tr>
          <td><code>"brb"</code></td>
          <td>Away</td>
          <td>Be Right Back (a more specific form of Away)</td>
        </tr>
        <tr>
          <td><code>"busy"</code></td>
          <td>Busy</td>
          <td></td>
        </tr>
        <tr>
          <td><code>"dnd"</code></td>
          <td>Busy</td>
          <td>Do Not Disturb (a more specific form of Busy)</td>
        </tr>
        <tr>
          <td><code>"xa"</code></td>
          <td>Extended_Away</td>
          <td>Extended Away</td>
        </tr>
        <tr>
          <td><code>"hidden"</code></td>
          <td>Hidden</td>
          <td>Also known as "Invisible" or "Appear Offline"</td>
        </tr>
        <tr>
          <td><code>"offline"</code></td>
          <td>Offline</td>
          <td></td>
        </tr>
        <tr>
          <td><code>"unknown"</code></td>
          <td>Unknown</td>
          <td>special, see below</td>
        </tr>
        <tr>
          <td><code>"error"</code></td>
          <td>Error</td>
          <td>special, see below</td>
        </tr>
      </table>

      <p>As well as these well-known status identifiers, every status also has
        a numerical type value chosen from
        <tp:type>Connection_Presence_Type</tp:type> which can be
        used by the client to classify even unknown statuses into different
        fundamental types.</p>

      <p>These numerical types exist so that even if a client does not
        understand the string identifier being used, and hence cannot present
        the presence to the user to set on themselves, it may display an
        approximation of the presence if it is set on a contact.</p>

      <p>As well as the normal status identifiers, there are two special ones
        that may be present: 'unknown' with type Unknown and 'error' with type
        Error. 'unknown' indicates that it is impossible to determine the
        presence of a contact at this time, for example because it's not on the
        'subscribe' list and the protocol only allows one to determine the
        presence of contacts you're subscribed to. 'error' indicates that there
        was a failure in determining the status of a contact.</p>

      <p>If the connection has a 'subscribe' contact list,
        <tp:member-ref>PresencesChanged</tp:member-ref>
        signals should be emitted to indicate changes of contacts on this list,
        and should also be emitted for changes in your own presence. Depending
        on the protocol, the signal may also be emitted for others such as
        people with whom you are communicating, and any user interface should
        be updated accordingly.</p>
    </tp:docstring>
  </interface>



  <!-- Connection_Interface_Contact_Capabilities.xml -->
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Collabora Limited </tp:copyright>
  <tp:copyright> Copyright (C) 2005, 2006, 2008 Nokia Corporation </tp:copyright>
  <tp:copyright> Copyright (C) 2006 INdT </tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.</p>

<p>This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.</p>

<p>You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
  </tp:license>
  <interface name="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities">
    <tp:requires interface="org.freedesktop.Telepathy.Connection"/>
    <tp:added version="0.17.28">(as stable API)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Contact capabilities describe the channel classes which may be
        created with a given contact in advance of attempting to create a
        channel. Each capability represents a commitment by the
        connection manager that it will ordinarily be able to create a channel
        with a contact when given a request with the properties defined by the
        channel class.</p>

      <p>Capabilities pertain to particular contact handles, and represent
        activities such as having a text chat, a voice call with the user or a
        stream tube of a defined type.</p>

      <p>This interface also enables user interfaces to notify the connection
        manager what capabilities to advertise for the user to other contacts.
        This is done by using the
        <tp:member-ref>UpdateCapabilities</tp:member-ref> method.</p>

      <tp:rationale>
        <p>XMPP is a major user of this interface: XMPP contacts will not,
          in general, be callable using VoIP unless they advertise suitable
          Jingle capabilities.</p>

        <p>Many other protocols also have some concept of capability flags,
          which this interface exposes in a protocol-independent way.</p>
      </tp:rationale>
    </tp:docstring>

    <tp:struct name="Handler_Capabilities"
      array-name="Handler_Capabilities_List">
      <tp:docstring>
        A structure representing the capabilities of a single client.
      </tp:docstring>

      <tp:member name="Well_Known_Name" type="s">
        <tp:docstring>
          For implementations of the <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Client</tp:dbus-ref>
          interface, the well-known bus name name of the client; for any other
          process, any other reversed domain name that uniquely identifies it.
        </tp:docstring>
      </tp:member>

      <tp:member name="Channel_Classes" type="aa{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of channel classes that can be handled by this client.
          This will usually be a copy of the client's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>

      <tp:member name="Capabilities"
        type="as">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          An array of client capabilities supported by this client, to be
          used by the connection manager to determine what capabilities to
          advertise. This will usually be a copy of the client's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Client.Handler">Capabilities</tp:dbus-ref>
          property.
        </tp:docstring>
      </tp:member>
    </tp:struct>

    <method name="UpdateCapabilities">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Alter the connection's advertised capabilities to include
          the intersection of the given clients' capabilities with what the
          connection manager is able to implement.</p>

        <p>On connections managed by the ChannelDispatcher, processes other
          than the ChannelDispatcher SHOULD NOT call this method, and the
          ChannelDispatcher SHOULD use this method to advertise the
          capabilities of all the registered <tp:dbus-ref
            namespace="org.freedesktop.Telepathy">Client.Handler</tp:dbus-ref>
          implementations.On connections not managed by the ChannelDispatcher,
          clients MAY use this method directly, to indicate the channels they
          will handle and the extra capabilities they have.</p>

        <p>Upon a successful invocation of this method, the connection manager
          will only emit the
          <tp:member-ref>ContactCapabilitiesChanged</tp:member-ref> signal
          for the user's <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection">SelfHandle</tp:dbus-ref>
          if, in the underlying protocol, the new capabilities are distinct
          from the previous state.</p>

        <tp:rationale>
          <p>The connection manager will essentially intersect the provided
            capabilities and the channel classes it implements. Therefore,
            certain properties which are never fixed for a channel class
            (such as the target handle, or the Parameters property of a tube
            channel) will almost certainly not be advertised.</p>
        </tp:rationale>

        <p>This method MAY be called on a newly-created connection while it
          is still in the DISCONNECTED state, to request that when the
          connection connects, it will do so with the appropriate
          capabilities. Doing so MUST NOT fail.</p>
      </tp:docstring>

      <arg direction="in" name="Handler_Capabilities" type="a(saa{sv}as)">
        <tp:docstring>
          <p>The capabilities of one or more clients.</p>

          <p>For each client in the given list, any capabilities previously
            advertised for the same client name are discarded, then replaced by
            the capabilities indicated.</p>

          <p>As a result, if a client becomes unavailable, this method SHOULD
            be called with a <tp:type>Handler_Capabilities</tp:type> structure
            containing its name, an empty list of channel classes, and an
            empty list of capabilities. When this is done, the connection
            manager SHOULD free all memory associated with that client name.</p>

          <tp:rationale>
            <p>This method takes a list of clients so that
              when the channel dispatcher first calls it (with a list of all
              the Handlers that are initially available), the changes can be
              made atomically, with only one transmission of updated
              capabilities to the network. Afterwards, the channel dispatcher
              will call this method with a single-element list every time
              a Handler becomes available or unavailable.</p>
          </tp:rationale>

          <p>The connection manager MUST ignore any channel classes and client
            capabilities for which there is no representation in the protocol
            or no support in the connection manager.</p>
        </tp:docstring>
      </arg>

      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.NetworkError"/>
      </tp:possible-errors>
    </method>

    <method name="GetContactCapabilities">
      <arg direction="in" name="Handles" type="au">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>An array of contact handles for this connection.</p>

          <p>The handle zero MUST NOT be included in the request.</p>
        </tp:docstring>
      </arg>
      <arg direction="out" type="a{ua(a{sv}as)}"
           name="Contact_Capabilities">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>A map from contact handles to lists of requestable channel
            classes, representing the channel requests that are expected
            to succeed for that contact.</p>

          <p>Contacts listed among Handles whose capabilities are unknown
            SHOULD be omitted from this map; contacts known to have an empty
            set of capabilities SHOULD be included in the keys of this map,
            with an empty array as the corresponding value.</p>
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Returns an array of requestable channel classes for the given
          contact handles, representing the channel requests that are
          expected to succeed.</p>
      </tp:docstring>
      <tp:possible-errors>
        <tp:error name="org.freedesktop.Telepathy.Error.Disconnected"/>
        <tp:error name="org.freedesktop.Telepathy.Error.InvalidHandle">
          <tp:docstring>
            The handle does not represent a contact. Zero is always invalid.
          </tp:docstring>
        </tp:error>
      </tp:possible-errors>
    </method>

    <signal name="ContactCapabilitiesChanged">
      <arg name="caps" type="a{ua(a{sv}as)}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          All the capabilities of the contacts
        </tp:docstring>
      </arg>
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Announce that there has been a change of capabilities on the
          given handles. A single signal can be emitted for several
        contacts.</p>

        <tp:rationale>
          <p>The underlying protocol can get several contacts' capabilities at
            the same time.</p>
        </tp:rationale>

      </tp:docstring>
    </signal>

  <tp:mapping name="Contact_Capabilities_Map"
              array-name="Contact_Capabilities_Map_List">
    <tp:docstring>A mapping from contact handle to their capabilities.
    </tp:docstring>
    <tp:member type="u" name="Key">
      <tp:docstring>
        A contact handle.
      </tp:docstring>
    </tp:member>
    <tp:member type="a(a{sv}as)" name="Value">
       <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
         <p>The contact's capabilities. These should be represented
          in the same way as in <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Connection.Interface.Requests"
            >RequestableChannelClasses</tp:dbus-ref>,
          except that they may have more fixed properties or fewer allowed
          properties, to represent contacts who do not have all the
          capabilities of the connection.</p>

        <p>In particular, requestable channel classes for channels with
          target handle type Contact MUST list <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel"
            >TargetHandleType</tp:dbus-ref> among their fixed properties when
          they appear here, and clients MAY assume that this will be the
          case.</p>

        <tp:rationale>
          <p>This matches the initial implementations - service-side in
            telepathy-gabble, and client-side in telepathy-qt4 - and means
            that clients can use exactly the same code to interpret
            RequestableChannelClasses and contact capabilities.</p>
        </tp:rationale>

        <p>Channel classes with target handle type Handle_Type_Contact
          indicate that a request that matches the channel class, and also
          either has the contact's handle as <tp:dbus-ref
            namespace="org.freedesktop.Telepathy.Channel"
            >TargetHandle</tp:dbus-ref> or the contact's identifier as
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel"
            >TargetID</tp:dbus-ref>, can be expected to succeed. Connection
          managers SHOULD NOT include the TargetHandle or TargetID as a
          fixed property in contact capabilities.</p>

        <tp:rationale>
          <p>This makes one channel class sufficient to describe requests via
            TargetHandle or TargetID, and is necessary in order to allow
            clients to interpret RequestableChannelClasses and contact
            capabilities with the same code.</p>
        </tp:rationale>

        <p>Channel classes with target handle type Handle_Type_Room or
          Handle_Type_None indicate that if a channel matching the channel
          class is created, then inviting the contact to that channel
          can be expected to succeed.</p>

        <tp:rationale>
          <p>To support room-based XMPP protocols like
            <a href="http://telepathy.freedesktop.org/wiki/Muji">Muji</a>
            and MUC Tubes, it's necessary to be able to discover who can be
            invited to a given room channel; most XMPP contacts won't
            support being invited into a Muji conference call, at least
            in the short to medium term.</p>
        </tp:rationale>

        <p>No interpretation is defined for channel classes with any other
          target handle type, or for channel classes that do not fix a
          target handle type, in this version of the Telepathy
          specification.</p>
      </tp:docstring>
    </tp:member>
  </tp:mapping>

    <tp:contact-attribute name="capabilities"
      type="a(a{sv}as)">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>The same structs that would be returned by
          <tp:member-ref>GetContactCapabilities</tp:member-ref>.
          Omitted from the result if the contact's capabilities
          are not known; present in the result as an empty array if the
          contact is known to have no capabilities at all.</p>
      </tp:docstring>
    </tp:contact-attribute>

  </interface>
</node>
