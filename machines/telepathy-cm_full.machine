object at /org/freedesktop/Telepathy/AccountManager, org.freedesktop.Telepathy.AccountManager implements org.freedesktop.Telepathy.AccountManager {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.AccountManager",
		];
		ValidAccounts = @ao [
			@o "/org/freedesktop/Telepathy/Account/cm/protocol/account",
		];
		InvalidAccounts = @ao [];
		SupportedAccountProperties = @as [
			"org.freedesktop.Telepathy.Account.Enabled",
			"org.freedesktop.Telepathy.Account.ConnectAutomatically",
			"org.freedesktop.Telepathy.Account.RequestedPresence",
		];
	}

	states {
		Main
	}
}

object at /org/freedesktop/Telepathy/Account/cm/protocol/account implements org.freedesktop.Telepathy.Account {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.Account",
		];
		DisplayName = "Test Account"?;
		Icon = ""?;
		Valid = true;
		Enabled = true;
		Nickname = "John Smith"?;
		Service = ""?;
		Parameters = @a{sv} {};
		AutomaticPresence = (@u 2?, "available"?, ""?);
		ConnectAutomatically = true;
		Connection = @o "/";
		ConnectionStatus = @u 2 /* Disconnected */;
		ConnectionStatusReason = @u 0;
		ConnectionError = "";
		ConnectionErrorDetails = @a{sv} {};
		CurrentPresence = (@u 1, "", "");
		RequestedPresence = (@u 1?, ""?, ""?);
		ChangingPresence = false;
		NormalizedName = "account";
		HasBeenOnline = false?;
	}

	states {
		Disconnected;
		Connecting;
		Connected;
	}

	transition from Disconnected to Connecting on property RequestedPresence {
		object->RequestedPresence = value;
		object->ChangingPresence = true;
		object->ConnectionStatus = @u 1;
		object->ConnectionStatusReason = @u 1;

		emit AccountPropertyChanged ({
			"RequestedPresence" : <object->RequestedPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
		});
	}

	transition inside Connecting on property RequestedPresence {
		object->RequestedPresence = value;
		object->ChangingPresence = true;

		emit AccountPropertyChanged ({
			"RequestedPresence" : <object->RequestedPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
		});
	}

	transition from Connecting to Connected on random {
		object->CurrentPresence = object->RequestedPresence;
		object->ChangingPresence = false;
		object->ConnectionStatus = @u 0;
		object->ConnectionStatusReason = @u 1;
		object->Connection = @o "/org/freedesktop/Telepathy/Connection/cm/protocol/account";
		object->HasBeenOnline = true;

		emit AccountPropertyChanged ({
			"CurrentPresence" : <object->CurrentPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
			"Connection" : <object->Connection>,
			"HasBeenOnline" : <object->HasBeenOnline>,
		});
	}

	transition from Connecting to Disconnected on random {
		object->CurrentPresence = (@u 1, "", "");
		object->ChangingPresence = false;
		object->ConnectionStatus = @u 2;
		object->ConnectionStatusReason = @u 2?;
		object->Connection = @o "/";
		object->ConnectionError = ""?;
		object->ConnectionErrorDetails = @a{sv} {}?;

		emit AccountPropertyChanged ({
			"CurrentPresence" : <object->CurrentPresence>,
			"ChangingPresence" : <object->ChangingPresence>,
			"ConnectionStatus" : <object->ConnectionStatus>,
			"ConnectionStatusReason" : <object->ConnectionStatusReason>,
			"Connection" : <object->Connection>,
			"ConnectionError" : <object->ConnectionError>,
			"ConnectionErrorDetails" : <object->ConnectionErrorDetails>,
		});
	}
}

object at /org/freedesktop/Telepathy/ConnectionManager/cm, org.freedesktop.Telepathy.ConnectionManager.cm implements org.freedesktop.Telepathy.ConnectionManager {
	data {
		/* Properties */
		Protocols = @a{sa{sv}} {};

		Interfaces = @as [
			"org.freedesktop.Telepathy.ConnectionManager",
		];

		/* Other variables */
		_ConnectionObjectPath = @o "/org/freedesktop/Telepathy/ConnectionManager/cm"; /* nonsensical default value */
		_ConnectionBusName = "org.freedesktop.Telepathy.ConnectionManager.cm";
		_Params = @a(susv) [];
	}

	states {
		Main
	}

	transition inside Main on method GetParameters {
		precondition throwing NotImplemented { inArray(Protocol, keys object->Protocols) }

		reply (object->_Params);
	}

	transition inside Main on method ListProtocols {
		reply (keys object->Protocols);
	}

	transition inside Main on method RequestConnection {
		precondition throwing NotImplemented { inArray(Protocol, keys object->Protocols) }
		precondition throwing NotAvailable { object->_ConnectionBusName == "" }

		emit NewConnection (object->_ConnectionBusName, object->_ConnectionObjectPath, Protocol);
		reply (object->_ConnectionBusName, object->_ConnectionObjectPath);
	}

	transition inside Main on method RequestConnection {
		throw NetworkError;
	}

	transition inside Main on method RequestConnection {
		throw InvalidArgument;
	}
}

object at /org/freedesktop/Telepathy/Connection/cm/protocol/account, org.freedesktop.Telepathy.Connection.cm.protocol.account implements org.freedesktop.Telepathy.Connection, org.freedesktop.Telepathy.Connection.Interface.Contacts, org.freedesktop.Telepathy.Connection.Interface.Requests, org.freedesktop.Telepathy.Connection.Interface.Aliasing, org.freedesktop.Telepathy.Connection.Interface.Avatars, org.freedesktop.Telepathy.Connection.Interface.SimplePresence, org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities, org.freedesktop.Telepathy.Connection.Interface.ContactInfo {
	data {
		/* Properties */
		Interfaces = @as [
			"org.freedesktop.Telepathy.Connection",
			"org.freedesktop.Telepathy.Connection.Interface.Contacts",
			"org.freedesktop.Telepathy.Connection.Interface.Requests",
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing",
			"org.freedesktop.Telepathy.Connection.Interface.Avatars",
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence",
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities",
			"org.freedesktop.Telepathy.Connection.Interface.ContactInfo",
		];
		SelfHandle = @u 1;
		Status = @u 0 /* Disconnected */;
		HasImmortalHandles = true;

		/* Conn.I.Contacts */
		ContactAttributeInterfaces = @as [
			"org.freedesktop.Telepathy.Connection",
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing",
			"org.freedesktop.Telepathy.Connection.Interface.Avatars",
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence",
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities",
			"org.freedesktop.Telepathy.Connection.Interface.ContactInfo",
		];

		/* Conn.I.Requests. */
		Channels = @a(oa{sv}) [];
		RequestableChannelClasses = @a(a{sv}as) [];

		/* Conn.I.Avatars. */
		SupportedAvatarMIMETypes = @as [
			"image/jpeg",
		]?;
		MinimumAvatarHeight = @u 0?;
		MinimumAvatarWidth = @u 0?;
		RecommendedAvatarHeight = @u 100?;
		RecommendedAvatarWidth = @u 100?;
		MaximumAvatarHeight = @u 256?;
		MaximumAvatarWidth = @u 256?;
		MaximumAvatarBytes = @u 256?;

		/* Conn.I.SimplePresence */
		Statuses = {
			"available" : (@u 2, true, true),
		}?;
		MaximumStatusMessageLength = @u 100?;

		/* Conn.I.ContactInfo */
		ContactInfoFlags = @u 1?; /* Can_Set */
		SupportedFields = [
			("tel", ["type=home"]?, @u 1?, @u 1?),
			("tel", ["type=cell"]?, @u 1?, @u 1?),
			("adr", @as []?, @u 1?, @u 1?),
			("bday", @as []?, @u 1?, @u 1?),
			("email", ["type=internet"]?, @u 1?, @u 1?),
			("fn", @as []?, @u 1?, @u 1?),
			("org", @as []?, @u 1?, @u 1?),
			("url", ["type=home"]?, @u 1?, @u 1?),
		]?;

		/* Handles */
		RequestedHandleCounter = @u 100; /* give it an offset from the normal handles; this tries to prevent handle re-use which would confuse Telepathy clients. It's a hacky approach, but works well enough. */
		AddedHandles = @as [];
		AddedIdentifiers = @a{su} {};
	}

	states {
		Connected;
	}

	transition inside Connected on method GetInterfaces {
		reply (object->Interfaces);
	}

	transition inside Connected on method GetSelfHandle {
		reply (object->SelfHandle);
	}

	transition inside Connected on method GetStatus {
		reply (object->Status);
	}

	transition inside Connected on method GetContactAttributes {
		/* Added contacts */
		precondition { arrayGet (object->AddedHandles, arrayGet (Handles, @u 0, @u 0) - @u 100, "") != "" }

		reply ({arrayGet (Handles, @u 0, @u 0): {
			"org.freedesktop.Telepathy.Connection/contact-id" : <arrayGet (object->AddedHandles, arrayGet (Handles, @u 0, @u 0) - @u 100, "1@example.com"?)>,
		}});
	}

	transition inside Connected on method GetContactAttributes {
		/* Existing contacts */
		precondition { arrayGet (object->AddedHandles, arrayGet (Handles, @u 0, @u 0) - @u 100, "") == "" }

		reply (pairKeys (Handles, {
			"org.freedesktop.Telepathy.Connection/contact-id" : <"1@example.com"?>,
			"org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias" : <""?>,
			"org.freedesktop.Telepathy.Connection.Interface.Avatars/token" : <""?>,
			"org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence" : <(@u 3?, "available"?, "Status message!"?)>,
			"org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities/capabilities" : <[(
				{
					"org.freedesktop.Telepathy.something" : <""?>,
					"org.freedesktop.Telepathy.Channel.TargetHandleType" : <@u 0?>,
				}?,
				[
					"org.freedesktop.Telepathy.somethingelse",
				]?,
			)]?>,
			"org.freedesktop.Telepathy.Connection.Interface.ContactInfo/info" : <[
				("fn", @as []?, ["Wee Ninja"]?),
				("org", @as []?, ["Collabora, Ltd.", "Management Division", "Human Resources; Company Policy Enforcement"]?),
				("adr", ["type=work", "type=postal", "type=parcel"]?, ["", "", "11 Kings Parade", "Cambridge", "Cambridgeshire", "CB2 1SJ", "UK"]?),
				("tel", ["type=voice", "type=work"]?, ["+44 1223 362967"]?),
				("bday", @as []?, ["2000-01-01"]?),
				("email", ["type=work"]?, ["foo@example.baz"]?),
				("url", ["type=home"]?, ["http://example.com/"]?),
			]?>,
		}?));
	}

	transition inside Connected on method EnsureChannel {
		precondition throwing NotImplemented {
			dictGet (Request, "org.freedesktop.Telepathy.Channel.ChannelType", <"">) == <"org.freedesktop.Telepathy.Channel.Type.ContactList"> &&
			dictGet (Request, "org.freedesktop.Telepathy.Channel.TargetID", <"">) == <"subscribe">
		}

		object->Channels = arrayInsert (object->Channels, @u 1, (@o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/subscribe", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <@u 3>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <@u 0?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"subscribe">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		reply (true, @o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/subscribe", @a{sv} []);
	}

	transition inside Connected on random {
		object->Channels = arrayInsert (object->Channels, @u 0, (@o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/subscribe", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <@u 3>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <@u 0?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"subscribe">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		emit NewChannels ([arrayGet (object->Channels, @u 0, (@o "/p", @a{sv} {}))]);
		emit NewChannel (@o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/subscribe",
		                 "org.freedesktop.Telepathy.Channel.Type.ContactList", @u 3, @u 0?, false?);
	}

	transition inside Connected on random {
		object->Channels = arrayInsert (object->Channels, @u 0, (@o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/group1", {
			"org.freedesktop.Telepathy.Channel.ChannelType" : <"org.freedesktop.Telepathy.Channel.Type.ContactList">,
			"org.freedesktop.Telepathy.Channel.TargetHandleType" : <@u 4>,
			"org.freedesktop.Telepathy.Channel.TargetHandle" : <@u 0?>,
			"org.freedesktop.Telepathy.Channel.TargetID"  : <"group1">,
			"org.freedesktop.Telepathy.Channel.Requested" : <false?>,
		}));

		emit NewChannels ([arrayGet (object->Channels, @u 0, (@o "/p", @a{sv} {}))]);
		emit NewChannel (@o "/org/freedesktop/Telepathy/Connection/cm/protocol/account/group1",
		                 "org.freedesktop.Telepathy.Channel.Type.ContactList", @u 4, @u 0?, false?);
	}

	transition inside Connected on random {
		precondition { arrayGet (object->Channels, @u 0, (@o "/p", @a{sv} {})) != (@o "/p", @a{sv} {}) }

		emit ChannelClosed (structHead (arrayGet (object->Channels, @u 0, (@o "/p", @a{sv} {}))));
		object->Channels = arrayRemove (object->Channels, @u 0);
	}

	transition inside Connected on method GetAliasFlags {
		reply (@u 0?);
	}

	transition inside Connected on random {
		emit AvatarUpdated (@u 0?, ""?);
	}

	transition inside Connected on random {
		emit AvatarRetrieved (@u 0?, ""?, @ay [
			@y 255, @y 216 /* JPEG SOI; see if that gets us anywhere */
		]?, "image/jpeg"?);
	}

	transition inside Connected on method RequestAvatars {
		/* Do nothing specific. AvatarRetrieved will be emitted randomly at some point in the future. Possibly even for the contacts the client's requested. */
		reply ();
	}

	transition inside Connected on method RequestAvatars {
		throw InvalidHandle;
	}

	transition inside Connected on random {
		emit PresencesChanged (pairKeys (@au [@u 0]?, (@u 6?, "busy"?, "I’m busy."?)));
	}

	transition inside Connected on random {
		emit ContactCapabilitiesChanged (pairKeys (@au [@u 0]?, [(
			{
				"org.freedesktop.Telepathy.something" : <""?>,
				"org.freedesktop.Telepathy.Channel.TargetHandleType" : <@u 0?>,
			}?,
			[
				"org.freedesktop.Telepathy.somethingelse",
			]?,
		)]?));
	}

	transition inside Connected on random {
		emit ContactInfoChanged (@u 0?, [
			("fn", @as []?, ["Wee Ninja"]?),
			("org", @as []?, ["Collabora, Ltd.", "Management Division", "Human Resources; Company Policy Enforcement"]?),
			("adr", ["type=work", "type=postal", "type=parcel"]?, ["", "", "11 Kings Parade", "Cambridge", "Cambridgeshire", "CB2 1SJ", "UK"]?),
			("tel", ["type=voice", "type=work"]?, ["+44 1223 362967"]?),
			("bday", @as []?, ["2000-01-01"]?),
			("email", ["type=work"]?, ["foo@example.baz"]?),
			("url", ["type=home"]?, ["http://example.com/"]?),
		]?);
	}

	transition inside Connected on method RequestHandles {
		/* Request a previously-added handle */
		precondition { dictGet (object->AddedIdentifiers, arrayGet (Identifiers, @u 0, ""), @u 0) != @u 0 }

		reply ([dictGet (object->AddedIdentifiers, arrayGet (Identifiers, @u 0, ""), @u 0)]);
	}

	transition inside Connected on method RequestHandles {
		/* Request to add a handle */
		precondition { dictGet (object->AddedIdentifiers, arrayGet (Identifiers, @u 0, ""), @u 0) == @u 0 }

		reply ([object->RequestedHandleCounter]);

		object->AddedHandles = arrayInsert (object->AddedHandles, object->RequestedHandleCounter, arrayGet (Identifiers, @u 0, ""));
		object->AddedIdentifiers = dictSet (object->AddedIdentifiers, arrayGet (Identifiers, @u 0, ""), object->RequestedHandleCounter);
		object->RequestedHandleCounter = object->RequestedHandleCounter + @u 1;
	}

	transition inside Connected on method SetAliases {
		emit AliasesChanged (dictToTupleArray (Aliases));
		reply ();
	}

	transition inside Connected on method SetContactInfo {
		emit ContactInfoChanged (object->SelfHandle, ContactInfo);
		reply ();
	}
}

object at /org/freedesktop/Telepathy/Connection/cm/protocol/account/subscribe implements org.freedesktop.Telepathy.Channel, org.freedesktop.Telepathy.Channel.Type.ContactList, org.freedesktop.Telepathy.Channel.Interface.Group {
	data {
		/* Channel */
		ChannelType = "org.freedesktop.Telepathy.Channel.Type.ContactList";
		Interfaces = [
			"org.freedesktop.Telepathy.Channel.Type.ContactList",
			"org.freedesktop.Telepathy.Channel",
			"org.freedesktop.Telepathy.Channel.Interface.Group",
		];
		TargetHandle = @u 0?;
		TargetID = "subscribe";
		TargetHandleType = @u 3;
		Requested = false?;
		InitiatorHandle = @u 0?;
		InitiatorID = ""?;

		/* Channel.I.Group */
		GroupFlags = @u 6147; /* Can_Add | Can_Remove | Properties | Members_Changed_Detailed */
		HandleOwners = @a{uu} {};
		LocalPendingMembers = @a(uuus) [];
		Members = @au [ @u 1, @u 2, @u 3, @u 4, @u 5, @u 6, @u 7, @u 8, @u 9, @u 10 ];
		RemotePendingMembers = @au [];
		SelfHandle = @u 0;
		MemberIdentifiers = @a{us} {
			@u 1 : "1@example.com",
			@u 2 : "2@example.com",
			@u 3 : "3@example.com",
			@u 4 : "4@example.com",
			@u 5 : "5@example.com",
			@u 6 : "6@example.com",
			@u 7 : "7@example.com",
			@u 8 : "8@example.com",
			@u 9 : "9@example.com",
			@u 10 : "10@example.com",
		};

		/* Temporaries */
		_MemberCount = @u 10;
	}

	states {
		Open;
		Closed;
	}

	transition from Open to Closed on method Close {
		emit Closed ();
		reply ();
	}

	transition inside Open on random {
		object->Members = arrayInsert (object->Members, @u 0, object->_MemberCount);
		object->MemberIdentifiers = dictSet (object->MemberIdentifiers, object->_MemberCount, "1@example.com"?);

		emit MembersChangedDetailed ([object->_MemberCount + @u 1], @au [], @au [], @au [], @a{sv} {});

		object->_MemberCount = object->_MemberCount + @u 1;
	}

	transition inside Open on random {
		precondition { object->_MemberCount >= @u 1 }

		object->_MemberCount = object->_MemberCount - @u 1;

		object->Members = arrayRemove (object->Members, @u 0);
		object->MemberIdentifiers = dictUnset (object->MemberIdentifiers, object->_MemberCount);

		emit MembersChangedDetailed (@au [], [object->_MemberCount + @u 1], @au [], @au [], @a{sv} {});
	}

	transition inside Open on method GetHandle {
		reply (object->TargetHandleType, object->TargetHandle);
	}

	transition inside Open on method GetGroupFlags {
		reply (object->GroupFlags);
	}

	transition inside Open on method GetSelfHandle {
		reply (object->SelfHandle);
	}

	transition inside Open on method GetAllMembers {
		reply (object->Members, @au [] /* TODO */, object->RemotePendingMembers);
	}

	transition inside Open on method GetLocalPendingMembersWithInfo {
		reply (object->LocalPendingMembers);
	}

	transition inside Open on method AddMembers {
		object->Members = arrayInsert (object->Members, @u 0, arrayGet (Contacts, @u 0, @u 0));
		object->MemberIdentifiers = dictSet (object->MemberIdentifiers, arrayGet (Contacts, @u 0, @u 0), "1@example.com"?);

		emit MembersChangedDetailed (Contacts, @au [], @au [], @au [], @a{sv} {});

		reply ();
	}
}

object at /org/freedesktop/Telepathy/Connection/cm/protocol/account/group1 implements org.freedesktop.Telepathy.Channel, org.freedesktop.Telepathy.Channel.Type.ContactList, org.freedesktop.Telepathy.Channel.Interface.Group {
	data {
		/* Channel */
		ChannelType = "org.freedesktop.Telepathy.Channel.Type.ContactList";
		Interfaces = [
			"org.freedesktop.Telepathy.Channel.Type.ContactList",
			"org.freedesktop.Telepathy.Channel",
			"org.freedesktop.Telepathy.Channel.Interface.Group",
		];
		TargetHandle = @u 0?;
		TargetID = "group1";
		TargetHandleType = @u 4;
		Requested = false?;
		InitiatorHandle = @u 0?;
		InitiatorID = ""?;

		/* Channel.I.Group */
		GroupFlags = @u 6144; /* Properties | Members_Changed_Detailed */
		HandleOwners = @a{uu} {};
		LocalPendingMembers = @a(uuus) [];
		Members = @au [ @u 1, @u 2, @u 3, @u 4 ];
		RemotePendingMembers = @au [];
		SelfHandle = @u 0;
		MemberIdentifiers = @a{us} {
			@u 1 : "1@example.com",
			@u 2 : "2@example.com",
			@u 3 : "3@example.com",
			@u 4 : "4@example.com",
		};

		/* Temporaries */
		_MemberCount = @u 4;
	}

	states {
		Open;
		Closed;
	}

	transition from Open to Closed on method Close {
		emit Closed ();
		reply ();
	}

	transition inside Open on random {
		object->Members = arrayInsert (object->Members, @u 0, object->_MemberCount);
		object->MemberIdentifiers = dictSet (object->MemberIdentifiers, object->_MemberCount, "1@example.com"?);

		emit MembersChangedDetailed ([object->_MemberCount + @u 1], @au [], @au [], @au [], @a{sv} {});

		object->_MemberCount = object->_MemberCount + @u 1;
	}

	transition inside Open on random {
		precondition { object->_MemberCount >= @u 1 }

		object->_MemberCount = object->_MemberCount - @u 1;

		object->Members = arrayRemove (object->Members, @u 0);
		object->MemberIdentifiers = dictUnset (object->MemberIdentifiers, object->_MemberCount);

		emit MembersChangedDetailed (@au [], [object->_MemberCount + @u 1], @au [], @au [], @a{sv} {});
	}

	transition inside Open on method GetHandle {
		reply (object->TargetHandleType, object->TargetHandle);
	}

	transition inside Open on method GetGroupFlags {
		reply (object->GroupFlags);
	}

	transition inside Open on method GetSelfHandle {
		reply (object->SelfHandle);
	}

	transition inside Open on method GetAllMembers {
		reply (object->Members, @au [] /* TODO */, object->RemotePendingMembers);
	}

	transition inside Open on method GetLocalPendingMembersWithInfo {
		reply (object->LocalPendingMembers);
	}
}

